# CREAMS NON-AUTHENTICATED SYSTEM - COMPLETE TECHNICAL DOCUMENTATION
**Community-based REhAbilitation Management System**  
**Version:** 2.0 (December 2024)  
**Framework:** Laravel 10.x with PHP 8.4  
**Database:** MySQL  
**Email:** Log Driver (Development) / SMTP (Production)  

---

## TABLE OF CONTENTS
1. [System Overview](#system-overview)
2. [Public Routes Structure](#public-routes-structure)
3. [Homepage Module](#homepage-module)
4. [Contact Module](#contact-module)
5. [Volunteer Module](#volunteer-module)
6. [Shared Components](#shared-components)
7. [Database Schema](#database-schema)
8. [Email System](#email-system)
9. [JavaScript Architecture](#javascript-architecture)
10. [CSS Architecture](#css-architecture)
11. [Integration Points](#integration-points)

---

## 1. SYSTEM OVERVIEW

### Core Architecture
```
CREAMS/
├── app/
│   ├── Http/Controllers/
│   │   ├── HomeController.php
│   │   ├── ContactController.php
│   │   └── VolunteerController.php
│   └── Models/
│       ├── ContactMessages.php
│       └── Volunteers.php
├── database/migrations/
│   ├── 16_3_create_volunteer_applications_table.php
│   └── 16_5_create_contact_messages_table.php
├── public/
│   ├── css/
│   │   ├── homestyle.css
│   │   ├── contactstyle.css
│   │   ├── volunteerstyle.css
│   │   ├── headerstyle.css
│   │   └── footerstyle.css
│   └── js/
│       ├── homepage.js
│       ├── contact.js
│       └── volunteer.js
├── resources/views/
│   ├── home.blade.php
│   ├── contactus.blade.php
│   ├── volunteer.blade.php
│   └── layouts/
│       ├── header.blade.php
│       └── footer.blade.php
└── routes/web.php
```

### Key Features
- **No Authentication Required**: All pages accessible to public
- **Email System**: Uses Laravel Mail with log driver for development
- **Responsive Design**: Mobile-first approach with Bootstrap 4.6
- **CSRF Protection**: All forms protected with Laravel CSRF tokens
- **Session Handling**: RememberMe middleware tracks sessions
- **Role-Based Redirects**: Authenticated users auto-redirect to dashboards

---

## 2. PUBLIC ROUTES STRUCTURE

### Route Definitions (web.php)
```php
// Homepage - Auto-redirects authenticated users
Route::get('/', function () {
    if (session('id') && session('role')) {
        $role = session('role');
        return redirect()->route("{$role}.dashboard");
    }
    return view('home');
})->name('home');

// Contact Module
Route::get('/contact', [ContactController::class, 'index'])->name('contact');
Route::post('/contact/submit', [ContactController::class, 'submit'])->name('contact.submit');

// Volunteer Module
Route::get('/volunteer', [VolunteerController::class, 'index'])->name('volunteer');
Route::post('/volunteer/submit', [VolunteerController::class, 'submit'])->name('volunteer.submit');
```

### Middleware Chain
1. **RememberMe Middleware**: Logs all requests with session info
2. **CSRF Protection**: Automatic on POST routes
3. **Guest Access**: No auth middleware on public routes

---

## 3. HOMEPAGE MODULE

### 3.1 Controller: HomeController.php
```php
namespace App\Http\Controllers;

class HomeController extends Controller
{
    public function index()
    {
        return view('home'); // Renders home.blade.php
    }
}
```

### 3.2 View: home.blade.php

#### Structure:
1. **Hero Section**
   - Video background: `videos/welcomepage.mp4`
   - Overlay gradient: rgba(26, 42, 58, 0.7)
   - Logo: `images/logo/logo_ppdk.jpg`
   - Partner logos: IIUM & JKM
   - CTA Button: Links to staff login

2. **Vision & Mission Section**
   - Two-column layout
   - Icon boxes with gradient backgrounds
   - Mission as bulleted list

3. **Client Charter Section**
   - 4 charter cards in grid
   - Icons: heart, user-shield, hands-helping, users
   - Hover effects with translateY

4. **Journey Timeline**
   - Vertical timeline with alternating sides
   - Years: 2020-2024
   - Animated dots and content boxes

5. **Services Section**
   - 6 service cards in grid
   - Icons represent different disabilities
   - Categories: Autism, Hearing, Visual, Physical, Learning, Speech

6. **Organization Structure Section** (NEW)
   - Two org charts:
     - Management Team (Pengerusi → Committee)
     - Administrative Team (Penyelia → Officers)
   - Position badges with gradients
   - Connecting lines between levels

7. **Impact Section**
   - Counter animation (0 to target)
   - 4 metrics: Children, Volunteers, Staff, Activities
   - Blue gradient background

### 3.3 JavaScript: homepage.js
```javascript
// Core Functions:
1. initializePreloader() - Fades out after load
2. initializeHeader() - Sticky header on scroll
3. initializeHeroVideo() - Manages video playback
4. initializeCounters() - Animates numbers on scroll
5. initializeSmoothScrolling() - Anchor link scrolling
6. initializeBackToTop() - Show/hide on scroll
```

### 3.4 CSS: homestyle.css
```css
/* Key Classes */
.hero-section - 100vh with video background
.section-icon - 80x80px gradient circles
.timeline-block - Alternating timeline items
.service-card - White cards with hover lift
.org-card - Team member cards with images
.impact-number - Animated counter display
```

---

## 4. CONTACT MODULE

### 4.1 Controller: ContactController.php

#### Methods:
```php
public function index()
{
    // Logs access, returns contact view
    return view('contactus');
}

public function submit(Request $request)
{
    // 1. Validates with custom messages
    // 2. Formats data (name, phone)
    // 3. Saves to contact_messages table
    // 4. Sends confirmation email (logged)
    // 5. Sends admin notification
    // 6. Returns with success/error message
}
```

#### Validation Rules:
- **name**: required, string, min:2, max:255, regex (letters only)
- **email**: required, valid email format, DNS check
- **phone**: nullable, min:8, max:20, regex (numbers/symbols)
- **reason**: required, in:services,support,volunteer,etc
- **message**: required, min:10, max:2000
- **urgency**: nullable, in:low,medium,high,urgent

### 4.2 Model: ContactMessages.php

#### Fillable Fields:
```php
// Contact Info
'name', 'email', 'phone', 'organization'

// Message Details  
'reason', 'subject', 'message', 'urgency', 'preferred_contact_method'

// System Fields
'status', 'ip_address', 'user_agent', 'referrer', 'submitted_at'

// Admin Fields
'assigned_to', 'admin_notes', 'response_sent_at', 'resolved_at'
```

#### Key Methods:
- `getFormattedReasonAttribute()` - Human-readable reasons
- `isUrgent()` - Check if urgent priority
- `isOverdue()` - Check response time exceeded
- Status workflow: new → read → in_progress → resolved → closed

### 4.3 View: contactus.blade.php

#### Page Structure:
1. **Hero Section**
   - Gradient background
   - "Get in Touch" title
   - Subtitle with support info

2. **Quick Connect Cards**
   - 3 cards: Call, Email, Visit
   - Contact details prominently displayed
   - Hover animations

3. **Contact Form**
   - Real-time validation
   - Character counter for message
   - Progress indicator
   - Auto-save to localStorage
   - Success/error alerts

4. **Map Section**
   - Google Maps iframe
   - IIUM Gombak location

### 4.4 JavaScript: contact.js

#### Core Features:
```javascript
1. Form Validation
   - Real-time field validation
   - Custom error messages
   - Visual feedback (red/green borders)

2. Form Enhancements
   - Character counter (updates color near limit)
   - Auto-format phone numbers
   - Progress bar (% complete)
   - Auto-save every 1 second

3. LocalStorage Integration
   - Saves form data on input
   - Restores on page load
   - Clears on successful submit
```

### 4.5 CSS: contactstyle.css
```css
/* Key Styles */
.contact-hero - Gradient with pattern overlay
.connect-method - White cards with icon circles
.form-control:focus - Blue border with shadow
.character-counter - Dynamic color based on length
.alert - Slide-down animation
```

---

## 5. VOLUNTEER MODULE

### 5.1 Controller: VolunteerController.php

#### Methods:
```php
public function index()
{
    return view('volunteer');
}

public function submit(Request $request)
{
    // 1. Validates all fields including array (availability)
    // 2. Creates full name from first + last
    // 3. JSON encodes availability array
    // 4. Saves to volunteer_applications table
    // 5. Sends detailed confirmation email
    // 6. Sends admin notification with all details
    // 7. Redirects with success message
}
```

#### Special Validations:
- **availability**: required array with min:1 item
- **consent**: must be accepted (checkbox)
- **other_interest**: required only if interest="other"

### 5.2 Model: Volunteers.php

#### Table: volunteer_applications
```php
protected $fillable = [
    // Personal
    'name', 'first_name', 'last_name', 'email', 'phone', 
    'address', 'city', 'postcode',
    
    // Preferences
    'interest', 'other_interest', 'skills', 'availability', 'commitment',
    
    // Additional
    'motivation', 'experience', 'referral',
    
    // System
    'status', 'ip_address', 'user_agent', 'submitted_at'
];
```

#### Formatted Attributes:
- `getFormattedInterestAttribute()` - Maps interest codes to names
- `getFormattedAvailabilityAttribute()` - Decodes JSON, formats times
- `getFormattedCommitmentAttribute()` - Hours per week display

### 5.3 View: volunteer.blade.php

#### Multi-Step Form Structure:
1. **Video Hero**
   - Background video with gradient overlay
   - Call-to-action with scroll indicator

2. **Impact Stats**
   - 4 animated counters
   - Triggers on scroll intersection

3. **Opportunity Cards**
   - 6 volunteer areas
   - "Most Needed" featured badge
   - Time commitment display

4. **3-Step Form**
   ```
   Step 1: Personal Information
   - First/Last name (required)
   - Email/Phone (required)
   - Address fields (optional)
   
   Step 2: Volunteer Preferences
   - Area of Interest dropdown
   - Skills textarea
   - Availability checkboxes (min 1)
   - Time commitment dropdown
   
   Step 3: Additional Information
   - Motivation textarea (required)
   - Experience textarea
   - Referral source
   - Consent checkbox (required)
   ```

### 5.4 JavaScript: volunteer.js

#### Multi-Step Form Handler:
```javascript
function initializeMultiStepForm() {
    // Step Navigation
    - Validates current step before proceeding
    - Updates progress bar (33/66/100%)
    - Smooth scroll to form top
    
    // Field Validation
    - Required field checking
    - Special handling for checkbox arrays
    - Real-time validation on blur
    
    // Form Submission
    - Final validation check
    - Loading spinner on submit button
    - Auto-clear localStorage on success
}
```

#### Additional Features:
- Counter animations for stats
- Video pause when off-screen
- Auto-save form data
- Show/hide "other" interest field

### 5.5 CSS: volunteerstyle.css
```css
/* Multi-Step Specific */
.form-step { display: none; }
.form-step.active { display: block; }
.form-progress-bar { transition: width 0.3s; }
.help-card.featured { border: 2px solid var(--secondary-color); }
.featured-tag { transform: rotate(45deg); position: absolute; }
```

---

## 6. SHARED COMPONENTS

### 6.1 Header (header.blade.php)

#### Structure:
```html
<header id="header">
    <!-- Logo & Branding -->
    <div class="logo-wrapper">
        <img src="creams-logo.png" class="header-logo">
        <h1 class="logo">CREAMS</h1>
    </div>
    
    <!-- Navigation -->
    <nav class="nav-menu">
        <li><a href="/">Home</a></li>
        <li><a href="/volunteer">Volunteer</a></li>
        <li><a href="/contact">Contact</a></li>
        <li><a href="/auth/login" class="login-btn">Staff Portal</a></li>
    </nav>
    
    <!-- Mobile Toggle -->
    <i class="mobile-nav-toggle"></i>
</header>
```

#### Features:
- Sticky on scroll with shadow
- Mobile responsive navigation
- Login button with gradient
- Support for authenticated state

### 6.2 Footer (footer.blade.php)

#### Three-Column Layout:
1. **About Section**
   - Logo and description
   - Social media icons
   
2. **Quick Links**
   - Navigation with icons
   - Staff portal link
   
3. **Newsletter**
   - Email subscription form
   - Contact information

#### Wave Animation:
```css
.footer-wave {
    background-image: url('data:image/svg+xml...');
    animation: wavy 12s linear infinite;
}
```

---

## 7. DATABASE SCHEMA

### 7.1 contact_messages Table
```sql
CREATE TABLE contact_messages (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    -- Contact Fields
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NULL,
    organization VARCHAR(255) NULL,
    
    -- Message Fields
    reason ENUM('services','support','volunteer',...) NOT NULL,
    subject VARCHAR(255) NULL,
    message TEXT NOT NULL,
    urgency ENUM('low','medium','high','urgent') DEFAULT 'medium',
    preferred_contact_method ENUM('email','phone','both') DEFAULT 'email',
    
    -- Status Tracking
    status ENUM('new','read','in_progress','resolved','closed') DEFAULT 'new',
    assigned_to BIGINT NULL REFERENCES users(id),
    admin_notes TEXT NULL,
    
    -- Timestamps
    submitted_at TIMESTAMP NULL,
    response_sent_at TIMESTAMP NULL,
    resolved_at TIMESTAMP NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    -- Metadata
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    referrer VARCHAR(255) NULL,
    
    -- Indexes
    INDEX idx_status_created (status, created_at),
    INDEX idx_urgency_status (urgency, status)
);
```

### 7.2 volunteer_applications Table
```sql
CREATE TABLE volunteer_applications (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    -- Personal Info
    name VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address TEXT NULL,
    city VARCHAR(255) NULL,
    postcode VARCHAR(10) NULL,
    
    -- Volunteer Preferences
    interest ENUM('direct-support','skills-sharing',...) NOT NULL,
    other_interest VARCHAR(255) NULL,
    skills TEXT NULL,
    availability JSON NOT NULL, -- ["weekday","evening","weekend"]
    commitment ENUM('1-3','4-6','7-10','flexible') NOT NULL,
    
    -- Additional Info
    motivation TEXT NOT NULL,
    experience TEXT NULL,
    referral ENUM('website','social-media',...) NULL,
    
    -- Status
    status ENUM('pending','approved','rejected','contacted') DEFAULT 'pending',
    centre_id VARCHAR(10) NULL REFERENCES centres(centre_id),
    
    -- Review Process
    reviewed_by BIGINT NULL REFERENCES users(id),
    reviewed_at TIMESTAMP NULL,
    admin_notes TEXT NULL,
    
    -- Metadata
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    submitted_at TIMESTAMP NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    -- Indexes
    INDEX idx_status_created (status, created_at),
    INDEX idx_interest_status (interest, status)
);
```

---

## 8. EMAIL SYSTEM

### 8.1 Configuration (.env)
```env
# Development - Logs to storage/logs/laravel.log
MAIL_MAILER=log
MAIL_FROM_ADDRESS=pdcareuser1@gmail.com
MAIL_FROM_NAME="IIUM PD-CARE"

# Production Options
# MAIL_MAILER=smtp
# MAIL_HOST=smtp.gmail.com
# MAIL_PORT=587
# MAIL_USERNAME=pdcareuser1@gmail.com
# MAIL_PASSWORD=app_specific_password
# MAIL_ENCRYPTION=tls
```

### 8.2 Email Templates

#### Contact Confirmation (Plain Text)
```
Subject: Message Received - IIUM PD-CARE

Dear [Name],

Thank you for contacting IIUM PD-CARE. We have received your message regarding [reason].

Your Reference: #[ID]
Expected Response: [Based on urgency]

We will review your message and respond accordingly.

Best regards,
IIUM PD-CARE Team
```

#### Volunteer Confirmation (Plain Text)
```
Subject: Volunteer Application Received - IIUM PD-CARE

Dear [First Name],

Thank you for your interest in volunteering!

Application Summary:
- Area of Interest: [Interest]
- Availability: [Availability]
- Commitment: [Hours] per week
- Application ID: #VA[ID]

Next Steps:
1. Application review (7-10 days)
2. Interview if selected
3. Orientation and training

Contact: pdcare@iium.edu.my

Best regards,
IIUM PD-CARE Volunteer Team
```

---

## 9. JAVASCRIPT ARCHITECTURE

### 9.1 Common Patterns

#### Initialization Pattern:
```javascript
document.addEventListener('DOMContentLoaded', function() {
    initializePreloader();
    initializeFormValidation();
    initializeAnimations();
    // Module-specific initializations
});
```

#### Form Validation Pattern:
```javascript
function validateField(field) {
    let isValid = true;
    let message = '';
    
    // Required check
    if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        message = 'This field is required';
    }
    
    // Type-specific validation
    switch(field.type) {
        case 'email':
            // Email regex validation
            break;
        case 'tel':
            // Phone regex validation
            break;
    }
    
    // Update UI
    toggleFieldError(field, isValid, message);
    return isValid;
}
```

#### LocalStorage Pattern:
```javascript
const AUTO_SAVE_KEY = 'form_data';

function saveFormData() {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    localStorage.setItem(AUTO_SAVE_KEY, JSON.stringify(data));
}

function loadFormData() {
    const saved = localStorage.getItem(AUTO_SAVE_KEY);
    if (saved) {
        const data = JSON.parse(saved);
        // Restore form fields
    }
}
```

### 9.2 Animation Patterns

#### Counter Animation:
```javascript
function animateCounter(element) {
    const target = parseInt(element.dataset.count);
    const duration = 2000;
    const step = target / (duration / 16);
    let current = 0;
    
    const timer = setInterval(() => {
        current += step;
        element.textContent = Math.floor(current);
        if (current >= target) {
            element.textContent = target;
            clearInterval(timer);
        }
    }, 16);
}
```

#### Intersection Observer:
```javascript
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            // Trigger animation
            entry.target.classList.add('animated');
        }
    });
}, { threshold: 0.5 });
```

---

## 10. CSS ARCHITECTURE

### 10.1 CSS Variables
```css
:root {
    --primary-color: #32bdea;
    --secondary-color: #c850c0;
    --primary-gradient: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    --dark-color: #1a2a3a;
    --light-color: #ffffff;
    --text-color: #444444;
    --light-bg: #f8f9fa;
    --border-color: #e0e0e0;
    --header-height: 80px;
}
```

### 10.2 Common Components

#### Cards:
```css
.card-component {
    background: white;
    border-radius: 10-15px;
    padding: 20-40px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
}

.card-component:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.12);
}
```

#### Buttons:
```css
.btn-primary {
    background: var(--primary-gradient);
    border: none;
    padding: 12px 30px;
    border-radius: 50px;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(50, 189, 234, 0.3);
}

.btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(50, 189, 234, 0.4);
}
```

#### Form Controls:
```css
.form-control {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 12px 15px;
    transition: all 0.3s ease;
}

.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(50, 189, 234, 0.1);
}

.form-control.is-invalid {
    border-color: #dc3545;
}

.form-control.is-valid {
    border-color: #28a745;
}
```

### 10.3 Responsive Breakpoints
```css
/* Desktop First Approach */
@media (max-width: 991px) { /* Tablet */ }
@media (max-width: 767px) { /* Mobile */ }
@media (max-width: 576px) { /* Small Mobile */ }
```

---

## 11. INTEGRATION POINTS

### 11.1 Authentication Integration

#### Session Checks:
```php
// Homepage redirect for authenticated users
if (session('id') && session('role')) {
    $role = session('role');
    return redirect()->route("{$role}.dashboard");
}
```

#### RememberMe Middleware:
- Logs all requests with session info
- Tracks: session_id, has_session_id, session_role, url
- No authentication enforcement on public routes

### 11.2 Database Integration

#### Model Relationships:
```php
// ContactMessages Model
public function assignedUser() {
    return $this->belongsTo(Users::class, 'assigned_to');
}

// Volunteers Model  
public function centre() {
    return $this->belongsTo(Centres::class, 'centre_id');
}

public function reviewer() {
    return $this->belongsTo(Users::class, 'reviewed_by');
}
```

### 11.3 Admin Panel Integration

#### Contact Management:
- Route: `/admin/contacts` - List all messages
- Route: `/admin/contacts/{id}` - View details
- Route: `/admin/contacts/{id}/status` - Update status

#### Volunteer Management:
- Route: `/admin/volunteers` - List applications
- Route: `/admin/volunteers/{id}` - View application
- Route: `/admin/volunteers/{id}/status` - Update status

### 11.4 API Endpoints (for AJAX)

#### Search Integration:
```javascript
// Global search can include contacts/volunteers
fetch('/search?query=' + searchTerm)
    .then(response => response.json())
    .then(results => {
        // Display contacts and volunteers in search results
    });
```

### 11.5 File Upload Integration

#### Future Enhancement Points:
1. Contact form: Attachment support
2. Volunteer form: Resume/CV upload
3. Storage: `storage/app/public/uploads/`

### 11.6 Notification System Integration

#### Auto-create notifications on:
1. New contact message → Admin notification
2. New volunteer application → Admin notification
3. Status updates → User notifications

---

## CRITICAL IMPLEMENTATION NOTES

### Form Submission Flow:
1. JavaScript validates on client
2. Laravel validates on server
3. Data saved to database
4. Emails logged (dev) or sent (prod)
5. User redirected with flash message
6. Success/error displayed at form top

### Security Measures:
1. CSRF tokens on all forms
2. Input sanitization via Eloquent
3. SQL injection protection via bindings
4. XSS protection via Blade escaping
5. Rate limiting ready to implement

### Performance Optimizations:
1. Video lazy loading in hero sections
2. Image optimization required
3. CSS/JS minification in production
4. Database indexes on search fields
5. Query optimization with eager loading

### Browser Support:
- Chrome 60+
- Firefox 60+
- Safari 12+
- Edge 79+
- Mobile browsers: iOS Safari, Chrome Android

### Testing Checklist:
1. ✓ Form validation (all fields)
2. ✓ Email sending (log driver)
3. ✓ Database saving
4. ✓ Success/error messages
5. ✓ Mobile responsiveness
6. ✓ Cross-browser compatibility
7. ✓ JavaScript fallbacks
8. ✓ LocalStorage handling

---

## DEPLOYMENT REQUIREMENTS

### Server Requirements:
- PHP 8.0+
- MySQL 5.7+
- Composer
- Node.js (for asset compilation)

### Environment Setup:
```bash
# Install dependencies
composer install --no-dev
npm install && npm run production

# Configure environment
cp .env.example .env
php artisan key:generate

# Run migrations
php artisan migrate

# Set permissions
chmod -R 755 storage
chmod -R 755 bootstrap/cache

# Clear caches
php artisan config:cache
php artisan route:cache
php artisan view:cache
```

### Production Checklist:
1. Set APP_ENV=production
2. Set APP_DEBUG=false
3. Configure real SMTP settings
4. Enable HTTPS
5. Set up cron for Laravel scheduler
6. Configure proper file permissions
7. Set up backup strategy
8. Monitor error logs

---

This documentation provides COMPLETE technical details for the non-authenticated portion of CREAMS. Any developer or AI system can use this to understand, modify, or integrate with the authenticated system components.
# CREAMS System Overview & Architecture
**Community-based REhAbilitation Management System**  
**Version:** 4.0  
**Last Updated:** December 2024

## Table of Contents
1. [System Overview](#system-overview)
2. [Technology Stack](#technology-stack)
3. [System Architecture](#system-architecture)
4. [User Roles & Permissions](#user-roles--permissions)
5. [Core Modules](#core-modules)
6. [Database Structure](#database-structure)
7. [Security Features](#security-features)
8. [System Flow](#system-flow)

---

## 1. System Overview

CREAMS (Community-based REhAbilitation Management System) is a comprehensive web-based application designed to manage rehabilitation centers serving children with special needs. The system provides an integrated platform connecting:

- **Staff/Teachers** - Professionals who deliver rehabilitation services
- **Trainees** - Children with special needs receiving services
- **Activities** - Structured rehabilitation programs and sessions
- **Parents/Guardians** - Family members monitoring progress
- **Centers** - Physical locations where services are delivered

### Key Objectives:
- Streamline rehabilitation service management
- Track trainee progress and attendance
- Facilitate communication between stakeholders
- Generate comprehensive reports
- Manage resources and assets efficiently

---

## 2. Technology Stack

### Backend:
- **Framework**: Laravel 10.x
- **PHP Version**: 8.4
- **Database**: MySQL
- **Session Management**: File-based with RememberMe functionality
- **Email**: Log driver (development) / SMTP (production)

### Frontend:
- **HTML5**, **CSS3**, **JavaScript** (Vanilla)
- **CSS Framework**: Bootstrap 5.3
- **Icons**: Font Awesome 6.4
- **Fonts**: Google Fonts (Poppins)
- **Additional Libraries**: 
  - FullCalendar (for scheduling)
  - Chart.js (for analytics)
  - DataTables (for data management)

### Development Tools:
- **Version Control**: Git
- **Package Manager**: Composer (PHP), NPM (Frontend)
- **Testing**: PHPUnit, Laravel Dusk

---

## 3. System Architecture

### Application Structure:
```
CREAMS/
├── app/
│   ├── Http/
│   │   ├── Controllers/     # Business logic
│   │   ├── Middleware/      # Request filtering
│   │   └── Requests/        # Form validation
│   ├── Models/              # Database models
│   └── Services/            # Business services
├── database/
│   ├── migrations/          # Database schema
│   └── seeders/            # Test data
├── resources/
│   ├── views/              # Blade templates
│   ├── css/                # Stylesheets
│   └── js/                 # JavaScript files
├── routes/
│   └── web.php             # Application routes
└── storage/                # Logs, cache, uploads
```

### Design Patterns:
- **MVC Architecture**: Model-View-Controller separation
- **Repository Pattern**: For data access abstraction
- **Service Layer**: For complex business logic
- **Observer Pattern**: For event handling
- **Factory Pattern**: For object creation

---

## 4. User Roles & Permissions

### Role Hierarchy:
```
Admin (Highest Level)
├── Full system access
├── User management (all roles)
├── System configuration
├── Asset management
└── Complete reporting

Supervisor (High Level)
├── Manage Teachers and AJKs
├── Cannot manage Admins
├── Centre oversight
├── Activity approval
└── Limited asset access

Teacher (Standard Level)
├── Manage assigned classes
├── Mark attendance
├── Track trainee progress
├── View schedules
└── Create activity content

AJK (Committee - Standard Level)
├── Event management
├── Volunteer coordination
├── Community engagement
├── Limited trainee access
└── View-only permissions
```

### Permission Matrix:
| Feature | Admin | Supervisor | Teacher | AJK |
|---------|-------|------------|---------|-----|
| User Management | ✓ | Partial | ✗ | ✗ |
| Activity Creation | ✓ | ✓ | ✓ | ✗ |
| Trainee Management | ✓ | ✓ | Assigned | View |
| Asset Management | ✓ | ✗ | ✗ | ✗ |
| Reports | Full | Centre | Class | Limited |
| System Settings | ✓ | ✗ | ✗ | ✗ |

---

## 5. Core Modules

### 5.1 Authentication Module
- Login/Register system
- Password reset functionality
- Remember Me feature
- Session management
- Role-based redirects

### 5.2 User/Staff Module
- Staff directory
- Profile management
- Specialization tracking
- Performance metrics
- Activity assignment

### 5.3 Trainee Module
- Trainee registration
- Profile management
- Progress tracking
- Medical information
- Guardian associations

### 5.4 Activity Module
- Activity creation and management
- Session scheduling
- Enrollment management
- Attendance tracking
- Progress monitoring

### 5.5 Centre Module
- Centre information management
- Location-based filtering
- Capacity planning
- Resource allocation

### 5.6 Asset Module
- Inventory management
- Asset allocation
- Maintenance tracking
- Usage reports

### 5.7 Communication Module
- Contact form management
- Volunteer applications
- Internal messaging (planned)
- Notification system

---

## 6. Database Structure

### Core Tables:
```
users                 # All system users (staff)
trainees             # Children receiving services
activities           # Rehabilitation activities
activity_sessions    # Scheduled sessions
session_enrollments  # Trainee-session connections
activity_attendance  # Attendance records
centres              # Physical locations
assets              # Inventory items
contact_messages    # Public inquiries
volunteers          # Volunteer applications
guardians           # Parent/guardian accounts
```

### Key Relationships:
- Users ↔ Activities (Many-to-Many through sessions)
- Trainees ↔ Sessions (Many-to-Many through enrollments)
- Sessions → Activities (Many-to-One)
- Sessions → Teachers (Many-to-One)
- Trainees → Guardians (One-to-Many)
- Users → Centres (Many-to-One)

---

## 7. Security Features

### Authentication Security:
- Password hashing (bcrypt)
- CSRF protection on all forms
- Session regeneration on login
- Secure cookie handling
- Rate limiting (configurable)

### Authorization:
- Role-based access control (RBAC)
- Middleware protection on routes
- Policy-based authorization
- Resource-level permissions

### Data Protection:
- SQL injection prevention (Eloquent ORM)
- XSS protection (Blade escaping)
- Input validation and sanitization
- File upload restrictions
- Encrypted sensitive data

### Audit & Logging:
- User activity logging
- Failed login tracking
- System change logs
- Error logging
- Performance monitoring

---

## 8. System Flow

### User Journey:

#### For Staff (Teachers):
1. Login → Role-specific dashboard
2. View assigned activities/schedule
3. Mark attendance for sessions
4. Update trainee progress
5. Generate class reports

#### For Trainees:
1. Staff creates trainee profile
2. Enrollment in activities
3. Attendance tracking
4. Progress monitoring
5. Parent access to view progress

#### For Parents:
1. Receive access credentials
2. Login to parent portal
3. View child's schedule
4. Track attendance/progress
5. Communicate with teachers

#### For Administrators:
1. System configuration
2. User management
3. Activity oversight
4. Report generation
5. Resource allocation

### Data Flow:
```
Public Form Submission
    ↓
Database Storage
    ↓
Email Notification
    ↓
Admin Review
    ↓
Action Taken
```

### Integration Points:
- Email system for notifications
- File storage for documents
- External calendar integration (planned)
- SMS gateway (future)
- Mobile app API (future)

---

## Performance Optimizations

### Database:
- Indexed frequently queried columns
- Eager loading to prevent N+1 queries
- Query caching for static data
- Database connection pooling

### Application:
- Route caching in production
- Config caching
- View caching
- Autoloader optimization

### Frontend:
- Asset minification
- CDN for static resources
- Lazy loading for images
- Progressive enhancement

---

## Deployment Considerations

### Server Requirements:
- PHP 8.0+ with required extensions
- MySQL 5.7+ or MariaDB 10.3+
- Minimum 2GB RAM
- SSL certificate for HTTPS

### Environment Configuration:
- Separate .env files for dev/staging/production
- Secure credential management
- Backup strategies
- Monitoring and alerting

### Scalability:
- Horizontal scaling ready
- Queue system for heavy tasks
- Cache layer (Redis/Memcached)
- Load balancing support

---

## Future Roadmap

### Phase 1 (Next 3 months):
- Mobile application development
- Advanced reporting module
- Real-time notifications
- API development

### Phase 2 (6 months):
- Multi-language support
- Video consultation integration
- AI-powered progress insights
- Parent mobile app

### Phase 3 (12 months):
- Blockchain for credentials
- IoT device integration
- Advanced analytics
- Multi-tenant architecture

---

This overview provides a comprehensive understanding of the CREAMS system architecture, its components, and how they work together to deliver a complete rehabilitation management solution.
ActivityController

<?php

namespace App\Http\Controllers;

use App\Models\Activity;
use App\Models\ActivitySession;
use App\Models\SessionEnrollment;
use App\Models\ActivityAttendance;
use App\Models\Users;
use App\Models\Trainee;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;
use Exception;
use Illuminate\Database\QueryException;
use Illuminate\Validation\ValidationException;

class ActivityController extends Controller
{
    /**
     * Display activities based on user role with comprehensive error handling
     */
    public function index()
    {
        try {
            Log::info('Activity index accessed', [
                'user_id' => session('id'),
                'role' => session('role'),
                'ip' => request()->ip()
            ]);

            $role = session('role');
            $userId = session('id');
            
            // Validate session data
            if (!$role || !$userId) {
                Log::warning('Invalid session data in activity index', [
                    'role' => $role,
                    'user_id' => $userId
                ]);
                return redirect()->route('auth.login')
                    ->with('error', 'Please log in to access activities.');
            }
            
            // Base query with error handling for relationships
            $query = Activity::with(['creator', 'activeSessions'])
                ->withCount('activeSessions');
            
            // Role-based filtering with error handling
            try {
                switch ($role) {
                    case 'teacher':
                        $query->whereHas('sessions', function ($q) use ($userId) {
                            $q->where('teacher_id', $userId)
                              ->where('is_active', true);
                        });
                        break;
                        
                    case 'trainee':
                        $trainee = Trainee::where('user_id', $userId)->first();
                        if (!$trainee) {
                            Log::warning('Trainee record not found for user', ['user_id' => $userId]);
                            return view('activities.index', [
                                'activities' => collect(),
                                'categories' => collect(),
                                'stats' => $this->getDefaultStats()
                            ])->with('warning', 'Your trainee profile is not set up. Please contact an administrator.');
                        }
                        
                        $query->whereHas('sessions.enrollments', function ($q) use ($trainee) {
                            $q->where('trainee_id', $trainee->id)
                              ->where('status', 'Active');
                        });
                        break;
                        
                    default:
                        $query->latest();
                }
                
                $activities = $query->get();
                
            } catch (QueryException $e) {
                Log::error('Database error in activity filtering', [
                    'error' => $e->getMessage(),
                    'role' => $role,
                    'user_id' => $userId
                ]);
                
                return view('activities.index', [
                    'activities' => collect(),
                    'categories' => collect(),
                    'stats' => $this->getDefaultStats()
                ])->with('error', 'Unable to load activities. Please try again later.');
            }
            
            // Get categories and stats with error handling
            $categories = $this->getCategoriesWithErrorHandling();
            $stats = $this->getActivityStatsWithErrorHandling();
            
            // Select appropriate view
            $viewName = $this->getViewByRole($role);
            
            return view($viewName, compact('activities', 'categories', 'stats'));
            
        } catch (Exception $e) {
            Log::error('Unexpected error in activity index', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return view('activities.index', [
                'activities' => collect(),
                'categories' => collect(),
                'stats' => $this->getDefaultStats()
            ])->with('error', 'An unexpected error occurred. Our team has been notified.');
        }
    }
    
    /**
     * Show the form for creating a new activity
     */
    public function create()
    {
        try {
            // Permission check
            if (!in_array(session('role'), ['admin', 'supervisor'])) {
                Log::warning('Unauthorized activity create attempt', [
                    'user_id' => session('id'),
                    'role' => session('role')
                ]);
                return redirect()->route('activities.index')
                    ->with('error', 'You do not have permission to create activities.');
            }
            
            $categories = $this->getCategoriesWithErrorHandling();
            
            if ($categories->isEmpty()) {
                Log::warning('No categories available for activity creation');
                return redirect()->route('activities.index')
                    ->with('warning', 'No activity categories are configured. Please contact an administrator.');
            }
            
            return view('activities.create', compact('categories'));
            
        } catch (Exception $e) {
            Log::error('Error in activity create form', [
                'error' => $e->getMessage(),
                'user_id' => session('id')
            ]);
            
            return redirect()->route('activities.index')
                ->with('error', 'Unable to load the create form. Please try again.');
        }
    }
    
    /**
     * Store a newly created activity with comprehensive validation
     */
    public function store(Request $request)
    {
        // Permission check
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to create activities.');
        }
        
        try {
            // Validate with custom messages
            $validated = $request->validate([
                'activity_name' => 'required|string|max:255|min:3',
                'activity_code' => 'required|string|max:50|unique:activities,activity_code|regex:/^[A-Z0-9]+$/',
                'category' => 'required|string|max:100',
                'description' => 'required|string|max:1000|min:10',
                'objectives' => 'nullable|string|max:2000',
                'materials_needed' => 'nullable|string|max:1000',
                'age_group' => 'required|in:3-6,7-12,13-18,All Ages',
                'difficulty_level' => 'required|in:Beginner,Intermediate,Advanced'
            ], [
                'activity_name.required' => 'Please provide an activity name.',
                'activity_name.min' => 'Activity name must be at least 3 characters.',
                'activity_code.required' => 'Please provide an activity code.',
                'activity_code.unique' => 'This activity code is already in use.',
                'activity_code.regex' => 'Activity code must contain only uppercase letters and numbers.',
                'description.min' => 'Please provide a more detailed description (at least 10 characters).',
                'category.required' => 'Please select a category.',
                'age_group.required' => 'Please select an age group.',
                'difficulty_level.required' => 'Please select a difficulty level.'
            ]);
            
            DB::beginTransaction();
            
            try {
                $activity = Activity::create([
                    ...$validated,
                    'created_by' => session('id'),
                    'is_active' => true
                ]);
                
                DB::commit();
                
                Log::info('Activity created successfully', [
                    'activity_id' => $activity->id,
                    'activity_name' => $activity->activity_name,
                    'created_by' => session('name')
                ]);
                
                // Clear relevant caches
                $this->clearActivityCaches();
                
                return redirect()->route('activities.show', $activity->id)
                    ->with('success', 'Activity "' . $activity->activity_name . '" created successfully!');
                    
            } catch (QueryException $e) {
                DB::rollBack();
                
                Log::error('Database error creating activity', [
                    'error' => $e->getMessage(),
                    'user_id' => session('id')
                ]);
                
                if ($e->getCode() == '23000') {
                    return back()->withInput()
                        ->with('error', 'The activity code is already in use. Please choose a different code.');
                }
                
                return back()->withInput()
                    ->with('error', 'Database error occurred. Please try again.');
            }
                
        } catch (ValidationException $e) {
            return back()->withErrors($e->validator)->withInput();
            
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Unexpected error creating activity', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return back()->withInput()
                ->with('error', 'An unexpected error occurred. Please try again later.');
        }
    }
    
    /**
     * Display the specified activity with error handling
     */
    public function show($id)
    {
        try {
            $activity = Activity::with([
                'creator',
                'sessions' => function ($query) {
                    $query->with(['teacher', 'activeEnrollments.trainee'])
                          ->orderBy('day_of_week')
                          ->orderBy('start_time');
                }
            ])->findOrFail($id);
            
            // Check access permission
            if (!$this->canViewActivity($activity)) {
                Log::warning('Unauthorized activity view attempt', [
                    'activity_id' => $id,
                    'user_id' => session('id'),
                    'role' => session('role')
                ]);
                
                return redirect()->route('activities.index')
                    ->with('error', 'You do not have permission to view this activity.');
            }
            
            // Calculate statistics with error handling
            try {
                $stats = [
                    'total_sessions' => $activity->sessions->count(),
                    'active_sessions' => $activity->activeSessions->count(),
                    'total_enrollments' => $activity->total_enrollments ?? 0,
                    'teachers' => $activity->sessions->pluck('teacher')->filter()->unique()->count()
                ];
            } catch (Exception $e) {
                Log::error('Error calculating activity statistics', [
                    'activity_id' => $id,
                    'error' => $e->getMessage()
                ]);
                
                $stats = [
                    'total_sessions' => 0,
                    'active_sessions' => 0,
                    'total_enrollments' => 0,
                    'teachers' => 0
                ];
            }
            
            return view('activities.show', compact('activity', 'stats'));
            
        } catch (Exception $e) {
            Log::error('Error viewing activity', [
                'activity_id' => $id,
                'error' => $e->getMessage(),
                'user_id' => session('id')
            ]);
            
            return redirect()->route('activities.index')
                ->with('error', 'Activity not found or inaccessible.');
        }
    }
    
    /**
     * Show the form for editing the specified activity
     */
    public function edit($id)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to edit activities.');
        }
        
        try {
            $activity = Activity::findOrFail($id);
            $categories = $this->getCategoriesWithErrorHandling();
            
            // Check if activity has active sessions
            if ($activity->activeSessions()->count() > 0) {
                Log::info('Edit attempt on activity with active sessions', [
                    'activity_id' => $id,
                    'active_sessions' => $activity->activeSessions()->count()
                ]);
            }
            
            return view('activities.edit', compact('activity', 'categories'));
            
        } catch (Exception $e) {
            Log::error('Error loading activity for edit', [
                'activity_id' => $id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('activities.index')
                ->with('error', 'Activity not found or cannot be edited.');
        }
    }
    
    /**
     * Update the specified activity with validation and error handling
     */
    public function update(Request $request, $id)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to edit activities.');
        }
        
        try {
            $activity = Activity::findOrFail($id);
            
            // Validate with custom messages
            $validated = $request->validate([
                'activity_name' => 'required|string|max:255|min:3',
                'activity_code' => 'required|string|max:50|regex:/^[A-Z0-9]+$/|unique:activities,activity_code,' . $id,
                'category' => 'required|string|max:100',
                'description' => 'required|string|max:1000|min:10',
                'objectives' => 'nullable|string|max:2000',
                'materials_needed' => 'nullable|string|max:1000',
                'age_group' => 'required|in:3-6,7-12,13-18,All Ages',
                'difficulty_level' => 'required|in:Beginner,Intermediate,Advanced',
                'is_active' => 'boolean'
            ], [
                'activity_name.required' => 'Please provide an activity name.',
                'activity_name.min' => 'Activity name must be at least 3 characters.',
                'activity_code.required' => 'Please provide an activity code.',
                'activity_code.regex' => 'Activity code must contain only uppercase letters and numbers.',
                'description.min' => 'Please provide a more detailed description (at least 10 characters).'
            ]);
            
            DB::beginTransaction();
            
            try {
                // Store old values for logging
                $oldValues = $activity->only(['activity_name', 'activity_code', 'is_active']);
                
                $activity->update([
                    ...$validated,
                    'updated_by' => session('id')
                ]);
                
                DB::commit();
                
                Log::info('Activity updated successfully', [
                    'activity_id' => $id,
                    'updated_by' => session('name'),
                    'changes' => array_diff_assoc($validated, $oldValues)
                ]);
                
                // Clear relevant caches
                $this->clearActivityCaches();
                
                // Show appropriate message based on what changed
                if (isset($validated['is_active']) && $validated['is_active'] != $oldValues['is_active']) {
                    $statusMessage = $validated['is_active'] ? 'activated' : 'deactivated';
                    return redirect()->route('activities.show', $id)
                        ->with('success', "Activity \"{$activity->activity_name}\" has been {$statusMessage}.");
                }
                
                return redirect()->route('activities.show', $id)
                    ->with('success', 'Activity updated successfully!');
                    
            } catch (QueryException $e) {
                DB::rollBack();
                
                Log::error('Database error updating activity', [
                    'activity_id' => $id,
                    'error' => $e->getMessage()
                ]);
                
                return back()->withInput()
                    ->with('error', 'Database error occurred. Please try again.');
            }
                
        } catch (ValidationException $e) {
            return back()->withErrors($e->validator)->withInput();
            
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Unexpected error updating activity', [
                'activity_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->withInput()
                ->with('error', 'An unexpected error occurred. Please try again later.');
        }
    }
    
    /**
     * Remove the specified activity with comprehensive checks
     */
    public function destroy($id)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to delete activities.');
        }
        
        try {
            DB::beginTransaction();
            
            $activity = Activity::findOrFail($id);
            
            // Check if activity has active sessions
            $activeSessionsCount = $activity->activeSessions()->count();
            if ($activeSessionsCount > 0) {
                Log::warning('Attempt to delete activity with active sessions', [
                    'activity_id' => $id,
                    'active_sessions' => $activeSessionsCount
                ]);
                
                return back()->with('error', 
                    "Cannot delete activity with {$activeSessionsCount} active session(s). Please deactivate all sessions first.");
            }
            
            // Check if activity has any enrollments
            $totalEnrollments = SessionEnrollment::whereHas('session', function ($q) use ($id) {
                $q->where('activity_id', $id);
            })->count();
            
            if ($totalEnrollments > 0) {
                // Soft delete by deactivating
                $activity->update([
                    'is_active' => false,
                    'updated_by' => session('id')
                ]);
                
                DB::commit();
                
                Log::info('Activity soft deleted (deactivated)', [
                    'activity_id' => $id,
                    'total_enrollments' => $totalEnrollments,
                    'deactivated_by' => session('name')
                ]);
                
                return redirect()->route('activities.index')
                    ->with('success', "Activity \"{$activity->activity_name}\" has been deactivated due to existing enrollments.");
            }
            
            // Hard delete if no enrollments
            $activityName = $activity->activity_name;
            $activity->delete();
            
            DB::commit();
            
            Log::info('Activity permanently deleted', [
                'activity_id' => $id,
                'activity_name' => $activityName,
                'deleted_by' => session('name')
            ]);
            
            // Clear relevant caches
            $this->clearActivityCaches();
            
            return redirect()->route('activities.index')
                ->with('success', "Activity \"{$activityName}\" has been permanently deleted.");
                
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Error deleting activity', [
                'activity_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', 'Failed to delete activity. Please try again.');
        }
    }
    
    /**
     * Show teacher's schedule with error handling
     */
    public function teacherSchedule()
    {
        try {
            $teacherId = session('id');
            
            if (!$teacherId) {
                return redirect()->route('auth.login')
                    ->with('error', 'Please log in to view your schedule.');
            }
            
            $sessions = ActivitySession::with(['activity', 'activeEnrollments.trainee'])
                ->where('teacher_id', $teacherId)
                ->where('is_active', true)
                ->currentSemester()
                ->orderBy('day_of_week')
                ->orderBy('start_time')
                ->get();
                
            $schedule = $this->formatSchedule($sessions);
            
            // Calculate statistics
            $stats = [
                'total_sessions' => $sessions->count(),
                'total_students' => $sessions->sum(function ($session) {
                    return $session->activeEnrollments->count();
                }),
                'total_activities' => $sessions->pluck('activity_id')->unique()->count(),
                'this_week' => $this->getThisWeekSessions($sessions)
            ];
            
            return view('activities.schedule.teacher', compact('schedule', 'sessions', 'stats'));
            
        } catch (Exception $e) {
            Log::error('Error loading teacher schedule', [
                'teacher_id' => session('id'),
                'error' => $e->getMessage()
            ]);
            
            return view('activities.schedule.teacher', [
                'schedule' => collect(),
                'sessions' => collect(),
                'stats' => [
                    'total_sessions' => 0,
                    'total_students' => 0,
                    'total_activities' => 0,
                    'this_week' => 0
                ]
            ])->with('error', 'Unable to load schedule. Please try again.');
        }
    }
    
    /**
     * Show form to mark attendance with error handling
     */
    public function markAttendance($sessionId)
    {
        try {
            $session = ActivitySession::with(['activity', 'activeEnrollments.trainee'])
                ->findOrFail($sessionId);
                
            // Check permission
            if (!$this->canMarkAttendance($session)) {
                Log::warning('Unauthorized attendance marking attempt', [
                    'session_id' => $sessionId,
                    'user_id' => session('id'),
                    'role' => session('role')
                ]);
                
                return redirect()->back()
                    ->with('error', 'You do not have permission to mark attendance for this session.');
            }
            
            $date = request('date', now()->format('Y-m-d'));
            
            // Validate date
            if (Carbon::parse($date)->isFuture()) {
                return redirect()->back()
                    ->with('warning', 'Cannot mark attendance for future dates.');
            }
            
            // Get existing attendance records
            try {
                $attendance = ActivityAttendance::where('session_id', $sessionId)
                    ->where('attendance_date', $date)
                    ->pluck('status', 'trainee_id');
            } catch (Exception $e) {
                Log::error('Error fetching attendance records', [
                    'session_id' => $sessionId,
                    'date' => $date,
                    'error' => $e->getMessage()
                ]);
                $attendance = collect();
            }
                
            return view('activities.attendance.mark', compact('session', 'date', 'attendance'));
            
        } catch (Exception $e) {
            Log::error('Error loading attendance form', [
                'session_id' => $sessionId,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->back()
                ->with('error', 'Session not found or inaccessible.');
        }
    }
    
    /**
     * Store attendance records with validation and error handling
     */
    public function storeAttendance(Request $request, $sessionId)
    {
        try {
            $session = ActivitySession::findOrFail($sessionId);
            
            if (!$this->canMarkAttendance($session)) {
                return redirect()->back()
                    ->with('error', 'You do not have permission to mark attendance for this session.');
            }
            
            // Validate request
            $validated = $request->validate([
                'date' => 'required|date|before_or_equal:today',
                'attendance' => 'required|array|min:1',
                'attendance.*' => 'required|in:Present,Absent,Late,Excused',
                'participation' => 'array',
                'participation.*' => 'nullable|integer|min:0|max:10',
                'notes' => 'array',
                'notes.*' => 'nullable|string|max:255'
            ], [
                'date.before_or_equal' => 'Cannot mark attendance for future dates.',
                'attendance.required' => 'Please mark attendance for at least one trainee.',
                'attendance.*.in' => 'Invalid attendance status provided.'
            ]);
            
            DB::beginTransaction();
            
            try {
                $successCount = 0;
                $errors = [];
                
                foreach ($validated['attendance'] as $traineeId => $status) {
                    try {
                        // Verify trainee is enrolled
                        $enrollment = SessionEnrollment::where('session_id', $sessionId)
                            ->where('trainee_id', $traineeId)
                            ->where('status', 'Active')
                            ->first();
                            
                        if (!$enrollment) {
                            $errors[] = "Trainee ID {$traineeId} is not enrolled in this session.";
                            continue;
                        }
                        
                        ActivityAttendance::updateOrCreate(
                            [
                                'session_id' => $sessionId,
                                'trainee_id' => $traineeId,
                                'attendance_date' => $validated['date']
                            ],
                            [
                                'status' => $status,
                                'participation_score' => $validated['participation'][$traineeId] ?? null,
                                'notes' => $validated['notes'][$traineeId] ?? null,
                                'marked_by' => session('id')
                            ]
                        );
                        
                        $successCount++;
                        
                    } catch (Exception $e) {
                        Log::error('Error marking attendance for trainee', [
                            'trainee_id' => $traineeId,
                            'session_id' => $sessionId,
                            'error' => $e->getMessage()
                        ]);
                        $errors[] = "Failed to mark attendance for trainee ID {$traineeId}.";
                    }
                }
                
                DB::commit();
                
                Log::info('Attendance marked successfully', [
                    'session_id' => $sessionId,
                    'date' => $validated['date'],
                    'marked_by' => session('name'),
                    'success_count' => $successCount,
                    'error_count' => count($errors)
                ]);
                
                // Prepare feedback message
                $message = "Attendance marked for {$successCount} trainee(s).";
                if (!empty($errors)) {
                    $message .= " Some errors occurred: " . implode(' ', array_slice($errors, 0, 3));
                    if (count($errors) > 3) {
                        $message .= " and " . (count($errors) - 3) . " more.";
                    }
                }
                
                return redirect()->route('activities.sessions', $session->activity_id)
                    ->with($errors ? 'warning' : 'success', $message);
                    
            } catch (Exception $e) {
                DB::rollBack();
                
                Log::error('Database error marking attendance', [
                    'session_id' => $sessionId,
                    'error' => $e->getMessage()
                ]);
                
                return back()->with('error', 'Failed to save attendance. Please try again.');
            }
                
        } catch (ValidationException $e) {
            return back()->withErrors($e->validator)->withInput();
            
        } catch (Exception $e) {
            Log::error('Unexpected error marking attendance', [
                'session_id' => $sessionId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', 'An unexpected error occurred. Please try again later.');
        }
    }
    
    /**
     * API: Search activities with error handling
     */
    public function search(Request $request)
    {
        try {
            $query = $request->get('q', '');
            
            if (strlen($query) < 2) {
                return response()->json([
                    'results' => [],
                    'message' => 'Please enter at least 2 characters to search.'
                ]);
            }
            
            $activities = Activity::where(function ($q) use ($query) {
                    $q->where('activity_name', 'LIKE', "%{$query}%")
                      ->orWhere('activity_code', 'LIKE', "%{$query}%")
                      ->orWhere('category', 'LIKE', "%{$query}%");
                })
                ->where('is_active', true)
                ->with('creator')
                ->limit(10)
                ->get();
                
            return response()->json([
                'results' => $activities->map(function ($activity) {
                    return [
                        'id' => $activity->id,
                        'text' => "{$activity->activity_name} ({$activity->activity_code})",
                        'category' => $activity->category,
                        'difficulty' => $activity->difficulty_level,
                        'age_group' => $activity->age_group
                    ];
                })
            ]);
            
        } catch (Exception $e) {
            Log::error('Error in activity search', [
                'query' => $request->get('q'),
                'error' => $e->getMessage()
            ]);
            
            return response()->json([
                'results' => [],
                'error' => 'Search failed. Please try again.'
            ], 500);
        }
    }
    
    /**
     * API: Get categories for dropdown
     */
    public function getCategories()
    {
        try {
            $categories = $this->getCategoriesWithErrorHandling();
            
            return response()->json([
                'categories' => $categories->map(function ($cat) {
                    return ['value' => $cat, 'text' => $cat];
                })
            ]);
            
        } catch (Exception $e) {
            Log::error('Error fetching categories API', [
                'error' => $e->getMessage()
            ]);
            
            return response()->json([
                'categories' => [],
                'error' => 'Failed to load categories.'
            ], 500);
        }
    }
    
    /**
     * Helper: Get categories with error handling
     */
    private function getCategoriesWithErrorHandling()
    {
        try {
            return Cache::remember('activity_categories', 900, function () {
                $categories = collect();
                
                // Get unique categories from user activities
                for ($i = 1; $i <= 5; $i++) {
                    $field = "user_activity_{$i}";
                    try {
                        $cats = Users::whereNotNull($field)
                            ->where($field, '!=', '')
                            ->distinct()
                            ->pluck($field);
                        $categories = $categories->merge($cats);
                    } catch (Exception $e) {
                        Log::warning("Error fetching categories from {$field}", [
                            'error' => $e->getMessage()
                        ]);
                    }
                }
                
                return $categories->unique()->filter()->sort()->values();
            });
        } catch (Exception $e) {
            Log::error('Critical error fetching categories', [
                'error' => $e->getMessage()
            ]);
            
            // Return default categories as fallback
            return collect([
                'Speech Therapy',
                'Occupational Therapy',
                'Physical Therapy',
                'Special Education',
                'Behavioral Therapy'
            ]);
        }
    }
    
    /**
     * Helper: Get activity statistics with error handling
     */
    private function getActivityStatsWithErrorHandling()
    {
        $role = session('role');
        $userId = session('id');
        
        try {
            return Cache::remember("activity_stats_{$role}_{$userId}", 900, function () use ($role, $userId) {
                $stats = $this->getDefaultStats();
                
                try {
                    switch ($role) {
                        case 'admin':
                        case 'supervisor':
                            $stats['total_activities'] = Activity::count();
                            $stats['active_activities'] = Activity::where('is_active', true)->count();
                            $stats['total_sessions'] = ActivitySession::where('is_active', true)->count();
                            $stats['total_enrollments'] = SessionEnrollment::where('status', 'Active')->count();
                            break;
                            
                        case 'teacher':
                            $stats['total_sessions'] = ActivitySession::where('teacher_id', $userId)
                                ->where('is_active', true)
                                ->count();
                            $stats['total_enrollments'] = SessionEnrollment::whereHas('session', function ($q) use ($userId) {
                                $q->where('teacher_id', $userId);
                            })->where('status', 'Active')->count();
                            break;
                            
                        case 'trainee':
                            $trainee = Trainee::where('user_id', $userId)->first();
                            if ($trainee) {
                                $stats['total_activities'] = SessionEnrollment::where('trainee_id', $trainee->id)
                                    ->where('status', 'Active')
                                    ->distinct('session_id')
                                    ->count();
                            }
                            break;
                    }
                } catch (Exception $e) {
                    Log::error('Error calculating activity statistics', [
                        'role' => $role,
                        'user_id' => $userId,
                        'error' => $e->getMessage()
                    ]);
                }
                
                return $stats;
            });
        } catch (Exception $e) {
            Log::error('Critical error in activity stats', [
                'error' => $e->getMessage()
            ]);
            
            return $this->getDefaultStats();
        }
    }
    
    /**
     * Helper: Get default statistics structure
     */
    private function getDefaultStats()
    {
        return [
            'total_activities' => 0,
            'active_activities' => 0,
            'total_sessions' => 0,
            'total_enrollments' => 0
        ];
    }
    
    /**
     * Helper: Get view name by role
     */
    private function getViewByRole($role)
    {
        $viewMap = [
            'admin' => 'activities.index',
            'supervisor' => 'activities.index',
            'teacher' => 'activities.teacher-dashboard',
            'trainee' => 'activities.trainee-dashboard',
            'ajk' => 'activities.index'
        ];
        
        $view = $viewMap[$role] ?? 'activities.index';
        
        // Check if view exists
        if (!view()->exists($view)) {
            Log::warning('Activity view not found, using default', [
                'requested_view' => $view,
                'role' => $role
            ]);
            return 'activities.index';
        }
        
        return $view;
    }
    
    /**
     * Helper: Check if user can view activity
     */
    private function canViewActivity($activity)
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            switch ($role) {
                case 'admin':
                case 'supervisor':
                case 'ajk':
                    return true;
                    
                case 'teacher':
                    return $activity->sessions()->where('teacher_id', $userId)->exists();
                    
                case 'trainee':
                    $trainee = Trainee::where('user_id', $userId)->first();
                    return $trainee && $activity->sessions()
                        ->whereHas('enrollments', function ($q) use ($trainee) {
                            $q->where('trainee_id', $trainee->id);
                        })->exists();
                        
                default:
                    return false;
            }
        } catch (Exception $e) {
            Log::error('Error checking activity view permission', [
                'activity_id' => $activity->id,
                'user_id' => session('id'),
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
    
    /**
     * Helper: Check if user can mark attendance
     */
    private function canMarkAttendance($session)
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            switch ($role) {
                case 'admin':
                case 'supervisor':
                    return true;
                    
                case 'teacher':
                    return $session->teacher_id == $userId;
                    
                default:
                    return false;
            }
        } catch (Exception $e) {
            Log::error('Error checking attendance permission', [
                'session_id' => $session->id,
                'user_id' => session('id'),
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
    
    /**
     * Helper: Format sessions into weekly schedule
     */
    private function formatSchedule($sessions)
    {
        try {
            $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            $schedule = [];
            
            foreach ($days as $day) {
                $schedule[$day] = $sessions->filter(function ($session) use ($day) {
                    return $session->day_of_week == $day;
                })->sortBy('start_time')->values();
            }
            
            return $schedule;
        } catch (Exception $e) {
            Log::error('Error formatting schedule', [
                'error' => $e->getMessage()
            ]);
            
            return collect();
        }
    }
    
    /**
     * Helper: Get this week's session count
     */
    private function getThisWeekSessions($sessions)
    {
        try {
            $startOfWeek = Carbon::now()->startOfWeek();
            $endOfWeek = Carbon::now()->endOfWeek();
            
            return $sessions->filter(function ($session) use ($startOfWeek, $endOfWeek) {
                $sessionDay = Carbon::now()->next($session->day_of_week);
                return $sessionDay->between($startOfWeek, $endOfWeek);
            })->count();
        } catch (Exception $e) {
            Log::error('Error calculating week sessions', [
                'error' => $e->getMessage()
            ]);
            return 0;
        }
    }
    
    /**
     * Helper: Clear activity-related caches
     */
    private function clearActivityCaches()
    {
        try {
            Cache::forget('activity_categories');
            
            $roles = ['admin', 'supervisor', 'teacher', 'ajk'];
            foreach ($roles as $role) {
                Cache::forget("activity_stats_{$role}_*");
            }
            
            Log::info('Activity caches cleared successfully');
        } catch (Exception $e) {
            Log::error('Error clearing activity caches', [
                'error' => $e->getMessage()
            ]);
        }
    }
}

ActivitySessionController

<?php

namespace App\Http\Controllers;

use App\Models\Activity;
use App\Models\ActivitySession;
use App\Models\SessionEnrollment;
use App\Models\Users;
use App\Models\Trainee;
use App\Models\Centres;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class ActivitySessionController extends Controller
{
    /**
     * Display sessions for an activity
     */
    public function index($activityId)
    {
        try {
            $activity = Activity::findOrFail($activityId);
            
            $sessions = ActivitySession::where('activity_id', $activityId)
                ->with(['teacher', 'activeEnrollments.trainee'])
                ->orderBy('semester', 'desc')
                ->orderBy('class_name')
                ->orderBy('day_of_week')
                ->orderBy('start_time')
                ->get();
                
            $sessionsByClass = $sessions->groupBy('class_name');
            
            return view('activities.sessions.index', compact('activity', 'sessions', 'sessionsByClass'));
            
        } catch (\Exception $e) {
            return redirect()->route('activities.index')
                ->with('error', 'Activity not found.');
        }
    }
    
    /**
     * Show form to create a new session
     */
    public function create($activityId)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to create sessions.');
        }
        
        try {
            $activity = Activity::findOrFail($activityId);
            
            // Get qualified teachers
            $teachers = Users::where('role', 'teacher')
                ->where(function ($query) use ($activity) {
                    for ($i = 1; $i <= 5; $i++) {
                        $query->orWhere("user_activity_{$i}", $activity->category);
                    }
                })
                ->get();
                
            // Get classes/centres
            $centres = Centres::all();
            
            $currentSemester = date('Y') . '-' . (date('n') <= 6 ? '1' : '2');
            
            return view('activities.sessions.create', 
                compact('activity', 'teachers', 'centres', 'currentSemester'));
                
        } catch (\Exception $e) {
            return redirect()->route('activities.index')
                ->with('error', 'Activity not found.');
        }
    }
    
    /**
     * Store a new session
     */
    public function store(Request $request, $activityId)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to create sessions.');
        }
        
        $validated = $request->validate([
            'teacher_id' => 'required|exists:users,id',
            'class_name' => 'required|string|max:50',
            'semester' => 'required|string|max:10',
            'day_of_week' => 'required|in:Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday',
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i|after:start_time',
            'location' => 'nullable|string|max:100',
            'max_trainees' => 'required|integer|min:1|max:50',
            'notes' => 'nullable|string'
        ]);
        
        try {
            // Check for conflicts
            $conflict = $this->checkScheduleConflict(
                $validated['teacher_id'],
                $validated['day_of_week'],
                $validated['start_time'],
                $validated['end_time'],
                $validated['semester']
            );
            
            if ($conflict) {
                return back()->withInput()
                    ->with('error', 'Schedule conflict: Teacher already has a session at this time.');
            }
            
            // Check weekly limit (2 sessions per activity per class)
            $existingCount = ActivitySession::where('activity_id', $activityId)
                ->where('class_name', $validated['class_name'])
                ->where('semester', $validated['semester'])
                ->count();
                
            if ($existingCount >= 2) {
                return back()->withInput()
                    ->with('error', 'Weekly limit reached: Each activity can have maximum 2 sessions per class.');
            }
            
            DB::beginTransaction();
            
            $session = ActivitySession::create([
                'activity_id' => $activityId,
                'teacher_id' => $validated['teacher_id'],
                'class_name' => $validated['class_name'],
                'semester' => $validated['semester'],
                'day_of_week' => $validated['day_of_week'],
                'start_time' => $validated['start_time'],
                'end_time' => $validated['end_time'],
                'location' => $validated['location'],
                'max_trainees' => $validated['max_trainees'],
                'notes' => $validated['notes'],
                'is_active' => true,
                'created_by' => session('id')
            ]);
            
            DB::commit();
            
            Log::info('Session created', [
                'session_id' => $session->id,
                'activity_id' => $activityId,
                'created_by' => session('name')
            ]);
            
            return redirect()->route('activities.sessions', $activityId)
                ->with('success', 'Session created successfully!');
                
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to create session', [
                'activity_id' => $activityId,
                'error' => $e->getMessage()
            ]);
            
            return back()->withInput()
                ->with('error', 'Failed to create session. Please try again.');
        }
    }
    
    /**
     * Show form to edit a session
     */
    public function edit($activityId, $sessionId)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to edit sessions.');
        }
        
        try {
            $activity = Activity::findOrFail($activityId);
            $session = ActivitySession::findOrFail($sessionId);
            
            // Verify session belongs to activity
            if ($session->activity_id != $activityId) {
                return redirect()->route('activities.sessions', $activityId)
                    ->with('error', 'Session not found.');
            }
            
            // Get qualified teachers
            $teachers = Users::where('role', 'teacher')
                ->where(function ($query) use ($activity) {
                    for ($i = 1; $i <= 5; $i++) {
                        $query->orWhere("user_activity_{$i}", $activity->category);
                    }
                })
                ->get();
                
            $centres = Centres::all();
            
            return view('activities.sessions.edit', 
                compact('activity', 'session', 'teachers', 'centres'));
                
        } catch (\Exception $e) {
            return redirect()->route('activities.sessions', $activityId)
                ->with('error', 'Session not found.');
        }
    }
    
    /**
     * Update a session
     */
    public function update(Request $request, $activityId, $sessionId)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to edit sessions.');
        }
        
        $validated = $request->validate([
            'teacher_id' => 'required|exists:users,id',
            'class_name' => 'required|string|max:50',
            'day_of_week' => 'required|in:Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday',
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i|after:start_time',
            'location' => 'nullable|string|max:100',
            'max_trainees' => 'required|integer|min:1|max:50',
            'notes' => 'nullable|string',
            'is_active' => 'boolean'
        ]);
        
        try {
            $session = ActivitySession::findOrFail($sessionId);
            
            // Check for conflicts (exclude current session)
            $conflict = $this->checkScheduleConflict(
                $validated['teacher_id'],
                $validated['day_of_week'],
                $validated['start_time'],
                $validated['end_time'],
                $session->semester,
                $sessionId
            );
            
            if ($conflict) {
                return back()->withInput()
                    ->with('error', 'Schedule conflict: Teacher already has a session at this time.');
            }
            
            $session->update([
                ...$validated,
                'updated_by' => session('id')
            ]);
            
            Log::info('Session updated', [
                'session_id' => $sessionId,
                'updated_by' => session('name')
            ]);
            
            return redirect()->route('activities.sessions', $activityId)
                ->with('success', 'Session updated successfully!');
                
        } catch (\Exception $e) {
            Log::error('Failed to update session', [
                'session_id' => $sessionId,
                'error' => $e->getMessage()
            ]);
            
            return back()->withInput()
                ->with('error', 'Failed to update session. Please try again.');
        }
    }
    
    /**
     * Delete a session
     */
    public function destroy($activityId, $sessionId)
    {
        if (!in_array(session('role'), ['admin', 'supervisor'])) {
            return redirect()->route('activities.index')
                ->with('error', 'You do not have permission to delete sessions.');
        }
        
        try {
            DB::beginTransaction();
            
            $session = ActivitySession::findOrFail($sessionId);
            
            // Check if session has attendance records
            if ($session->attendance()->exists()) {
                // Soft delete by deactivating
                $session->update([
                    'is_active' => false,
                    'updated_by' => session('id')
                ]);
                
                $message = 'Session deactivated (has attendance records).';
            } else {
                // Hard delete if no attendance
                $session->enrollments()->delete();
                $session->delete();
                
                $message = 'Session deleted successfully!';
            }
            
            DB::commit();
            
            Log::info('Session removed', [
                'session_id' => $sessionId,
                'method' => $session->exists ? 'deactivated' : 'deleted',
                'removed_by' => session('name')
            ]);
            
            return redirect()->route('activities.sessions', $activityId)
                ->with('success', $message);
                
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to remove session', [
                'session_id' => $sessionId,
                'error' => $e->getMessage()
            ]);
            
            return back()->with('error', 'Failed to remove session. Please try again.');
        }
    }
    
    /**
     * Enroll trainees in a session
     */
    public function enrollTrainees(Request $request, $sessionId)
    {
        $validated = $request->validate([
            'trainee_ids' => 'required|array',
            'trainee_ids.*' => 'exists:trainees,id'
        ]);
        
        try {
            DB::beginTransaction();
            
            $session = ActivitySession::findOrFail($sessionId);
            $enrolled = 0;
            $errors = [];
            
            foreach ($validated['trainee_ids'] as $traineeId) {
                if ($session->canEnroll($traineeId)) {
                    SessionEnrollment::create([
                        'session_id' => $sessionId,
                        'trainee_id' => $traineeId,
                        'enrollment_date' => now(),
                        'status' => 'Active',
                        'enrolled_by' => session('id')
                    ]);
                    $enrolled++;
                } else {
                    $trainee = Trainee::find($traineeId);
                    $errors[] = "{$trainee->name} cannot be enrolled (already enrolled or session full).";
                }
            }
            
            DB::commit();
            
            $message = "{$enrolled} trainees enrolled successfully!";
            if (!empty($errors)) {
                $message .= " Issues: " . implode(' ', $errors);
            }
            
            return back()->with('success', $message);
            
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to enroll trainees. Please try again.');
        }
    }
    
    /**
     * Check for schedule conflicts
     */
    private function checkScheduleConflict($teacherId, $dayOfWeek, $startTime, $endTime, $semester, $excludeId = null)
    {
        $query = ActivitySession::where('teacher_id', $teacherId)
            ->where('day_of_week', $dayOfWeek)
            ->where('semester', $semester)
            ->where('is_active', true);
            
        if ($excludeId) {
            $query->where('id', '!=', $excludeId);
        }
        
        return $query->where(function ($q) use ($startTime, $endTime) {
            $q->where(function ($subQ) use ($startTime, $endTime) {
                $subQ->where('start_time', '>=', $startTime)
                     ->where('start_time', '<', $endTime);
            })->orWhere(function ($subQ) use ($startTime, $endTime) {
                $subQ->where('end_time', '>', $startTime)
                     ->where('end_time', '<=', $endTime);
            })->orWhere(function ($subQ) use ($startTime, $endTime) {
                $subQ->where('start_time', '<=', $startTime)
                     ->where('end_time', '>=', $endTime);
            });
        })->exists();
    }
}

AdminController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use App\Models\Admins;
use App\Models\Supervisors;
use App\Models\Teachers;
use App\Models\AJKs;
use App\Models\Trainees;
use App\Models\Activities;

class AdminController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        // Only allow authenticated users
        $this->middleware('auth');
    }

    /**
     * Show the admin dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        // Log the dashboard access
        Log::info('Admin dashboard accessed', [
            'user_id' => Auth::id() ?? session('id'),
            'user_name' => Auth::user()->name ?? session('name'),
            'timestamp' => now()
        ]);
        
        // Get counts for dashboard cards
        $userCounts = $this->getUserCounts();
        
        // Pass data to the view
        return view('admin.dashboard', [
            'name' => Auth::user()->name ?? session('name'),
            'role' => 'admin',
            'userCounts' => $userCounts
        ]);
    }
    
    /**
     * Get counts of different user types for dashboard stats
     *
     * @return array
     */
    private function getUserCounts()
    {
        // Get counts from each model if they exist
        $counts = [
            'admins' => class_exists('App\Models\Admins') ? Admins::count() : 1,
            'supervisors' => class_exists('App\Models\Supervisors') ? Supervisors::count() : 5,
            'teachers' => class_exists('App\Models\Teachers') ? Teachers::count() : 12,
            'ajks' => class_exists('App\Models\AJKs') ? AJKs::count() : 3,
            'trainees' => class_exists('App\Models\Trainees') ? Trainees::count() : 50
        ];
        
        return $counts;
    }
    
    /**
     * Show the user management page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function manageUsers()
    {
        $admins = class_exists('App\Models\Admins') ? Admins::all() : collect();
        $supervisors = class_exists('App\Models\Supervisors') ? Supervisors::all() : collect();
        $teachers = class_exists('App\Models\Teachers') ? Teachers::all() : collect();
        $ajks = class_exists('App\Models\AJKs') ? AJKs::all() : collect();
        
        return view('admin.users', [
            'name' => Auth::user()->name ?? session('name'),
            'admins' => $admins,
            'supervisors' => $supervisors,
            'teachers' => $teachers,
            'ajks' => $ajks
        ]);
    }
    
    /**
     * Show the trainee management page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function manageTrainees()
    {
        // Check if Trainees model exists and get trainees
        $trainees = class_exists('App\Models\Trainees') ? Trainees::all() : collect();
        
        return view('admin.trainees', [
            'name' => Auth::user()->name ?? session('name'),
            'trainees' => $trainees
        ]);
    }
    
    /**
     * Show the reports page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function reports()
    {
        return view('admin.reports', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the analytics page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function analytics()
    {
        return view('admin.analytics', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the settings page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function settings()
    {
        return view('admin.settings', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the activity management page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function activities()
    {
        return view('admin.activities', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the activity creation page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function createActivity()
    {
        return view('admin.activities.create', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the activity categories page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function activityCategories()
    {
        return view('admin.activities.categories', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the activity schedule page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function activitySchedule()
    {
        return view('admin.activities.schedule', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the centres management page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function centres()
    {
        return view('admin.centres', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the assets management page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function assets()
    {
        return view('admin.assets', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the logs page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function logs()
    {
        return view('admin.logs', [
            'name' => Auth::user()->name ?? session('name')
        ]);
    }
    
    /**
     * Show the profile page.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function profile()
    {
        return view('admin.profile', [
            'name' => Auth::user()->name ?? session('name'),
            'user' => Auth::user() ?: null
        ]);
    }
}

AJKController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use App\Models\Events;
use App\Models\Volunteers;
use App\Models\Trainees;
use App\Models\Activities;
use App\Models\Centres;
use App\Models\Assets;
use App\Models\Users;
use App\Models\Notifications;

class AJKController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('role:ajk');
    }

    /**
     * Display the AJK dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        
        Log::info('AJK accessed dashboard', [
            'ajk_id' => $ajkId,
            'centre_id' => $centreId
        ]);
        
        // Get counts for dashboard cards
        $eventCount = Events::where('centre_id', $centreId)->count();
        $volunteerCount = Volunteers::where('centre_id', $centreId)->count();
        $upcomingEventCount = Events::where('centre_id', $centreId)
                                ->where('date', '>=', now())
                                ->count();
        
        // Get upcoming events
        $upcomingEvents = Events::where('centre_id', $centreId)
                            ->where('date', '>=', now())
                            ->orderBy('date')
                            ->take(5)
                            ->get();
        
        // Get recent volunteer applications
        $recentVolunteers = Volunteers::where('centre_id', $centreId)
                            ->orderBy('created_at', 'desc')
                            ->take(5)
                            ->get();

        // Get centre details
        $centre = Centres::find($centreId);
        
        return view('AJK.dashboard', [
            'eventCount' => $eventCount,
            'volunteerCount' => $volunteerCount,
            'upcomingEventCount' => $upcomingEventCount,
            'upcomingEvents' => $upcomingEvents,
            'recentVolunteers' => $recentVolunteers,
            'centre' => $centre
        ]);
    }
    
    /**
     * Display a listing of users.
     *
     * @return \Illuminate\View\View
     */
    public function users()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed users list', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // For AJK users, we might show a limited view of users
        // This could include volunteers or other AJKs at the same centre
        $volunteers = Volunteers::where('centre_id', $centreId)->get();
        $ajks = Users::where('role', 'ajk')
                ->where('centre_id', $centreId)
                ->where('id', '!=', $ajkId)
                ->get();
        
        return view('ajk.users', [
            'volunteers' => $volunteers,
            'ajks' => $ajks
        ]);
    }
    
    /**
     * Display a listing of trainees.
     *
     * @return \Illuminate\View\View
     */
    public function trainees()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed trainees list', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get trainees for this centre
        $trainees = Trainees::where('centre_id', $centreId)->get();
        
        return view('ajk.trainees', [
            'trainees' => $trainees
        ]);
    }
    
    /**
     * Display a listing of centers.
     *
     * @return \Illuminate\View\View
     */
    public function centres()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed centres list', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get centre information - AJKs should only see their own centre
        $centre = Centres::find($centreId);
        
        // Get event statistics for this centre
        $eventStats = $this->getCentreEventStats($centreId);
        
        return view('ajk.centres', [
            'centre' => $centre,
            'eventStats' => $eventStats
        ]);
    }
    
    /**
     * Get event statistics for a specific centre.
     *
     * @param string $centreId
     * @return array
     */
    private function getCentreEventStats($centreId)
    {
        $totalEvents = Events::where('centre_id', $centreId)->count();
        $pastEvents = Events::where('centre_id', $centreId)
                        ->where('date', '<', now())
                        ->count();
        $upcomingEvents = Events::where('centre_id', $centreId)
                            ->where('date', '>=', now())
                            ->count();
        $totalVolunteers = Volunteers::where('centre_id', $centreId)->count();
        $approvedVolunteers = Volunteers::where('centre_id', $centreId)
                                ->where('status', 'approved')
                                ->count();
        
        return [
            'totalEvents' => $totalEvents,
            'pastEvents' => $pastEvents,
            'upcomingEvents' => $upcomingEvents,
            'totalVolunteers' => $totalVolunteers,
            'approvedVolunteers' => $approvedVolunteers
        ];
    }
    
    /**
     * Display a listing of assets.
     *
     * @return \Illuminate\View\View
     */
    public function assets()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed assets list', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get assets for this centre
        $assets = Assets::where('centre_id', $centreId)->get();
        
        // Get asset categories count
        $assetsByType = Assets::where('centre_id', $centreId)
                        ->select('asset_type', DB::raw('count(*) as count'))
                        ->groupBy('asset_type')
                        ->get();
        
        return view('ajk.assets', [
            'assets' => $assets,
            'assetsByType' => $assetsByType
        ]);
    }
    
    /**
     * Display a listing of reports.
     *
     * @return \Illuminate\View\View
     */
    public function reports()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed reports', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get report data for this centre
        $eventData = $this->getEventReportData($centreId);
        $volunteerData = $this->getVolunteerReportData($centreId);
        
        return view('ajk.reports', [
            'eventData' => $eventData,
            'volunteerData' => $volunteerData
        ]);
    }
    
    /**
     * Get event report data for a specific centre.
     *
     * @param string $centreId
     * @return array
     */
    private function getEventReportData($centreId)
    {
        // Get events by month
        $eventsByMonth = Events::where('centre_id', $centreId)
                        ->selectRaw('MONTH(date) as month, YEAR(date) as year, COUNT(*) as count')
                        ->whereRaw('date >= DATE_SUB(NOW(), INTERVAL 12 MONTH)')
                        ->groupBy('year', 'month')
                        ->orderBy('year')
                        ->orderBy('month')
                        ->get();
        
        // Format data for chart
        $formattedData = [];
        foreach ($eventsByMonth as $event) {
            $monthName = date('F', mktime(0, 0, 0, $event->month, 1, $event->year));
            $formattedData[] = [
                'month' => $monthName,
                'count' => $event->count
            ];
        }
        
        return $formattedData;
    }
    
    /**
     * Get volunteer report data for a specific centre.
     *
     * @param string $centreId
     * @return array
     */
    private function getVolunteerReportData($centreId)
    {
        // Get volunteers by status
        $volunteersByStatus = Volunteers::where('centre_id', $centreId)
                            ->select('status', DB::raw('count(*) as count'))
                            ->groupBy('status')
                            ->get();
        
        // Get volunteers by month
        $volunteersByMonth = Volunteers::where('centre_id', $centreId)
                            ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, COUNT(*) as count')
                            ->whereRaw('created_at >= DATE_SUB(NOW(), INTERVAL 12 MONTH)')
                            ->groupBy('year', 'month')
                            ->orderBy('year')
                            ->orderBy('month')
                            ->get();
        
        // Format data for charts
        $statusData = [];
        foreach ($volunteersByStatus as $volunteer) {
            $statusData[] = [
                'status' => ucfirst($volunteer->status),
                'count' => $volunteer->count
            ];
        }
        
        $monthData = [];
        foreach ($volunteersByMonth as $volunteer) {
            $monthName = date('F', mktime(0, 0, 0, $volunteer->month, 1, $volunteer->year));
            $monthData[] = [
                'month' => $monthName,
                'count' => $volunteer->count
            ];
        }
        
        return [
            'statusData' => $statusData,
            'monthData' => $monthData
        ];
    }
    
    /**
     * Display settings page.
     *
     * @return \Illuminate\View\View
     */
    public function settings()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed settings', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get user settings
        $user = Users::find($ajkId);
        $centre = Centres::find($centreId);
        
        return view('ajk.settings', [
            'user' => $user,
            'centre' => $centre
        ]);
    }
    
    /**
     * Update user settings.
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateSettings(Request $request)
    {
        $ajkId = session('id');
        Log::info('AJK updating settings', ['ajk_id' => $ajkId]);
        
        // Validate request
        $validated = $request->validate([
            'name' => 'sometimes|required|string|max:255',
            'email' => 'sometimes|required|email|max:255',
            'phone' => 'sometimes|nullable|string|max:20',
            'password' => 'nullable|min:5|confirmed',
            'notification_preferences' => 'sometimes|array'
        ]);
        
        // Update user
        $user = Users::find($ajkId);
        
        if (isset($validated['name'])) {
            $user->name = $validated['name'];
        }
        
        if (isset($validated['email'])) {
            $user->email = $validated['email'];
        }
        
        if (isset($validated['phone'])) {
            $user->phone = $validated['phone'];
        }
        
        if (!empty($validated['password'])) {
            $user->password = Hash::make($validated['password']);
        }
        
        // Handle notification preferences if they exist
        if (isset($validated['notification_preferences'])) {
            $user->notification_preferences = $validated['notification_preferences'];
        }
        
        $user->save();
        
        return redirect()->route('ajk.settings')
            ->with('success', 'Settings updated successfully');
    }
    
    /**
     * Display a listing of activities.
     *
     * @return \Illuminate\View\View
     */
    public function activities()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK accessed activities list', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get activities for this centre
        $activities = Activities::where('centre_id', $centreId)
                    ->orderBy('date', 'desc')
                    ->get();
        
        // Get activity statistics
        $upcomingActivities = Activities::where('centre_id', $centreId)
                            ->where('date', '>=', now())
                            ->count();
        
        $pastActivities = Activities::where('centre_id', $centreId)
                        ->where('date', '<', now())
                        ->count();
        
        return view('ajk.activities', [
            'activities' => $activities,
            'upcomingActivities' => $upcomingActivities,
            'pastActivities' => $pastActivities
        ]);
    }
    
    /**
     * Display a list of volunteers.
     *
     * @return \Illuminate\View\View
     */
    public function manageVolunteers()
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK managing volunteers', ['ajk_id' => $ajkId, 'centre_id' => $centreId]);
        
        // Get volunteers for this centre, grouped by status
        $pendingVolunteers = Volunteers::where('centre_id', $centreId)
                            ->where('status', 'pending')
                            ->orderBy('created_at', 'desc')
                            ->get();
                            
        $approvedVolunteers = Volunteers::where('centre_id', $centreId)
                            ->where('status', 'approved')
                            ->orderBy('name')
                            ->get();
                            
        $rejectedVolunteers = Volunteers::where('centre_id', $centreId)
                            ->where('status', 'rejected')
                            ->orderBy('created_at', 'desc')
                            ->get();
        
        return view('ajk.volunteers', [
            'pendingVolunteers' => $pendingVolunteers,
            'approvedVolunteers' => $approvedVolunteers,
            'rejectedVolunteers' => $rejectedVolunteers
        ]);
    }
    
    /**
     * View specific volunteer details.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function viewVolunteer($id)
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK viewing volunteer', ['ajk_id' => $ajkId, 'volunteer_id' => $id]);
        
        // Get volunteer
        $volunteer = Volunteers::findOrFail($id);
        
        // Check if this AJK has access to this volunteer
        if ($volunteer->centre_id != $centreId) {
            return redirect()->route('ajk.volunteers')
                ->with('error', 'You do not have permission to view this volunteer');
        }
        
        // Get volunteer's participation history
        $volunteerEvents = [];
        if (method_exists($volunteer, 'events')) {
            $volunteerEvents = $volunteer->events()
                            ->orderBy('date', 'desc')
                            ->get();
        }
        
        return view('ajk.volunteer.view', [
            'volunteer' => $volunteer,
            'events' => $volunteerEvents
        ]);
    }
    
    /**
     * Show the form for editing the specified volunteer.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function editVolunteer($id)
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK editing volunteer', ['ajk_id' => $ajkId, 'volunteer_id' => $id]);
        
        // Get volunteer
        $volunteer = Volunteers::findOrFail($id);
        
        // Check if this AJK has access to this volunteer
        if ($volunteer->centre_id != $centreId) {
            return redirect()->route('ajk.volunteers')
                ->with('error', 'You do not have permission to edit this volunteer');
        }
        
        // Get centre events for assignment
        $upcomingEvents = Events::where('centre_id', $centreId)
                        ->where('date', '>=', now())
                        ->orderBy('date')
                        ->get();
        
        return view('ajk.volunteer.edit', [
            'volunteer' => $volunteer,
            'upcomingEvents' => $upcomingEvents
        ]);
    }
    
    /**
     * Update the specified volunteer.
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateVolunteer(Request $request, $id)
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK updating volunteer', ['ajk_id' => $ajkId, 'volunteer_id' => $id]);
        
        // Get volunteer
        $volunteer = Volunteers::findOrFail($id);
        
        // Check if this AJK has access to this volunteer
        if ($volunteer->centre_id != $centreId) {
            return redirect()->route('ajk.volunteers')
                ->with('error', 'You do not have permission to update this volunteer');
        }
        
        // Validate request
        $validated = $request->validate([
            'name' => 'sometimes|required|string|max:255',
            'email' => 'sometimes|required|email|max:255',
            'phone' => 'sometimes|nullable|string|max:20',
            'interest' => 'sometimes|nullable|string|max:255',
            'availability' => 'sometimes|nullable|array',
            'event_ids' => 'nullable|array',
            'event_ids.*' => 'exists:events,id',
            'notes' => 'nullable|string'
        ]);
        
        // Update volunteer
        $volunteer->update($validated);
        
        // Handle event assignments if they exist
        if (isset($validated['event_ids']) && method_exists($volunteer, 'events')) {
            $volunteer->events()->sync($validated['event_ids']);
        }
        
        return redirect()->route('ajk.volunteers')
            ->with('success', 'Volunteer updated successfully');
    }
    
    /**
     * Change the status of a volunteer.
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function changeVolunteerStatus(Request $request, $id)
    {
        $ajkId = session('id');
        $centreId = session('centre_id');
        Log::info('AJK changing volunteer status', ['ajk_id' => $ajkId, 'volunteer_id' => $id]);
        
        // Get volunteer
        $volunteer = Volunteers::findOrFail($id);
        
        // Check if this AJK has access to this volunteer
        if ($volunteer->centre_id != $centreId) {
            return redirect()->route('ajk.volunteers')
                ->with('error', 'You do not have permission to change this volunteer\'s status');
        }
        
        // Validate request
        $validated = $request->validate([
            'status' => 'required|in:pending,approved,rejected',
            'status_notes' => 'nullable|string'
        ]);
        
        // Get previous status
        $previousStatus = $volunteer->status;
        
        // Update volunteer status
        $volunteer->status = $validated['status'];
        
        if (isset($validated['status_notes'])) {
            $volunteer->status_notes = $validated['status_notes'];
        }
        
        $volunteer->status_updated_at = now();
        $volunteer->status_updated_by = $ajkId;
        $volunteer->save();
        
        // Create notification for the volunteer if status changed to approved or rejected
        if ($previousStatus != $validated['status'] && in_array($validated['status'], ['approved', 'rejected'])) {
            $this->notifyVolunteerOfStatusChange($volunteer, $validated['status']);
        }
        
        return redirect()->route('ajk.volunteers')
            ->with('success', 'Volunteer status updated successfully');
    }
    
    /**
     * Notify volunteer of status change.
     *
     * @param Volunteers $volunteer
     * @param string $status
     * @return void
     */
    private function notifyVolunteerOfStatusChange($volunteer, $status)
    {
        // This would typically send an email to the volunteer
        // For now, just log the action
        Log::info('Volunteer status notification would be sent', [
            'volunteer_id' => $volunteer->id,
            'volunteer_email' => $volunteer->email,
            'status' => $status
        ]);
        
        // In a real implementation, you might use:
        // Mail::to($volunteer->email)->send(new VolunteerStatusChanged($volunteer, $status));
    }
    
    /**
     * Display notifications for the AJK.
     *
     * @return \Illuminate\View\View
     */
    public function notifications()
    {
        $ajkId = session('id');
        Log::info('AJK accessed notifications', ['ajk_id' => $ajkId]);
        
        // Get notifications for this AJK
        $notifications = Notifications::where('user_id', $ajkId)
                        ->where('user_type', 'App\\Models\\Users')
                        ->orderBy('created_at', 'desc')
                        ->paginate(20);
        
        // Get unread count
        $unreadCount = Notifications::where('user_id', $ajkId)
                    ->where('user_type', 'App\\Models\\Users')
                    ->where('read', false)
                    ->count();
        
        return view('ajk.notifications', [
            'notifications' => $notifications,
            'unreadCount' => $unreadCount
        ]);
    }
    
    /**
     * Mark notifications as read.
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function markNotificationsRead(Request $request)
    {
        $ajkId = session('id');
        Log::info('AJK marking notifications as read', ['ajk_id' => $ajkId]);
        
        // Validate request
        $validated = $request->validate([
            'notification_ids' => 'sometimes|array',
            'notification_ids.*' => 'exists:notifications,id',
            'all' => 'sometimes|boolean'
        ]);
        
        // Mark specific notifications as read
        if (isset($validated['notification_ids'])) {
            Notifications::whereIn('id', $validated['notification_ids'])
                ->where('user_id', $ajkId)
                ->where('user_type', 'App\\Models\\Users')
                ->update([
                    'read' => true,
                    'read_at' => now()
                ]);
        }
        
        // Mark all notifications as read
        if (isset($validated['all']) && $validated['all']) {
            Notifications::where('user_id', $ajkId)
                ->where('user_type', 'App\\Models\\Users')
                ->update([
                    'read' => true,
                    'read_at' => now()
                ]);
        }
        
        return redirect()->back()->with('success', 'Notifications marked as read');
    }
}

APIController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use App\Models\Admins;
use App\Models\Supervisors;
use App\Models\Teachers;
use App\Models\AJKs;
use App\Models\Trainees;
use App\Models\Centres;
use App\Models\Activities;
use App\Models\Assets;
use App\Models\Messages;
use App\Models\Notifications;

class ApiController extends Controller
{
    /**
     * Get centres information.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCentres()
    {
        $centres = Centres::where('centre_status', true)->get();
        
        return response()->json([
            'success' => true,
            'data' => $centres
        ]);
    }
    
    /**
     * Get public activities.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getPublicActivities()
    {
        $activities = Activities::where('is_public', true)
            ->with('centre')
            ->orderBy('activity_date', 'desc')
            ->take(5)
            ->get();
            
        return response()->json([
            'success' => true,
            'data' => $activities
        ]);
    }
    
    /**
     * Get user profile.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUserProfile()
    {
        $user = null;
        $role = session('role');
        $id = session('id');
        
        if (!$role || !$id) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        switch ($role) {
            case 'admin':
                $user = Admins::find($id);
                break;
            case 'supervisor':
                $user = Supervisors::with('centre')->find($id);
                break;
            case 'teacher':
                $user = Teachers::with('centre')->find($id);
                break;
            case 'ajk':
                $user = AJKs::with('centre')->find($id);
                break;
            default:
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid user role'
                ], 400);
        }
        
        if (!$user) {
            return response()->json([
                'success' => false,
                'message' => 'User not found'
            ], 404);
        }
        
        // Prepare user data
        $userData = [
            'id' => $user->id,
            'name' => $user->name,
            'email' => $user->email,
            'role' => $role,
            'iium_id' => $user->iium_id,
            'phone' => $user->phone,
            'address' => $user->address,
            'position' => $user->position,
            'avatar' => $user->avatar ? asset('storage/avatars/' . $user->avatar) : asset('images/default-avatar.png'),
        ];
        
        // Add centre information if available
        if (isset($user->centre)) {
            $userData['centre'] = [
                'id' => $user->centre->centre_id,
                'name' => $user->centre->centre_name,
                'address' => $user->centre->address,
                'phone_number' => $user->centre->phone_number,
            ];
        }
        
        return response()->json([
            'success' => true,
            'data' => $userData
        ]);
    }
    
    /**
     * Update user profile.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function updateUserProfile(Request $request)
    {
        $user = null;
        $role = session('role');
        $id = session('id');
        
        if (!$role || !$id) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        switch ($role) {
            case 'admin':
                $user = Admins::find($id);
                break;
            case 'supervisor':
                $user = Supervisors::find($id);
                break;
            case 'teacher':
                $user = Teachers::find($id);
                break;
            case 'ajk':
                $user = AJKs::find($id);
                break;
            default:
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid user role'
                ], 400);
        }
        
        if (!$user) {
            return response()->json([
                'success' => false,
                'message' => 'User not found'
            ], 404);
        }
        
        // Validate request data
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:' . $role . 's,email,' . $id,
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string|max:255',
            'position' => 'nullable|string|max:100',
        ]);
        
        // Update user information
        $user->name = $request->name;
        $user->email = $request->email;
        $user->phone = $request->phone;
        $user->address = $request->address;
        $user->position = $request->position;
        
        $user->save();
        
        return response()->json([
            'success' => true,
            'message' => 'Profile updated successfully',
            'data' => $user
        ]);
    }
    
    /**
     * Get dashboard statistics.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getDashboardStats()
    {
        $role = session('role');
        $id = session('id');
        
        if (!$role || !$id) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        $stats = [];
        
        // Common stats for all roles
        $stats['totalCentres'] = Centres::count();
        $stats['totalTrainees'] = Trainees::count();
        
        // Role-specific stats
        switch ($role) {
            case 'admin':
                $stats['supervisorCount'] = Supervisors::count();
                $stats['teacherCount'] = Teachers::count();
                $stats['ajkCount'] = AJKs::count();
                $stats['activeCentres'] = Centres::where('centre_status', true)->count();
                $stats['totalActivities'] = Activities::count();
                $stats['totalAssets'] = Assets::count();
                
                // Monthly registration stats
                $stats['monthlyRegistrations'] = DB::table('trainees')
                    ->selectRaw('MONTH(created_at) as month, COUNT(*) as count')
                    ->whereYear('created_at', date('Y'))
                    ->groupBy('month')
                    ->orderBy('month')
                    ->get();
                
                break;
                
            case 'supervisor':
                $user = Supervisors::find($id);
                $centreId = $user->centre_id;
                
                $stats['teacherCount'] = Teachers::where('centre_id', $centreId)->count();
                $stats['traineesInCentre'] = Trainees::where('centre_id', $centreId)->count();
                $stats['activitiesInCentre'] = Activities::where('centre_id', $centreId)->count();
                $stats['assetsInCentre'] = Assets::where('centre_id', $centreId)->count();
                
                break;
                
            case 'teacher':
                $user = Teachers::find($id);
                $centreId = $user->centre_id;
                
                // Count of trainees assigned to this teacher
                $stats['assignedTrainees'] = Trainees::where('user_id', $id)->count();
                
                // Count of activities this teacher is involved in
                $stats['teacherActivities'] = Activities::where('teacher_id', $id)->count();
                
                // Recent attendance statistics
                $stats['attendanceStats'] = DB::table('attendances')
                    ->join('activities', 'attendances.activity_id', '=', 'activities.id')
                    ->where('activities.teacher_id', $id)
                    ->selectRaw('DATE(attendances.date) as date, COUNT(*) as total, SUM(CASE WHEN attendances.status = "present" THEN 1 ELSE 0 END) as present')
                    ->groupBy('date')
                    ->orderBy('date', 'desc')
                    ->limit(7)
                    ->get();
                
                break;
                
            case 'ajk':
                $user = AJKs::find($id);
                $centreId = $user->centre_id;
                
                // Events organized by this AJK
                $stats['eventsOrganized'] = DB::table('events')
                    ->where('ajk_id', $id)
                    ->count();
                
                // Volunteers managed by this AJK
                $stats['volunteersManaged'] = DB::table('volunteers')
                    ->where('ajk_id', $id)
                    ->count();
                
                break;
        }
        
        // Recent activities for all roles
        $recentActivities = Activities::orderBy('activity_date', 'desc')
            ->take(5)
            ->with('centre')
            ->get();
            
        $stats['recentActivities'] = $recentActivities;
        
        // Unread messages count
        $stats['unreadMessages'] = Messages::where('recipient_id', $id)
            ->where('recipient_type', $role)
            ->where('read', false)
            ->count();
            
        // Unread notifications count
        $stats['unreadNotifications'] = Notifications::where('user_id', $id)
            ->where('user_type', $role)
            ->where('read', false)
            ->count();
            
        return response()->json([
            'success' => true,
            'data' => $stats
        ]);
    }
    
    /**
     * Search users by name, email, or IIUM ID.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function searchUsers(Request $request)
    {
        $query = $request->input('query');
        $roleFilter = $request->input('role');
        
        if (!$query) {
            return response()->json([
                'success' => false,
                'message' => 'Search query is required'
            ], 400);
        }
        
        $results = collect();
        
        // Search in each user model
        if (!$roleFilter || $roleFilter === 'admin') {
            $admins = Admins::where('name', 'like', "%{$query}%")
                ->orWhere('email', 'like', "%{$query}%")
                ->orWhere('iium_id', 'like', "%{$query}%")
                ->get()
                ->map(function ($item) {
                    $item->role = 'admin';
                    return $item;
                });
            $results = $results->concat($admins);
        }
        
        if (!$roleFilter || $roleFilter === 'supervisor') {
            $supervisors = Supervisors::where('name', 'like', "%{$query}%")
                ->orWhere('email', 'like', "%{$query}%")
                ->orWhere('iium_id', 'like', "%{$query}%")
                ->with('centre')
                ->get()
                ->map(function ($item) {
                    $item->role = 'supervisor';
                    return $item;
                });
            $results = $results->concat($supervisors);
        }
        
        if (!$roleFilter || $roleFilter === 'teacher') {
            $teachers = Teachers::where('name', 'like', "%{$query}%")
                ->orWhere('email', 'like', "%{$query}%")
                ->orWhere('iium_id', 'like', "%{$query}%")
                ->with('centre')
                ->get()
                ->map(function ($item) {
                    $item->role = 'teacher';
                    return $item;
                });
            $results = $results->concat($teachers);
        }
        
        if (!$roleFilter || $roleFilter === 'ajk') {
            $ajks = AJKs::where('name', 'like', "%{$query}%")
                ->orWhere('email', 'like', "%{$query}%")
                ->orWhere('iium_id', 'like', "%{$query}%")
                ->with('centre')
                ->get()
                ->map(function ($item) {
                    $item->role = 'ajk';
                    return $item;
                });
            $results = $results->concat($ajks);
        }
        
        return response()->json([
            'success' => true,
            'data' => $results
        ]);
    }
    
    /**
     * Get centre data with associated users and activities.
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCentreData($id)
    {
        $centre = Centres::findOrFail($id);
        
        // Get users associated with this centre
        $supervisors = Supervisors::where('centre_id', $id)->get();
        $teachers = Teachers::where('centre_id', $id)->get();
        $ajks = AJKs::where('centre_id', $id)->get();
        
        // Get activities for this centre
        $activities = Activities::where('centre_id', $id)
            ->orderBy('activity_date', 'desc')
            ->get();
            
        // Get trainees for this centre
        $trainees = Trainees::where('centre_id', $id)->get();
        
        // Get assets for this centre
        $assets = Assets::where('centre_id', $id)->get();
        
        // Centre statistics
        $stats = [
            'supervisorCount' => $supervisors->count(),
            'teacherCount' => $teachers->count(),
            'ajkCount' => $ajks->count(),
            'traineeCount' => $trainees->count(),
            'activityCount' => $activities->count(),
            'assetCount' => $assets->count(),
        ];
        
        return response()->json([
            'success' => true,
            'data' => [
                'centre' => $centre,
                'supervisors' => $supervisors,
                'teachers' => $teachers,
                'ajks' => $ajks,
                'activities' => $activities->take(10),
                'stats' => $stats
            ]
        ]);
    }
    
    /**
     * Get user activities.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUserActivities(Request $request)
    {
        $role = session('role');
        $id = session('id');
        
        if (!$role || !$id) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        $activities = collect();
        
        switch ($role) {
            case 'admin':
                // Admins see all activities
                $activities = Activities::orderBy('activity_date', 'desc')
                    ->with(['centre', 'teacher'])
                    ->paginate(10);
                break;
                
            case 'supervisor':
                $user = Supervisors::find($id);
                // Supervisors see activities in their centre
                $activities = Activities::where('centre_id', $user->centre_id)
                    ->orderBy('activity_date', 'desc')
                    ->with(['centre', 'teacher'])
                    ->paginate(10);
                break;
                
            case 'teacher':
                // Teachers see activities they're assigned to
                $activities = Activities::where('teacher_id', $id)
                    ->orderBy('activity_date', 'desc')
                    ->with(['centre', 'teacher'])
                    ->paginate(10);
                break;
                
            case 'ajk':
                $user = AJKs::find($id);
                // AJKs see activities in their centre
                $activities = Activities::where('centre_id', $user->centre_id)
                    ->orderBy('activity_date', 'desc')
                    ->with(['centre', 'teacher'])
                    ->paginate(10);
                break;
        }
        
        return response()->json([
            'success' => true,
            'data' => $activities
        ]);
    }
    
    /**
     * Get user notifications.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUserNotifications(Request $request)
    {
        $role = session('role');
        $id = session('id');
        
        if (!$role || !$id) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        $notifications = Notifications::where('user_id', $id)
            ->where('user_type', $role)
            ->orderBy('created_at', 'desc')
            ->paginate(10);
            
        return response()->json([
            'success' => true,
            'data' => $notifications
        ]);
    }
    
    /**
     * Mark notification as read.
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function markNotificationRead($id)
    {
        $role = session('role');
        $userId = session('id');
        
        if (!$role || !$userId) {
            return response()->json([
                'success' => false,
                'message' => 'User not authenticated'
            ], 401);
        }
        
        $notification = Notifications::findOrFail($id);
        
        // Ensure the notification belongs to the user
        if ($notification->user_id != $userId || $notification->user_type != $role) {
            return response()->json([
                'success' => false,
                'message' => 'Unauthorized access to notification'
            ], 403);
        }
        
        $notification->read = true;
        $notification->save();
        
        return response()->json([
            'success' => true,
            'message' => 'Notification marked as read'
        ]);
    }
}

AttendanceController

<?php

namespace App\Http\Controllers\Activity;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use App\Models\ActivitySession;
use App\Models\ActivityAttendance;
use App\Models\SessionEnrollment;
use Carbon\Carbon;

class AttendanceController extends Controller
{
    /**
     * Show attendance marking form
     *
     * @param  int  $sessionId
     * @return \Illuminate\View\View
     */
    public function mark($sessionId)
    {
        try {
            // Get session with related data
            $session = ActivitySession::with([
                'activity',
                'teacher',
                'enrollments' => function($query) {
                    $query->where('status', 'Active')
                          ->with('trainee');
                }
            ])->findOrFail($sessionId);
            
            // Check if user has permission
            if (session('role') === 'teacher' && session('id') != $session->teacher_id) {
                $redirectRoute = session('role') . '.schedule';
                return redirect()->route($redirectRoute)
                    ->with('error', 'You are not authorized to mark attendance for this session.');
            }
            
            // Get date parameter or use today's date
            $date = request('date', Carbon::now()->format('Y-m-d'));
            $dayOfWeek = Carbon::parse($date)->format('l');
            
            // Verify the date matches the session day
            if ($dayOfWeek !== $session->day_of_week) {
                return back()->with('error', 'Selected date does not match the session day (' . $session->day_of_week . ').');
            }
            
            // Get existing attendance records
            $attendanceRecords = ActivityAttendance::where('session_id', $sessionId)
                ->where('attendance_date', $date)
                ->get()
                ->keyBy('trainee_id');
                
            Log::info('Attendance marking form accessed', [
                'session_id' => $sessionId,
                'date' => $date,
                'user_id' => session('id')
            ]);
            
            return view('activities.attendance.mark', [
                'session' => $session,
                'date' => $date,
                'attendanceRecords' => $attendanceRecords
            ]);
            
        } catch (\Exception $e) {
            Log::error('Error accessing attendance form', [
                'session_id' => $sessionId,
                'error' => $e->getMessage()
            ]);
            
            $redirectRoute = session('role') . '.schedule';
            return redirect()->route($redirectRoute)
                ->with('error', 'Session not found or an error occurred.');
        }
    }
    
    /**
     * Store attendance records
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $sessionId
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request, $sessionId)
    {
        try {
            // Get session
            $session = ActivitySession::findOrFail($sessionId);
            
            // Check if user has permission
            if (session('role') === 'teacher' && session('id') != $session->teacher_id) {
                $redirectRoute = session('role') . '.schedule';
                return redirect()->route($redirectRoute)
                    ->with('error', 'You are not authorized to mark attendance for this session.');
            }
            
            // Validate the request
            $validator = $this->validateAttendanceRequest($request);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator)
                    ->withInput();
            }
            
            DB::beginTransaction();
            
            // Get date from request
            $date = $request->attendance_date;
            
            // Process each attendance record
            foreach ($request->attendance as $traineeId => $data) {
                // Find existing record or create new one
                $attendance = ActivityAttendance::updateOrCreate(
                    [
                        'session_id' => $sessionId,
                        'trainee_id' => $traineeId,
                        'attendance_date' => $date
                    ],
                    [
                        'status' => $data['status'],
                        'remarks' => $data['remarks'] ?? null,
                        'marked_by' => session('id'),
                        'created_by' => session('id'),
                        'updated_by' => session('id')
                    ]
                );
            }
            
            DB::commit();
            
            Log::info('Attendance recorded successfully', [
                'session_id' => $sessionId,
                'date' => $date,
                'marked_by' => session('id')
            ]);
            
            return redirect()->route(session('role') . '.schedule')
                ->with('success', 'Attendance recorded successfully.');
                
        } catch (\Exception $e) {
            DB::rollBack();
            
            Log::error('Error recording attendance', [
                'session_id' => $sessionId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->withInput()
                ->with('error', 'An error occurred while recording attendance. Please try again.');
        }
    }
    
    /**
     * Show attendance report
     *
     * @param  int  $sessionId
     * @return \Illuminate\View\View
     */
    public function report($sessionId)
    {
        try {
            // Get session with related data
            $session = ActivitySession::with([
                'activity',
                'teacher',
                'enrollments' => function($query) {
                    $query->where('status', 'Active')
                          ->with('trainee');
                }
            ])->findOrFail($sessionId);
            
            // Get attendance records
            $attendanceRecords = ActivityAttendance::where('session_id', $sessionId)
                ->orderBy('attendance_date', 'desc')
                ->get()
                ->groupBy('attendance_date');
                
            // Get statistics
            $stats = $this->getAttendanceStats($sessionId);
            
            Log::info('Attendance report accessed', [
                'session_id' => $sessionId,
                'user_id' => session('id')
            ]);
            
            return view('activities.attendance.report', [
                'session' => $session,
                'attendanceRecords' => $attendanceRecords,
                'stats' => $stats
            ]);
            
        } catch (\Exception $e) {
            Log::error('Error accessing attendance report', [
                'session_id' => $sessionId,
                'error' => $e->getMessage()
            ]);
            
            $redirectRoute = session('role') . '.schedule';
            return redirect()->route($redirectRoute)
                ->with('error', 'Session not found or an error occurred.');
        }
    }
    
    // Helper methods
    
    /**
     * Validate attendance request
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Contracts\Validation\Validator
     */
    private function validateAttendanceRequest(Request $request)
    {
        $rules = [
            'attendance_date' => 'required|date|before_or_equal:' . Carbon::now()->format('Y-m-d'),
            'attendance' => 'required|array',
            'attendance.*.status' => 'required|in:Present,Absent,Late,Excused',
            'attendance.*.remarks' => 'nullable|string|max:255'
        ];
        
        return Validator::make($request->all(), $rules);
    }
    
    /**
     * Get attendance statistics
     *
     * @param  int  $sessionId
     * @return array
     */
    private function getAttendanceStats($sessionId)
    {
        // Get total number of enrollments
        $totalEnrollments = SessionEnrollment::where('session_id', $sessionId)
            ->where('status', 'Active')
            ->count();
            
        // Get total attendance records
        $totalRecords = ActivityAttendance::where('session_id', $sessionId)->count();
        
        // Get attendance by status
        $presentCount = ActivityAttendance::where('session_id', $sessionId)
            ->where('status', 'Present')
            ->count();
            
        $absentCount = ActivityAttendance::where('session_id', $sessionId)
            ->where('status', 'Absent')
            ->count();
            
        $lateCount = ActivityAttendance::where('session_id', $sessionId)
            ->where('status', 'Late')
            ->count();
            
        $excusedCount = ActivityAttendance::where('session_id', $sessionId)
            ->where('status', 'Excused')
            ->count();
            
        // Calculate attendance rate
        $attendanceRate = $totalRecords > 0 
            ? round((($presentCount + $lateCount) / $totalRecords) * 100, 2)
            : 0;
            
        return [
            'total_enrollments' => $totalEnrollments,
            'total_records' => $totalRecords,
            'present_count' => $presentCount,
            'absent_count' => $absentCount,
            'late_count' => $lateCount,
            'excused_count' => $excusedCount,
            'attendance_rate' => $attendanceRate
        ];
    }
}

CentreController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class CentreController extends Controller
{
    /**
     * Display a listing of the centres.
     */
    public function index()
    {
        // Placeholder data for centres
        $centres = $this->getPlaceholderCentres();
        
        return view('centres.index', compact('centres'));
    }
    
    /**
     * Display the specified centre.
     */
    public function show($role, $id)
    {
        // Find centre by id from placeholder data
        $centre = $this->getPlaceholderCentre($id);
        
        return view('centres.show', compact('centre'));
    }
    
    /**
     * Display assets for a specific centre.
     */
    public function assets($role, $id)
    {
        // Find centre by id from placeholder data
        $centre = $this->getPlaceholderCentre($id);
        
        // Get assets for this centre (placeholder data)
        $assets = $this->getPlaceholderCentreAssets($id);
        
        return view('centres.assets', compact('centre', 'assets'));
    }
    
    /**
     * Get placeholder data for all centres
     */
    private function getPlaceholderCentres()
    {
        return [
            [
                'id' => 1,
                'name' => 'Main Training Centre',
                'location' => 'City Centre',
                'capacity' => 120,
                'staff_count' => 12,
                'trainee_count' => 78,
                'asset_count' => 45,
                'status' => 'active'
            ],
            [
                'id' => 2,
                'name' => 'East Branch',
                'location' => 'East District',
                'capacity' => 80,
                'staff_count' => 8,
                'trainee_count' => 54,
                'asset_count' => 32,
                'status' => 'active'
            ],
            [
                'id' => 3,
                'name' => 'South Campus',
                'location' => 'South District',
                'capacity' => 70,
                'staff_count' => 6,
                'trainee_count' => 42,
                'asset_count' => 28,
                'status' => 'active'
            ],
            [
                'id' => 4,
                'name' => 'North Extension',
                'location' => 'North District',
                'capacity' => 60,
                'staff_count' => 5,
                'trainee_count' => 36,
                'asset_count' => 22,
                'status' => 'active'
            ]
        ];
    }
    
    /**
     * Get placeholder data for a specific centre
     */
    private function getPlaceholderCentre($id)
    {
        $centres = $this->getPlaceholderCentres();
        
        // Find centre with matching ID or return the first one as fallback
        foreach ($centres as $centre) {
            if ($centre['id'] == $id) {
                return $centre;
            }
        }
        
        return $centres[0];
    }
    
    /**
     * Get placeholder assets for a specific centre
     */
    private function getPlaceholderCentreAssets($centreId)
    {
        $assets = [];
        $types = ['Computer', 'Furniture', 'Equipment', 'Vehicle', 'Books'];
        $descriptions = [
            'Used for training purposes',
            'For administrative use',
            'For trainee practice sessions',
            'General use',
            'For specific workshops'
        ];
        
        // Generate different numbers of assets based on centre ID
        $count = 5 + ($centreId * 2);
        
        for ($i = 0; $i < $count; $i++) {
            $assets[] = [
                'id' => $i + 1,
                'name' => $types[array_rand($types)] . ' ' . chr(65 + $i),
                'type' => $types[array_rand($types)],
                'description' => $descriptions[array_rand($descriptions)],
                'quantity' => rand(1, 20),
                'status' => rand(0, 10) > 2 ? 'available' : 'maintenance'
            ];
        }
        
        return $assets;
    }
}

ClassController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\Classes;
use App\Models\Trainees;
use App\Models\Attendances;

class ClassController extends Controller
{
    /**
     * Display a listing of the classes.
     */
    public function index()
    {
        $teacherId = session('id');
        
        $classes = Classes::where('teacher_id', $teacherId)
                 ->orderBy('start_date', 'desc')
                 ->paginate(10);
        
        return view('teacher.classes.index', compact('classes'));
    }
    
    /**
     * Display the class schedule.
     */
    public function schedule()
    {
        $teacherId = session('id');
        
        $classes = Classes::where('teacher_id', $teacherId)
                 ->where('status', 'active')
                 ->get();
        
        // Organize classes by day of week
        $schedule = [
            'monday' => [],
            'tuesday' => [],
            'wednesday' => [],
            'thursday' => [],
            'friday' => [],
            'saturday' => [],
            'sunday' => []
        ];
        
        foreach ($classes as $class) {
            $classSchedule = json_decode($class->schedule, true) ?? [];
            
            foreach ($schedule as $day => $classes) {
                if (isset($classSchedule[$day]) && $classSchedule[$day]) {
                    $schedule[$day][] = $class;
                }
            }
        }
        
        return view('teacher.classes.schedule', compact('schedule'));
    }
    
    /**
     * Display the specified class.
     */
    public function show($id)
    {
        $teacherId = session('id');
        
        $class = Classes::where('id', $id)
               ->where('teacher_id', $teacherId)
               ->firstOrFail();
        
        $trainees = $class->trainees;
        
        $recentAttendance = Attendances::where('class_id', $id)
                          ->orderBy('date', 'desc')
                          ->limit(10)
                          ->get()
                          ->groupBy('date');
        
        return view('teacher.classes.show', compact('class', 'trainees', 'recentAttendance'));
    }
    
    /**
     * Update attendance for a class.
     */
    public function updateAttendance(Request $request, $id)
    {
        $teacherId = session('id');
        
        // Verify teacher has access to this class
        $class = Classes::where('id', $id)
                ->where('teacher_id', $teacherId)
                ->firstOrFail();
        
        // Validate request
        $validated = $request->validate([
            'date' => 'required|date',
            'attendance' => 'required|array',
            'attendance.*' => 'required|in:present,absent,excused,late'
        ]);
        
        DB::beginTransaction();
        
        try {
            // Delete existing attendance records for this date
            Attendances::where('class_id', $id)
                     ->where('date', $validated['date'])
                     ->delete();
            
            // Create new attendance records
            foreach ($validated['attendance'] as $traineeId => $status) {
                $attendance = new Attendances();
                $attendance->trainee_id = $traineeId;
                $attendance->class_id = $id;
                $attendance->date = $validated['date'];
                $attendance->status = $status;
                $attendance->marked_by = $teacherId;
                $attendance->save();
            }
            
            DB::commit();
            
            return redirect()->back()->with('success', 'Attendance updated successfully');
        } catch (\Exception $e) {
            DB::rollBack();
            
            Log::error('Error updating attendance', [
                'teacher_id' => $teacherId,
                'class_id' => $id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->back()
                   ->with('error', 'An error occurred while updating attendance')
                   ->withInput();
        }
    }
}

Controller

<?php

namespace App\Http\Controllers;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;
    use AuthorizesRequests, ValidatesRequests;
}


ContactController

<?php
namespace App\Http\Controllers;
use App\Models\ContactMessages;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
class ContactController extends Controller
{
/**
* Display the contact page
*
* @return \Illuminate\View\View
*/
public function index()
{
try {
Log::info('Contact page accessed', [
'ip' => request()->ip(),
'user_agent' => request()->userAgent()
]);
        return view('contactus');
    } catch (\Exception $e) {
        Log::error('Error loading contact page', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);
        
        return view('contactus');
    }
}

/**
 * Handle contact form submission
 *
 * @param Request $request
 * @return \Illuminate\Http\RedirectResponse
 */
public function submit(Request $request)
{
    try {
        Log::info('Contact form submission started', [
            'ip' => $request->ip(),
            'user_agent' => $request->userAgent(),
            'reason' => $request->reason
        ]);

        // Enhanced validation with detailed error messages
        $validator = Validator::make($request->all(), [
            'name' => [
                'required',
                'string',
                'min:2',
                'max:255',
                'regex:/^[a-zA-Z\s\-\.\']+$/'
            ],
            'email' => [
                'required',
                'email:rfc,dns',
                'max:255'
            ],
            'phone' => [
                'nullable',
                'string',
                'min:8',
                'max:20',
                'regex:/^[\+]?[0-9\s\-\(\)]{8,}$/'
            ],
            'reason' => [
                'required',
                'in:services,support,volunteer,partnership,general,other,admission,complaint,feedback'
            ],
            'message' => [
                'required',
                'string',
                'min:10',
                'max:2000'
            ],
            'subject' => [
                'nullable',
                'string',
                'max:255'
            ],
            'organization' => [
                'nullable',
                'string',
                'max:255'
            ],
            'preferred_contact_method' => [
                'nullable',
                'in:email,phone,both'
            ],
            'urgency' => [
                'nullable',
                'in:low,medium,high,urgent'
            ]
        ], [
            'name.required' => 'Your full name is required.',
            'name.min' => 'Name must be at least 2 characters long.',
            'name.regex' => 'Name can only contain letters, spaces, hyphens, dots, and apostrophes.',
            'email.required' => 'Email address is required.',
            'email.email' => 'Please provide a valid email address.',
            'phone.min' => 'Phone number must be at least 8 digits.',
            'phone.regex' => 'Please provide a valid phone number.',
            'reason.required' => 'Please select a reason for contacting us.',
            'reason.in' => 'Please select a valid reason for contact.',
            'message.required' => 'Please provide your message.',
            'message.min' => 'Message must be at least 10 characters long.',
            'message.max' => 'Message cannot exceed 2000 characters.',
            'subject.max' => 'Subject cannot exceed 255 characters.',
            'organization.max' => 'Organization name cannot exceed 255 characters.'
        ]);

        if ($validator->fails()) {
            Log::warning('Contact form validation failed', [
                'email' => $request->email,
                'reason' => $request->reason,
                'errors' => $validator->errors()->toArray()
            ]);
            
            return redirect()->back()
                ->withErrors($validator)
                ->withInput()
                ->with('error', 'Please correct the highlighted errors and try again.');
        }

        $validatedData = $validator->validated();

        // Prepare enhanced data for database storage
        $contactData = [
            'name' => $this->formatName($validatedData['name']),
            'email' => strtolower(trim($validatedData['email'])),
            'phone' => $this->formatPhone($validatedData['phone'] ?? null),
            'reason' => $validatedData['reason'],
            'message' => trim($validatedData['message']),
            'subject' => $validatedData['subject'] ?? $this->generateSubject($validatedData['reason']),
            'organization' => $validatedData['organization'] ?? null,
            'preferred_contact_method' => $validatedData['preferred_contact_method'] ?? 'email',
            'urgency' => $validatedData['urgency'] ?? 'medium',
            'status' => 'new',
            'ip_address' => $request->ip(),
            'user_agent' => $request->userAgent(),
            'referrer' => $request->header('referer'),
            'submitted_at' => now(),
        ];

        // Save to database with enhanced error handling
        $contact = ContactMessages::create($contactData);

        Log::info('Contact message saved to database', [
            'contact_id' => $contact->id,
            'email' => $contact->email,
            'reason' => $contact->reason,
            'urgency' => $contact->urgency
        ]);

        // Send notification emails
        $this->sendNotificationEmails($contact, $validatedData);

        // Log successful submission
        Log::info('Contact form submission completed successfully', [
            'contact_id' => $contact->id,
            'email' => $contact->email,
            'reason' => $contact->reason
        ]);

        // Redirect with success message based on urgency
        $successMessage = $this->getSuccessMessage($contact->urgency, $contact->reason);
        
        return redirect()->back()->with('success', $successMessage);

    } catch (\Exception $e) {
        Log::error('Error processing contact form submission', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString(),
            'request_data' => $request->except(['_token'])
        ]);

        return redirect()->back()
            ->with('error', 'We encountered an issue processing your message. Please try again, or contact us directly at pdcare@iium.edu.my.')
            ->withInput();
    }
}

/**
 * Send notification emails for contact submission
 *
 * @param ContactMessages $contact
 * @param array $validatedData
 * @return void
 */
private function sendNotificationEmails($contact, $validatedData)
{
    try {
        // Send confirmation email to user
        Mail::send('emails.contact-confirmation', [
            'contact' => $contact,
            'data' => $validatedData
        ], function ($message) use ($contact) {
            $message->to($contact->email, $contact->name)
                    ->from(config('mail.from.address'), config('mail.from.name'))
                    ->subject('Message Received - IIUM PD-CARE')
                    ->replyTo(config('mail.from.address'));
        });

        Log::info('Confirmation email sent to user', [
            'contact_id' => $contact->id,
            'email' => $contact->email
        ]);

        // Send notification email to admin with urgency handling
        $adminEmail = config('mail.admin_email', 'asbourne1998@gmail.com');
        $subject = $this->getAdminEmailSubject($contact);
        
        Mail::send('emails.contact-admin-notification', [
            'contact' => $contact,
            'data' => $validatedData
        ], function ($message) use ($adminEmail, $subject, $contact) {
            $message->to($adminEmail)
                    ->from(config('mail.from.address'), config('mail.from.name'))
                    ->subject($subject)
                    ->replyTo($contact->email, $contact->name);
                    
            // Set priority for urgent messages
            if ($contact->urgency === 'urgent') {
                $message->priority(1);
            }
        });

        Log::info('Admin notification email sent', [
            'contact_id' => $contact->id,
            'admin_email' => $adminEmail,
            'urgency' => $contact->urgency
        ]);

    } catch (\Exception $e) {
        Log::error('Failed to send contact form emails', [
            'contact_id' => $contact->id,
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);
        // Don't throw exception - message was saved successfully
    }
}

/**
 * Format name with proper capitalization
 *
 * @param string $name
 * @return string
 */
private function formatName($name)
{
    return ucwords(strtolower(trim($name)));
}

/**
 * Format phone number
 *
 * @param string|null $phone
 * @return string|null
 */
private function formatPhone($phone)
{
    if (!$phone) return null;
    
    // Remove all non-numeric characters except +
    $phone = preg_replace('/[^\d+]/', '', $phone);
    
    // Add country code if not present
    if (!str_starts_with($phone, '+') && !str_starts_with($phone, '60')) {
        $phone = '+60' . ltrim($phone, '0');
    }
    
    return $phone;
}

/**
 * Generate subject based on reason
 *
 * @param string $reason
 * @return string
 */
private function generateSubject($reason)
{
    $subjects = [
        'services' => 'Inquiry About Rehabilitation Services',
        'support' => 'Support and Assistance Request',
        'volunteer' => 'Volunteer Opportunity Inquiry',
        'partnership' => 'Partnership Opportunity',
        'general' => 'General Inquiry',
        'admission' => 'Admission Inquiry',
        'complaint' => 'Complaint Submission',
        'feedback' => 'Feedback Submission',
        'other' => 'Contact Form Submission'
    ];

    return $subjects[$reason] ?? 'Contact Form Submission';
}

/**
 * Get success message based on urgency and reason
 *
 * @param string $urgency
 * @param string $reason
 * @return string
 */
private function getSuccessMessage($urgency, $reason)
{
    if ($urgency === 'urgent') {
        return 'Your urgent message has been received and flagged for immediate attention. We will respond within 24 hours.';
    }

    $messages = [
        'services' => 'Thank you for your interest in our rehabilitation services. We will contact you within 2-3 business days to discuss your needs.',
        'volunteer' => 'Thank you for your interest in volunteering! We will review your inquiry and contact you within a week.',
        'partnership' => 'Thank you for your partnership interest. Our team will review your proposal and respond within 5 business days.',
        'complaint' => 'Your complaint has been logged and will be reviewed by our management team. We will respond within 48 hours.',
        'admission' => 'Thank you for your admission inquiry. Our admissions team will contact you within 2-3 business days.',
        'feedback' => 'Thank you for your valuable feedback. We appreciate you taking the time to share your thoughts with us.'
    ];

    return $messages[$reason] ?? 'Thank you for contacting IIUM PD-CARE. We have received your message and will respond within 3-5 business days.';
}

/**
 * Get admin email subject with urgency and type
 *
 * @param ContactMessages $contact
 * @return string
 */
private function getAdminEmailSubject($contact)
{
    $prefix = $contact->urgency === 'urgent' ? '🚨 URGENT - ' : '';
    $typeMap = [
        'services' => 'Service Inquiry',
        'support' => 'Support Request',
        'volunteer' => 'Volunteer Inquiry',
        'partnership' => 'Partnership Request',
        'complaint' => 'Complaint',
        'admission' => 'Admission Inquiry',
        'feedback' => 'Feedback',
        'general' => 'General Inquiry',
        'other' => 'Contact Form'
    ];

    $type = $typeMap[$contact->reason] ?? 'Contact Form';
    
    return $prefix . 'New ' . $type . ' - ' . $contact->name;
}

/**
 * Get contact messages for admin (future use)
 *
 * @return \Illuminate\Http\JsonResponse
 */
public function getMessages()
{
    try {
        $messages = ContactMessages::with('assignedUser')
            ->orderBy('created_at', 'desc')
            ->paginate(15);

        return response()->json([
            'success' => true,
            'data' => $messages
        ]);

    } catch (\Exception $e) {
        Log::error('Error fetching contact messages', [
            'error' => $e->getMessage()
        ]);

        return response()->json([
            'success' => false,
            'message' => 'Error fetching messages'
        ], 500);
    }
}

/**
 * Update message status (future use)
 *
 * @param Request $request
 * @param int $id
 * @return \Illuminate\Http\JsonResponse
 */
public function updateStatus(Request $request, $id)
{
    try {
        $message = ContactMessages::findOrFail($id);
        
        $validator = Validator::make($request->all(), [
            'status' => 'required|in:new,read,in_progress,resolved,closed',
            'notes' => 'nullable|string|max:1000',
            'assigned_to' => 'nullable|exists:users,id'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ], 422);
        }

        $message->status = $request->status;
        if ($request->notes) {
            $message->admin_notes = $request->notes;
        }
        if ($request->assigned_to) {
            $message->assigned_to = $request->assigned_to;
        }
        $message->save();

        Log::info('Contact message status updated', [
            'message_id' => $id,
            'new_status' => $request->status,
            'updated_by' => session('id')
        ]);

        return response()->json([
            'success' => true,
            'message' => 'Message status updated successfully'
        ]);

    } catch (\Exception $e) {
        Log::error('Error updating contact message status', [
            'message_id' => $id,
            'error' => $e->getMessage()
        ]);

        return response()->json([
            'success' => false,
            'message' => 'Error updating message status'
        ], 500);
    }
}
}

CourseController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class CourseController extends Controller
{
    /**
     * Display a listing of courses.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if (!in_array($role, ['admin', 'supervisor', 'teacher'])) {
            Log::warning('Unauthorized access attempt to courses index', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy courses data
        $courses = [
            [
                'id' => 1,
                'name' => 'Communication Development',
                'code' => 'COM101',
                'description' => 'Develop verbal and non-verbal communication skills for trainees with special needs.',
                'class_count' => 3,
                'trainee_count' => 35
            ],
            [
                'id' => 2,
                'name' => 'Physical Development',
                'code' => 'PHY101',
                'description' => 'Develop fine and gross motor skills for trainees with physical challenges.',
                'class_count' => 2,
                'trainee_count' => 28
            ],
            [
                'id' => 3,
                'name' => 'Cognitive Skills',
                'code' => 'COG101',
                'description' => 'Develop problem-solving, memory, and attention skills.',
                'class_count' => 2,
                'trainee_count' => 24
            ],
            [
                'id' => 4,
                'name' => 'Social Skills',
                'code' => 'SOC101',
                'description' => 'Develop appropriate social interaction and relationship-building skills.',
                'class_count' => 2,
                'trainee_count' => 30
            ]
        ];
        
        return view('courses.index', [
            'courses' => $courses
        ]);
    }
    
    /**
     * Display the specified course.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if (!in_array($role, ['admin', 'supervisor', 'teacher'])) {
            Log::warning('Unauthorized access attempt to course details', [
                'user_id' => $userId,
                'role' => $role,
                'course_id' => $id
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy course data
        $course = [
            'id' => $id,
            'name' => 'Communication Development',
            'code' => 'COM101',
            'description' => 'This course focuses on developing verbal and non-verbal communication skills for trainees with special needs. It covers basic language development, alternative communication methods, and social communication skills.',
            'objectives' => [
                'Develop basic verbal communication skills',
                'Learn alternative communication methods',
                'Enhance listening and comprehension skills',
                'Improve social communication abilities'
            ],
            'prerequisites' => 'None',
            'duration' => '12 weeks',
            'classes' => [
                [
                    'id' => 1,
                    'name' => 'Basic Communication Skills',
                    'teacher' => 'Dr. Nurul Hafizah',
                    'schedule' => 'Monday, Wednesday, Friday - 9:00 AM to 10:30 AM',
                    'trainee_count' => 15
                ],
                [
                    'id' => 4,
                    'name' => 'Advanced Communication',
                    'teacher' => 'Mr. Ismail Rahman',
                    'schedule' => 'Tuesday, Thursday - 2:00 PM to 3:30 PM',
                    'trainee_count' => 10
                ],
                [
                    'id' => 7,
                    'name' => 'Social Communication',
                    'teacher' => 'Ms. Sarah Tan',
                    'schedule' => 'Monday, Wednesday - 11:00 AM to 12:30 PM',
                    'trainee_count' => 10
                ]
            ]
        ];
        
        return view('courses.show', [
            'course' => $course
        ]);
    }
    
    /**
     * Show the form for creating a new course.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if (!in_array($role, ['admin', 'supervisor'])) {
            Log::warning('Unauthorized access attempt to create course', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        return view('courses.create');
    }
    
    /**
     * Store a newly created course in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if (!in_array($role, ['admin', 'supervisor'])) {
            Log::warning('Unauthorized access attempt to store course', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to perform this action');
        }
        
        // Validate input
        $request->validate([
            'name' => 'required|string|max:255',
            'code' => 'required|string|max:10',
            'description' => 'required|string',
            'objectives' => 'required|string',
            'prerequisites' => 'nullable|string|max:255',
            'duration' => 'required|string|max:100'
        ]);
        
        // In a real implementation, save the course to database
        
        Log::info('Course created', [
            'user_id' => $userId,
            'course_name' => $request->name,
            'course_code' => $request->code
        ]);
        
        return redirect()->route('courses.index')
            ->with('success', 'Course created successfully');
    }
    
    // Other methods (edit, update, destroy) would follow a similar pattern
}

CourseRegistrationController

<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Courses;
use App\Models\Users;
use App\Models\Trainees;
use App\Models\Centres;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\DB;

class CourseRegistrationController extends Controller
{
    /**
     * Available course types
     * 
     * @var array
     */
    protected $courseTypes = [
        'Occupational Therapy',
        'Reading',
        'Speech Therapy',
        'Quranic Class',
        'Independent Living'
    ];

    /**
     * Eligible trainee conditions
     * 
     * @var array
     */
    protected $eligibleConditions = [
        'Cerebral Palsy',
        'Autism Spectrum Disorder (ASD)',
        'Down Syndrome',
        'Hearing Impairment',
        'Visual Impairment',
        'Intellectual Disabilities'
    ];

    /**
     * Display the course registration form
     * 
     * @return \Illuminate\View\View
     */
    public function showRegistrationForm()
    {
        try {
            // Get all courses
            $courses = Courses::with(['teacher', 'participant', 'location'])->get();

            // Get eligible teachers based on activity
            $teachers = Users::where(function($query) {
                $query->whereIn('user_activity_1', $this->courseTypes)
                      ->orWhereIn('user_activity_2', $this->courseTypes);
            })->get();
            
            // Format teacher data for dropdown
            $teachersList = $teachers->mapWithKeys(function($teacher) {
                $name = $teacher->users_name ?? $teacher->user_first_name . ' ' . $teacher->user_last_name;
                return [$teacher->id => $name];
            });

            // Get eligible trainees
            $trainees = Trainees::whereIn('trainee_condition', $this->eligibleConditions)->get();
            
            // Format trainee data for dropdown
            $traineesList = $trainees->mapWithKeys(function($trainee) {
                $name = $trainee->trainee_name ?? $trainee->trainee_first_name . ' ' . $trainee->trainee_last_name;
                return [$trainee->id => $name];
            });

            // Get unique teacher activities
            $teachersActivities = $teachers->pluck('user_activity_1')
                ->merge($teachers->pluck('user_activity_2'))
                ->filter()
                ->unique()
                ->values();

            // Get unique trainee conditions
            $traineeConditions = $trainees->pluck('trainee_condition')
                ->filter()
                ->unique()
                ->values();

            // Get centres
            $centres = Centres::pluck('centre_name', 'centre_id');

            return view('courseregistration', [
                'courses' => $courses,
                'teachers' => $teachersList,
                'trainees' => $traineesList,
                'teachersActivities' => $teachersActivities,
                'traineeConditions' => $traineeConditions,
                'centres' => $centres,
                'courseTypes' => $this->courseTypes,
                'weekdays' => ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
            ]);
        } catch (\Exception $e) {
            Log::error('Error loading course registration form', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', 'Unable to load registration form. Please try again later.');
        }
    }

    /**
     * Process the course registration form submission
     * 
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function submitRegistrationForm(Request $request)
    {
        try {
            $validatedData = $request->validate([
                'course_id' => 'required|string',
                'course_type' => ['required', Rule::in($this->courseTypes)],
                'teacher_id' => 'required|exists:users,id',
                'participant_id' => 'required|exists:trainees,id',
                'course_day' => 'required|string',
                'start_time' => 'required|date_format:H:i',
                'end_time' => [
                    'required',
                    'date_format:H:i',
                    function ($attribute, $value, $fail) use ($request) {
                        if ($request->start_time >= $value) {
                            $fail('The end time must be after the start time.');
                        }
                    },
                ],
                'location_id' => 'nullable|exists:centres,centre_id',
            ]);

            // Check if the teacher is eligible to teach the selected course type
            $teacher = Users::findOrFail($validatedData['teacher_id']);
            if ($teacher->user_activity_1 !== $validatedData['course_type'] && $teacher->user_activity_2 !== $validatedData['course_type']) {
                return redirect()->back()->withInput()->with('error', 'Selected teacher is not eligible to teach this course type.');
            }

            // Check if the participant is eligible for the course based on their condition
            $participant = Trainees::findOrFail($validatedData['participant_id']);
            if (!in_array($participant->trainee_condition, $this->eligibleConditions)) {
                return redirect()->back()->withInput()->with('error', 'Selected participant is not eligible for this course.');
            }

            // Check for scheduling conflicts
            $conflicts = $this->checkSchedulingConflicts(
                $validatedData['participant_id'],
                $validatedData['teacher_id'],
                $validatedData['course_day'],
                $validatedData['start_time'],
                $validatedData['end_time']
            );

            if ($conflicts) {
                return redirect()->back()->withInput()->with('error', $conflicts);
            }

            // Begin transaction
            DB::beginTransaction();
            
            // Create the course
            $course = Courses::create($validatedData);

            // Commit transaction
            DB::commit();

            Log::info('Course registration successful', [
                'course_id' => $course->course_id,
                'teacher' => $teacher->users_name ?? $teacher->user_first_name . ' ' . $teacher->user_last_name,
                'participant' => $participant->trainee_name ?? $participant->trainee_first_name . ' ' . $participant->trainee_last_name
            ]);

            return redirect()->route('registration.success')->with('success', 'Course registration successful.');
        } catch (\Exception $e) {
            // Rollback transaction if active
            if (DB::transactionLevel() > 0) {
                DB::rollBack();
            }
            
            Log::error('Error occurred during course registration', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'input' => $request->except(['_token'])
            ]);

            return redirect()->back()->withInput()->with('error', 'An error occurred during course registration: ' . $e->getMessage());
        }
    }

    /**
     * Check for scheduling conflicts
     * 
     * @param int $participantId
     * @param int $teacherId
     * @param string $courseDay
     * @param string $startTime
     * @param string $endTime
     * @return string|null Error message or null if no conflicts
     */
    protected function checkSchedulingConflicts($participantId, $teacherId, $courseDay, $startTime, $endTime)
    {
        // Check if the course day is available for the participant and teacher
        $participantDayCount = Courses::where('participant_id', $participantId)
            ->where('course_day', $courseDay)
            ->count();
            
        $teacherDayCount = Courses::where('teacher_id', $teacherId)
            ->where('course_day', $courseDay)
            ->count();
            
        if ($participantDayCount >= 3) {
            return 'Participant has reached the maximum number of activities for the selected day.';
        }
        
        if ($teacherDayCount >= 3) {
            return 'Teacher has reached the maximum number of activities for the selected day.';
        }

        // Check for time overlaps for the participant
        $participantOverlap = Courses::where('participant_id', $participantId)
            ->where('course_day', $courseDay)
            ->where(function($query) use ($startTime, $endTime) {
                $query->whereBetween('start_time', [$startTime, $endTime])
                    ->orWhereBetween('end_time', [$startTime, $endTime])
                    ->orWhere(function($q) use ($startTime, $endTime) {
                        $q->where('start_time', '<=', $startTime)
                          ->where('end_time', '>=', $endTime);
                    });
            })
            ->count();
            
        if ($participantOverlap > 0) {
            return 'Participant already has an activity that overlaps with the selected time.';
        }
        
        // Check for time overlaps for the teacher
        $teacherOverlap = Courses::where('teacher_id', $teacherId)
            ->where('course_day', $courseDay)
            ->where(function($query) use ($startTime, $endTime) {
                $query->whereBetween('start_time', [$startTime, $endTime])
                    ->orWhereBetween('end_time', [$startTime, $endTime])
                    ->orWhere(function($q) use ($startTime, $endTime) {
                        $q->where('start_time', '<=', $startTime)
                          ->where('end_time', '>=', $endTime);
                    });
            })
            ->count();
            
        if ($teacherOverlap > 0) {
            return 'Teacher already has an activity that overlaps with the selected time.';
        }
        
        return null;
    }
}

DashboardController

<?php

namespace App\Http\Controllers;

use App\Models\Users;
use App\Models\Trainee;
use App\Models\Activity;
use App\Models\ActivitySession;
use App\Models\SessionEnrollment;
use App\Models\Centres;
use App\Models\Asset;
use App\Models\Event;
use App\Models\ContactMessages;
use App\Models\Volunteers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;
use Exception;

class DashboardController extends Controller
{
    /**
     * Display the dashboard based on user role
     */
    public function index()
    {
        try {
            // Validate session
            if (!session('id') || !session('role')) {
                Log::warning('Invalid session in dashboard access');
                return redirect()->route('auth.login')
                    ->with('error', 'Please log in to access the dashboard.');
            }

            $role = session('role');
            $userId = session('id');
            
            Log::info('Dashboard accessed', [
                'user_id' => $userId,
                'role' => $role,
                'ip' => request()->ip()
            ]);

            // Get user information
            $user = $this->getUserInfo($userId);
            
            // Get role-specific data
            $dashboardData = $this->getDashboardDataByRole($role, $userId);
            
            // Get common data
            $commonData = $this->getCommonDashboardData($userId, $role);
            
            // Merge all data
            $data = array_merge($dashboardData, $commonData, ['user' => $user]);
            
            return view('dashboard', $data);
            
        } catch (Exception $e) {
            Log::error('Dashboard loading error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            // Return dashboard with minimal data
            return view('dashboard', [
                'user' => ['name' => session('name'), 'role' => session('role')],
                'stats' => $this->getDefaultStats(),
                'recentActivities' => collect(),
                'notifications' => collect(),
                'error' => 'Some dashboard components could not be loaded. Our team has been notified.'
            ]);
        }
    }
    
    /**
     * Get user information with error handling
     */
    private function getUserInfo($userId)
    {
        try {
            $user = Users::find($userId);
            
            if (!$user) {
                Log::error('User not found in dashboard', ['user_id' => $userId]);
                return [
                    'name' => session('name') ?? 'User',
                    'email' => session('email') ?? '',
                    'role' => session('role') ?? 'guest',
                    'avatar' => null,
                    'centre' => null
                ];
            }
            
            return [
                'id' => $user->id,
                'name' => $user->name,
                'email' => $user->email,
                'role' => $user->role,
                'avatar' => $user->avatar,
                'centre' => $user->centre ? [
                    'id' => $user->centre->id,
                    'name' => $user->centre->name
                ] : null,
                'last_login' => $user->last_login_at ? Carbon::parse($user->last_login_at)->diffForHumans() : 'Never'
            ];
            
        } catch (Exception $e) {
            Log::error('Error fetching user info', [
                'user_id' => $userId,
                'error' => $e->getMessage()
            ]);
            
            return [
                'name' => session('name') ?? 'User',
                'email' => session('email') ?? '',
                'role' => session('role') ?? 'guest',
                'avatar' => null,
                'centre' => null
            ];
        }
    }
    
    /**
     * Get dashboard data based on user role
     */
    private function getDashboardDataByRole($role, $userId)
    {
        $data = [
            'stats' => $this->getDefaultStats(),
            'charts' => [],
            'quickActions' => []
        ];
        
        try {
            switch ($role) {
                case 'admin':
                    $data = $this->getAdminDashboard($userId);
                    break;
                    
                case 'supervisor':
                    $data = $this->getSupervisorDashboard($userId);
                    break;
                    
                case 'teacher':
                    $data = $this->getTeacherDashboard($userId);
                    break;
                    
                case 'ajk':
                    $data = $this->getAJKDashboard($userId);
                    break;
                    
                default:
                    Log::warning('Unknown role in dashboard', ['role' => $role]);
            }
        } catch (Exception $e) {
            Log::error('Error getting role-specific dashboard data', [
                'role' => $role,
                'error' => $e->getMessage()
            ]);
        }
        
        return $data;
    }
    
    /**
     * Get admin dashboard data
     */
    private function getAdminDashboard($userId)
    {
        return Cache::remember("dashboard_admin_{$userId}", 300, function () {
            $stats = [
                'total_users' => $this->safeCount(Users::class),
                'total_trainees' => $this->safeCount(Trainee::class),
                'total_activities' => $this->safeCount(Activity::class, ['is_active' => true]),
                'total_centres' => $this->safeCount(Centres::class),
                'new_users_this_month' => $this->safeCount(Users::class, [], 'created_at', 30),
                'new_trainees_this_month' => $this->safeCount(Trainee::class, [], 'created_at', 30),
                'active_sessions' => $this->safeCount(ActivitySession::class, ['is_active' => true]),
                'pending_contacts' => $this->safeCount(ContactMessages::class, ['status' => 'pending']),
                'pending_volunteers' => $this->safeCount(Volunteers::class, ['status' => 'pending'])
            ];
            
            $charts = [
                'userGrowth' => $this->getUserGrowthChart(),
                'activityDistribution' => $this->getActivityDistributionChart(),
                'centrePerformance' => $this->getCentrePerformanceChart(),
                'disabilityTypes' => $this->getDisabilityTypesChart()
            ];
            
            $quickActions = [
                ['icon' => 'fa-user-plus', 'title' => 'Add User', 'route' => 'admin.users.create', 'color' => 'primary'],
                ['icon' => 'fa-child', 'title' => 'Add Trainee', 'route' => 'trainees.create', 'color' => 'success'],
                ['icon' => 'fa-calendar-plus', 'title' => 'Create Activity', 'route' => 'activities.create', 'color' => 'info'],
                ['icon' => 'fa-building', 'title' => 'Manage Centres', 'route' => 'centres.index', 'color' => 'warning'],
                ['icon' => 'fa-chart-bar', 'title' => 'View Reports', 'route' => 'reports.index', 'color' => 'danger'],
                ['icon' => 'fa-cog', 'title' => 'Settings', 'route' => 'settings.index', 'color' => 'secondary']
            ];
            
            return compact('stats', 'charts', 'quickActions');
        });
    }
    
    /**
     * Get supervisor dashboard data
     */
    private function getSupervisorDashboard($userId)
    {
        return Cache::remember("dashboard_supervisor_{$userId}", 300, function () use ($userId) {
            $user = Users::find($userId);
            $centreId = $user->centre_id ?? null;
            
            $stats = [
                'centre_staff' => $centreId ? $this->safeCount(Users::class, ['centre_id' => $centreId]) : 0,
                'centre_trainees' => $centreId ? $this->safeCount(Trainee::class, ['centre_id' => $centreId]) : 0,
                'active_activities' => $this->safeCount(Activity::class, ['is_active' => true]),
                'total_sessions' => $centreId ? $this->getCentreSessions($centreId) : 0,
                'assets_count' => $centreId ? $this->safeCount(Asset::class, ['centre_id' => $centreId]) : 0,
                'upcoming_events' => $this->getUpcomingEventsCount()
            ];
            
            $charts = [
                'activityProgress' => $this->getActivityProgressChart($centreId),
                'attendanceRate' => $this->getAttendanceRateChart($centreId),
                'staffPerformance' => $this->getStaffPerformanceChart($centreId)
            ];
            
            $quickActions = [
                ['icon' => 'fa-users', 'title' => 'View Staff', 'route' => 'staff.index', 'color' => 'primary'],
                ['icon' => 'fa-child', 'title' => 'View Trainees', 'route' => 'trainees.index', 'color' => 'success'],
                ['icon' => 'fa-calendar-alt', 'title' => 'Manage Activities', 'route' => 'activities.index', 'color' => 'info'],
                ['icon' => 'fa-clipboard-list', 'title' => 'View Reports', 'route' => 'reports.index', 'color' => 'warning']
            ];
            
            return compact('stats', 'charts', 'quickActions');
        });
    }
    
    /**
     * Get teacher dashboard data
     */
    private function getTeacherDashboard($userId)
    {
        return Cache::remember("dashboard_teacher_{$userId}", 300, function () use ($userId) {
            $stats = [
                'my_sessions' => $this->safeCount(ActivitySession::class, [
                    'teacher_id' => $userId,
                    'is_active' => true
                ]),
                'total_students' => $this->getTeacherStudentCount($userId),
                'today_sessions' => $this->getTodaySessionsCount($userId),
                'this_week_sessions' => $this->getWeekSessionsCount($userId),
                'attendance_rate' => $this->getTeacherAttendanceRate($userId),
                'activities_taught' => $this->getTeacherActivitiesCount($userId)
            ];
            
            $charts = [
                'weeklySchedule' => $this->getWeeklyScheduleChart($userId),
                'attendanceTrend' => $this->getAttendanceTrendChart($userId)
            ];
            
            $quickActions = [
                ['icon' => 'fa-calendar', 'title' => 'My Schedule', 'route' => 'teacher.schedule', 'color' => 'primary'],
                ['icon' => 'fa-check-square', 'title' => 'Mark Attendance', 'route' => 'activities.index', 'color' => 'success'],
                ['icon' => 'fa-users', 'title' => 'My Students', 'route' => 'teacher.trainees', 'color' => 'info']
            ];
            
            return compact('stats', 'charts', 'quickActions');
        });
    }
    
    /**
     * Get AJK dashboard data
     */
    private function getAJKDashboard($userId)
    {
        return Cache::remember("dashboard_ajk_{$userId}", 300, function () {
            $stats = [
                'total_events' => $this->safeCount(Event::class),
                'upcoming_events' => $this->getUpcomingEventsCount(),
                'total_volunteers' => $this->safeCount(Volunteers::class, ['status' => 'approved']),
                'pending_volunteers' => $this->safeCount(Volunteers::class, ['status' => 'pending']),
                'events_this_month' => $this->getEventsThisMonthCount(),
                'volunteer_hours' => $this->getTotalVolunteerHours()
            ];
            
            $charts = [
                'eventCalendar' => $this->getEventCalendarData(),
                'volunteerStats' => $this->getVolunteerStatsChart()
            ];
            
            $quickActions = [
                ['icon' => 'fa-calendar-plus', 'title' => 'Create Event', 'route' => 'events.create', 'color' => 'primary'],
                ['icon' => 'fa-hand-holding-heart', 'title' => 'Manage Volunteers', 'route' => 'ajk.volunteers', 'color' => 'success'],
                ['icon' => 'fa-calendar-check', 'title' => 'View Events', 'route' => 'events.index', 'color' => 'info']
            ];
            
            return compact('stats', 'charts', 'quickActions');
        });
    }
    
    /**
     * Get common dashboard data for all roles
     */
    private function getCommonDashboardData($userId, $role)
    {
        try {
            return [
                'recentActivities' => $this->getRecentActivities($userId, $role),
                'notifications' => $this->getNotifications($userId),
                'announcements' => $this->getAnnouncements($role),
                'upcomingEvents' => $this->getUpcomingEvents(),
                'quickStats' => $this->getQuickStats($role),
                'weatherWidget' => $this->getWeatherWidget(),
                'motivationalQuote' => $this->getDailyQuote()
            ];
        } catch (Exception $e) {
            Log::error('Error getting common dashboard data', [
                'error' => $e->getMessage()
            ]);
            
            return [
                'recentActivities' => collect(),
                'notifications' => collect(),
                'announcements' => collect(),
                'upcomingEvents' => collect(),
                'quickStats' => [],
                'weatherWidget' => null,
                'motivationalQuote' => null
            ];
        }
    }
    
    /**
     * Get recent activities based on role
     */
    private function getRecentActivities($userId, $role)
    {
        try {
            $activities = collect();
            
            // Get audit logs or activity logs
            // This is a placeholder - implement based on your audit system
            $activities->push([
                'icon' => 'fa-sign-in-alt',
                'title' => 'You logged in',
                'time' => Carbon::now()->subMinutes(5)->diffForHumans(),
                'type' => 'login'
            ]);
            
            if ($role == 'admin' || $role == 'supervisor') {
                // Add admin-specific activities
                $recentUsers = Users::latest()->limit(3)->get();
                foreach ($recentUsers as $user) {
                    $activities->push([
                        'icon' => 'fa-user-plus',
                        'title' => "New user registered: {$user->name}",
                        'time' => $user->created_at->diffForHumans(),
                        'type' => 'user'
                    ]);
                }
            }
            
            return $activities->take(5);
            
        } catch (Exception $e) {
            Log::error('Error getting recent activities', [
                'error' => $e->getMessage()
            ]);
            return collect();
        }
    }
    
    /**
     * Get user notifications
     */
    private function getNotifications($userId)
    {
        try {
            // Placeholder for notification system
            $notifications = collect();
            
            // Add sample notifications based on role
            if (session('role') == 'admin') {
                if ($pendingContacts = ContactMessages::where('status', 'pending')->count()) {
                    $notifications->push([
                        'id' => uniqid(),
                        'icon' => 'fa-envelope',
                        'title' => 'Pending Contact Messages',
                        'message' => "You have {$pendingContacts} unread contact messages",
                        'time' => 'Just now',
                        'type' => 'info',
                        'link' => route('admin.contacts.index')
                    ]);
                }
                
                if ($pendingVolunteers = Volunteers::where('status', 'pending')->count()) {
                    $notifications->push([
                        'id' => uniqid(),
                        'icon' => 'fa-hand-holding-heart',
                        'title' => 'Volunteer Applications',
                        'message' => "{$pendingVolunteers} volunteer applications pending review",
                        'time' => '5 mins ago',
                        'type' => 'warning',
                        'link' => route('admin.volunteers.index')
                    ]);
                }
            }
            
            return $notifications;
            
        } catch (Exception $e) {
            Log::error('Error getting notifications', [
                'error' => $e->getMessage()
            ]);
            return collect();
        }
    }
    
    /**
     * Get system announcements
     */
    private function getAnnouncements($role)
    {
        try {
            $announcements = collect();
            
            // Add role-specific announcements
            $announcements->push([
                'id' => 1,
                'title' => 'Welcome to CREAMS Dashboard',
                'message' => 'Your centralized hub for managing rehabilitation activities.',
                'type' => 'info',
                'icon' => 'fa-info-circle'
            ]);
            
            if ($role == 'teacher') {
                $announcements->push([
                    'id' => 2,
                    'title' => 'Attendance Reminder',
                    'message' => 'Please mark attendance for all your sessions today.',
                    'type' => 'warning',
                    'icon' => 'fa-clipboard-check'
                ]);
            }
            
            return $announcements;
            
        } catch (Exception $e) {
            Log::error('Error getting announcements', [
                'error' => $e->getMessage()
            ]);
            return collect();
        }
    }
    
    /**
     * Get upcoming events
     */
    private function getUpcomingEvents()
    {
        try {
            return Cache::remember('dashboard_upcoming_events', 600, function () {
                if (class_exists('App\Models\Event')) {
                    return Event::where('date', '>=', now())
                        ->orderBy('date')
                        ->limit(5)
                        ->get()
                        ->map(function ($event) {
                            return [
                                'id' => $event->id,
                                'title' => $event->title,
                                'date' => Carbon::parse($event->date)->format('M d, Y'),
                                'time' => Carbon::parse($event->date)->format('g:i A'),
                                'type' => $event->type ?? 'general',
                                'location' => $event->location ?? 'TBA'
                            ];
                        });
                }
                
                return collect();
            });
        } catch (Exception $e) {
            Log::error('Error getting upcoming events', [
                'error' => $e->getMessage()
            ]);
            return collect();
        }
    }
    
    /**
     * Get quick stats based on role
     */
    private function getQuickStats($role)
    {
        try {
            $stats = [];
            
            switch ($role) {
                case 'admin':
                    $stats = [
                        ['label' => 'System Uptime', 'value' => '99.9%', 'icon' => 'fa-server', 'color' => 'success'],
                        ['label' => 'Active Users', 'value' => $this->getActiveUsersCount(), 'icon' => 'fa-users', 'color' => 'primary'],
                        ['label' => 'Storage Used', 'value' => '45.2 GB', 'icon' => 'fa-hdd', 'color' => 'warning'],
                        ['label' => 'CPU Usage', 'value' => '23%', 'icon' => 'fa-microchip', 'color' => 'info']
                    ];
                    break;
                    
                case 'teacher':
                    $stats = [
                        ['label' => 'Today\'s Classes', 'value' => $this->getTodaySessionsCount(session('id')), 'icon' => 'fa-chalkboard-teacher', 'color' => 'primary'],
                        ['label' => 'Students Present', 'value' => $this->getTodayAttendance(session('id')), 'icon' => 'fa-user-check', 'color' => 'success'],
                        ['label' => 'Pending Tasks', 'value' => '3', 'icon' => 'fa-tasks', 'color' => 'warning'],
                        ['label' => 'Messages', 'value' => '5', 'icon' => 'fa-envelope', 'color' => 'info']
                    ];
                    break;
            }
            
            return $stats;
            
        } catch (Exception $e) {
            Log::error('Error getting quick stats', [
                'error' => $e->getMessage()
            ]);
            return [];
        }
    }
    
    /**
     * Get weather widget data
     */
    private function getWeatherWidget()
    {
        try {
            // Use user's location from session or default
            $location = session('user_location', 'Shah Alam, Malaysia');
            
            return [
                'location' => $location,
                'temperature' => '28°C',
                'condition' => 'Partly Cloudy',
                'icon' => 'fa-cloud-sun',
                'humidity' => '75%',
                'wind' => '10 km/h'
            ];
        } catch (Exception $e) {
            return null;
        }
    }
    
    /**
     * Get daily motivational quote
     */
    private function getDailyQuote()
    {
        try {
            $quotes = [
                ['text' => 'Every accomplishment starts with the decision to try.', 'author' => 'John F. Kennedy'],
                ['text' => 'The only disability in life is a bad attitude.', 'author' => 'Scott Hamilton'],
                ['text' => 'Your limitation—it\'s only your imagination.', 'author' => 'Unknown'],
                ['text' => 'Great things never come from comfort zones.', 'author' => 'Unknown'],
                ['text' => 'Dream it. Believe it. Build it.', 'author' => 'Unknown']
            ];
            
            // Get quote based on day of year for consistency
            $dayOfYear = date('z');
            $index = $dayOfYear % count($quotes);
            
            return $quotes[$index];
        } catch (Exception $e) {
            return null;
        }
    }
    
    /**
     * Safe count helper with error handling
     */
    private function safeCount($model, $conditions = [], $dateField = null, $days = null)
    {
        try {
            $query = $model::query();
            
            foreach ($conditions as $field => $value) {
                $query->where($field, $value);
            }
            
            if ($dateField && $days) {
                $query->where($dateField, '>=', Carbon::now()->subDays($days));
            }
            
            return $query->count();
        } catch (Exception $e) {
            Log::error('Error in safe count', [
                'model' => $model,
                'error' => $e->getMessage()
            ]);
            return 0;
        }
    }
    
    /**
     * Get default stats structure
     */
    private function getDefaultStats()
    {
        return [
            'total_users' => 0,
            'total_trainees' => 0,
            'total_activities' => 0,
            'total_centres' => 0
        ];
    }
    
    /**
     * Chart data generators (placeholders)
     */
    private function getUserGrowthChart()
    {
        try {
            $data = [];
            for ($i = 11; $i >= 0; $i--) {
                $month = Carbon::now()->subMonths($i);
                $count = Users::whereMonth('created_at', $month->month)
                    ->whereYear('created_at', $month->year)
                    ->count();
                    
                $data[] = [
                    'month' => $month->format('M'),
                    'users' => $count
                ];
            }
            return $data;
        } catch (Exception $e) {
            return [];
        }
    }
    
    private function getActivityDistributionChart()
    {
        try {
            return Activity::select('category', DB::raw('count(*) as count'))
                ->groupBy('category')
                ->get()
                ->map(function ($item) {
                    return [
                        'category' => $item->category,
                        'count' => $item->count
                    ];
                });
        } catch (Exception $e) {
            return [];
        }
    }
    
    private function getCentrePerformanceChart()
    {
        try {
            return Centres::withCount(['users', 'trainees'])
                ->get()
                ->map(function ($centre) {
                    return [
                        'centre' => $centre->name,
                        'staff' => $centre->users_count,
                        'trainees' => $centre->trainees_count
                    ];
                });
        } catch (Exception $e) {
            return [];
        }
    }
    
    private function getDisabilityTypesChart()
    {
        try {
            $types = [
                'Autism' => ['Autism Spectrum Disorder'],
                'Hearing' => ['Hearing Impairment', 'Deaf'],
                'Visual' => ['Visual Impairment', 'Blind'],
                'Physical' => ['Physical Disability'],
                'Learning' => ['Learning Disabilities', 'ADHD', 'Dyslexia'],
                'Speech' => ['Speech Delay', 'Language Disorder'],
                'Down Syndrome' => ['Down Syndrome'],
                'Cerebral Palsy' => ['Cerebral Palsy'],
                'Intellectual' => ['Intellectual Disability'],
                'Multiple' => ['Multiple Disabilities']
            ];
            
            $data = [];
            foreach ($types as $label => $conditions) {
                $count = Trainee::whereIn('disability_type', $conditions)->count();
                if ($count > 0) {
                    $data[] = [
                        'type' => $label,
                        'count' => $count
                    ];
                }
            }
            
            return $data;
        } catch (Exception $e) {
            return [];
        }
    }
    
    // Additional helper methods
    private function getActiveUsersCount()
    {
        try {
            return Users::where('last_login_at', '>=', Carbon::now()->subMinutes(30))->count();
        } catch (Exception $e) {
            return 0;
        }
    }
    
    private function getTodaySessionsCount($teacherId)
    {
        try {
            $today = Carbon::now()->format('l'); // Get day name
            return ActivitySession::where('teacher_id', $teacherId)
                ->where('day_of_week', $today)
                ->where('is_active', true)
                ->count();
        } catch (Exception $e) {
            return 0;
        }
    }
    
    private function getTodayAttendance($teacherId)
    {
        try {
            $today = Carbon::now()->format('Y-m-d');
            return DB::table('activity_attendance')
                ->join('activity_sessions', 'activity_attendance.session_id', '=', 'activity_sessions.id')
                ->where('activity_sessions.teacher_id', $teacherId)
                ->where('activity_attendance.attendance_date', $today)
                ->where('activity_attendance.status', 'Present')
                ->count();
        } catch (Exception $e) {
            return 0;
        }
    }
    
    private function getUpcomingEventsCount()
    {
        try {
            if (class_exists('App\Models\Event')) {
                return Event::where('date', '>=', now())
                    ->where('date', '<=', now()->addDays(30))
                    ->count();
            }
            return 0;
        } catch (Exception $e) {
            return 0;
        }
    }
}

EnhancedLoginController

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\Users;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;

class EnhancedLoginController extends Controller
{
    /**
     * Show enhanced login form
     */
    public function showLogin()
    {
        return view('auth.enhanced-login');
    }

    /**
     * Enhanced login with better UX and security
     */
    public function login(Request $request)
    {
        // Rate limiting
        $key = 'login.' . $request->ip();
        
        if (RateLimiter::tooManyAttempts($key, 5)) {
            $seconds = RateLimiter::availableIn($key);
            return response()->json([
                'success' => false,
                'message' => "Too many login attempts. Please try again in {$seconds} seconds.",
                'lockout_time' => $seconds
            ], 429);
        }

        $request->validate([
            'identifier' => 'required|string',
            'password' => 'required|string',
            'remember' => 'boolean'
        ]);

        try {
            // Find user by email or IIUM ID
            $user = Users::where('email', $request->identifier)
                ->orWhere('iium_id', strtoupper($request->identifier))
                ->first();

            if (!$user || !Hash::check($request->password, $user->password)) {
                RateLimiter::hit($key, 300); // 5 minutes lockout
                
                // Log failed attempt
                Log::warning('Failed login attempt', [
                    'identifier' => $request->identifier,
                    'ip' => $request->ip(),
                    'user_agent' => $request->userAgent()
                ]);

                return response()->json([
                    'success' => false,
                    'message' => 'Invalid credentials. Please check your email/IIUM ID and password.'
                ], 401);
            }

            // Check if user is active
            if (isset($user->status) && $user->status === 'inactive') {
                return response()->json([
                    'success' => false,
                    'message' => 'Your account has been deactivated. Please contact the administrator.'
                ], 403);
            }

            // Clear rate limiting on successful login
            RateLimiter::clear($key);

            // Set session data
            Session::regenerate();
            Session::put([
                'id' => $user->id,
                'iium_id' => $user->iium_id,
                'name' => $user->name,
                'role' => $user->role,
                'email' => $user->email,
                'centre_id' => $user->centre_id,
                'logged_in' => true,
                'login_time' => now()->toDateTimeString()
            ]);

            // Handle remember me
            if ($request->remember) {
                $token = bin2hex(random_bytes(32));
                $user->update(['remember_token' => $token]);
                cookie()->queue('remember_token', $token, 60 * 24 * 30); // 30 days
            }

            // Update last login
            $user->update(['last_login' => now()]);

            // Log successful login
            Log::info('Successful login', [
                'user_id' => $user->id,
                'email' => $user->email,
                'role' => $user->role,
                'ip' => $request->ip()
            ]);

            // Return JSON response for AJAX
            return response()->json([
                'success' => true,
                'message' => 'Login successful!',
                'redirect_url' => $this->getRedirectUrl($user->role),
                'user' => [
                    'name' => $user->name,
                    'role' => $user->role,
                    'centre' => $user->centre->centre_name ?? 'N/A'
                ]
            ]);

        } catch (\Exception $e) {
            Log::error('Login error', [
                'error' => $e->getMessage(),
                'identifier' => $request->identifier,
                'ip' => $request->ip()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred during login. Please try again.'
            ], 500);
        }
    }

    /**
     * Get redirect URL based on role
     */
    private function getRedirectUrl($role)
    {
        $redirects = [
            'admin' => route('admin.dashboard'),
            'supervisor' => route('supervisor.dashboard'),
            'teacher' => route('teacher.dashboard'),
            'ajk' => route('ajk.dashboard')
        ];

        return $redirects[$role] ?? route('dashboard');
    }
}

EnrollmentController

<?php

namespace App\Http\Controllers;

use App\Models\Activity;
use App\Models\ActivitySession;
use App\Models\SessionEnrollment;
use App\Models\Trainee;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class EnrollmentController extends Controller
{
    public function showAvailableActivities()
    {
        $role = session('role');
        
        // For trainees showing their available activities
        if ($role === 'trainee') {
            $trainee = Trainee::where('user_id', session('id'))->first();
            if (!$trainee) {
                return redirect()->route('dashboard')
                    ->with('error', 'Trainee profile not found');
            }
            
            // Get activities suitable for trainee's age
            $age = \Carbon\Carbon::parse($trainee->trainee_date_of_birth)->age;
            $ageGroup = $this->determineAgeGroup($age);
            
            $activities = Activity::with(['sessions' => function($query) {
                $query->where('is_active', true)
                      ->where('current_enrollment', '<', DB::raw('max_capacity'));
            }])
            ->where('is_active', true)
            ->where(function($query) use ($ageGroup) {
                $query->where('age_group', $ageGroup)
                      ->orWhere('age_group', 'All Ages');
            })
            ->get();
            
            // Filter out already enrolled activities
            $enrolledSessionIds = SessionEnrollment::where('trainee_id', $trainee->id)
                ->where('status', 'Active')
                ->pluck('session_id');
                
            $activities = $activities->filter(function($activity) use ($enrolledSessionIds) {
                return !$activity->sessions->pluck('id')->intersect($enrolledSessionIds)->count();
            });
            
            return view('enrollment.available-activities', compact('activities', 'trainee'));
        }
        
        // For staff enrolling trainees
        return view('enrollment.search-trainee');
    }
    
    public function enrollTrainee(Request $request, $sessionId)
    {
        $validated = $request->validate([
            'trainee_id' => 'required|exists:trainees,id',
            'parent_consent' => 'boolean',
            'special_requirements' => 'nullable|string'
        ]);
        
        try {
            DB::beginTransaction();
            
            $session = ActivitySession::findOrFail($sessionId);
            
            // Check if session has capacity
            if ($session->current_enrollment >= $session->max_capacity) {
                return back()->with('error', 'Session is full');
            }
            
            // Check if trainee already enrolled
            $existing = SessionEnrollment::where('session_id', $sessionId)
                ->where('trainee_id', $validated['trainee_id'])
                ->first();
                
            if ($existing) {
                return back()->with('error', 'Trainee already enrolled in this session');
            }
            
            // Create enrollment
            $enrollment = SessionEnrollment::create([
                'session_id' => $sessionId,
                'trainee_id' => $validated['trainee_id'],
                'enrollment_date' => now(),
                'status' => 'Active',
                'parent_consent' => $validated['parent_consent'] ?? false,
                'special_requirements' => $validated['special_requirements']
            ]);
            
            // Update session enrollment count
            $session->increment('current_enrollment');
            
            DB::commit();
            
            Log::info('Trainee enrolled successfully', [
                'enrollment_id' => $enrollment->id,
                'trainee_id' => $validated['trainee_id'],
                'session_id' => $sessionId
            ]);
            
            // Send notification to parent
            $this->notifyParent($enrollment);
            
            return redirect()->back()
                ->with('success', 'Trainee enrolled successfully!');
                
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Enrollment failed', [
                'error' => $e->getMessage()
            ]);
            
            return back()->with('error', 'Failed to enroll trainee');
        }
    }
    
    public function dropEnrollment(Request $request, $enrollmentId)
    {
        $enrollment = SessionEnrollment::findOrFail($enrollmentId);
        
        // Check permission
        $role = session('role');
        if ($role === 'trainee') {
            $trainee = Trainee::where('user_id', session('id'))->first();
            if (!$trainee || $enrollment->trainee_id !== $trainee->id) {
                return redirect()->back()
                    ->with('error', 'Unauthorized');
            }
        } elseif (!in_array($role, ['admin', 'supervisor'])) {
            return redirect()->back()
                ->with('error', 'Unauthorized');
        }
        
        try {
            DB::beginTransaction();
            
            // Update enrollment status
            $enrollment->update([
                'status' => 'Dropped',
                'dropped_at' => now(),
                'dropped_reason' => $request->reason
            ]);
            
            // Update session enrollment count
            $enrollment->session->decrement('current_enrollment');
            
            DB::commit();
            
            return redirect()->back()
                ->with('success', 'Successfully dropped from activity');
                
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to drop enrollment');
        }
    }
    
    private function determineAgeGroup($age)
    {
        if ($age >= 3 && $age <= 6) return '3-6';
        if ($age >= 7 && $age <= 12) return '7-12';
        if ($age >= 13 && $age <= 18) return '13-18';
        return 'All Ages';
    }
    
    private function notifyParent($enrollment)
    {
        // Send email/SMS notification to parent
        // Implementation depends on notification system
    }
}

EventController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class EventController extends Controller
{
    /**
     * Display a listing of events.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if ($role !== 'ajk') {
            Log::warning('Unauthorized access attempt to events index', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy events data
        $events = [
            [
                'id' => 1,
                'title' => 'Community Awareness Day',
                'date' => '2023-04-25',
                'time' => '9:00 AM - 5:00 PM',
                'location' => 'IIUM Main Auditorium',
                'description' => 'A day dedicated to raising awareness about rehabilitation services in the community.',
                'status' => 'upcoming',
                'participants' => 32,
                'max_participants' => 50
            ],
            [
                'id' => 2,
                'title' => 'Parents Workshop',
                'date' => '2023-05-10',
                'time' => '10:00 AM - 2:00 PM',
                'location' => 'IIUM Conference Room',
                'description' => 'Workshop for parents of trainees with special needs.',
                'status' => 'upcoming',
                'participants' => 18,
                'max_participants' => 30
            ],
            [
                'id' => 3,
                'title' => 'Teacher Training Seminar',
                'date' => '2023-03-15',
                'time' => '9:00 AM - 4:00 PM',
                'location' => 'IIUM Training Centre',
                'description' => 'Professional development seminar for special education teachers.',
                'status' => 'completed',
                'participants' => 45,
                'max_participants' => 45
            ]
        ];
        
        return view('events.index', [
            'events' => $events
        ]);
    }
    
    /**
     * Display the specified event.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if ($role !== 'ajk') {
            Log::warning('Unauthorized access attempt to event details', [
                'user_id' => $userId,
                'role' => $role,
                'event_id' => $id
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy event data
        $event = [
            'id' => $id,
            'title' => 'Community Awareness Day',
            'date' => '2023-04-25',
            'time' => '9:00 AM - 5:00 PM',
            'location' => 'IIUM Main Auditorium',
            'description' => 'A day dedicated to raising awareness about rehabilitation services in the community. The event will feature exhibitions, talks, and interactive activities for attendees to learn about different aspects of rehabilitation services.',
            'status' => 'upcoming',
            'organizer' => 'Community Outreach Committee',
            'contact_person' => 'Ahmad Razif',
            'contact_email' => 'razif@iium.edu.my',
            'contact_phone' => '+60 12-345-6789',
            'participants' => [
                [
                    'id' => 1,
                    'name' => 'Dr. Nurul Hafizah',
                    'role' => 'Teacher',
                    'status' => 'confirmed'
                ],
                [
                    'id' => 2,
                    'name' => 'Mr. Ismail Rahman',
                    'role' => 'Teacher',
                    'status' => 'confirmed'
                ],
                [
                    'id' => 3,
                    'name' => 'Ms. Sarah Tan',
                    'role' => 'Teacher',
                    'status' => 'pending'
                ]
            ],
            'volunteers' => [
                [
                    'id' => 1,
                    'name' => 'Ali Hassan',
                    'role' => 'Event Support',
                    'status' => 'confirmed'
                ],
                [
                    'id' => 2,
                    'name' => 'Mei Ling',
                    'role' => 'Registration Desk',
                    'status' => 'confirmed'
                ]
            ],
            'schedule' => [
                [
                    'time' => '9:00 AM - 9:30 AM',
                    'activity' => 'Registration',
                    'location' => 'Main Entrance'
                ],
                [
                    'time' => '9:30 AM - 10:30 AM',
                    'activity' => 'Opening Ceremony',
                    'location' => 'Main Auditorium'
                ],
                [
                    'time' => '10:30 AM - 12:00 PM',
                    'activity' => 'Exhibition & Booths',
                    'location' => 'Exhibition Hall'
                ],
                [
                    'time' => '12:00 PM - 1:00 PM',
                    'activity' => 'Lunch Break',
                    'location' => 'Cafeteria'
                ],
                [
                    'time' => '1:00 PM - 3:00 PM',
                    'activity' => 'Workshops',
                    'location' => 'Workshop Rooms'
                ],
                [
                    'time' => '3:00 PM - 4:30 PM',
                    'activity' => 'Panel Discussion',
                    'location' => 'Main Auditorium'
                ],
                [
                    'time' => '4:30 PM - 5:00 PM',
                    'activity' => 'Closing Ceremony',
                    'location' => 'Main Auditorium'
                ]
            ]
        ];
        
        return view('events.show', [
            'event' => $event
        ]);
    }
    
    /**
     * Show the form for creating a new event.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if ($role !== 'ajk') {
            Log::warning('Unauthorized access attempt to create event', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy locations data for dropdown
        $locations = [
            'IIUM Main Auditorium',
            'IIUM Conference Room',
            'IIUM Training Centre',
            'IIUM Exhibition Hall',
            'IIUM Sports Complex',
            'Community Centre'
        ];
        
        return view('events.create', [
            'locations' => $locations
        ]);
    }
    
    /**
     * Store a newly created event in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        // Get user ID and role
        $userId = session('id');
        $role = session('role');
        
        // Check role access
        if ($role !== 'ajk') {
            Log::warning('Unauthorized access attempt to store event', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to perform this action');
        }
        
        // Validate input
        $request->validate([
            'title' => 'required|string|max:255',
            'date' => 'required|date|after:today',
            'start_time' => 'required|string',
            'end_time' => 'required|string',
            'location' => 'required|string|max:255',
            'description' => 'required|string',
            'max_participants' => 'required|integer|min:1',
            'organizer' => 'required|string|max:255',
            'contact_person' => 'required|string|max:255',
            'contact_email' => 'required|email',
            'contact_phone' => 'required|string|max:20'
        ]);
        
        // In a real implementation, save the event to database
        
        Log::info('Event created', [
            'user_id' => $userId,
            'event_title' => $request->title,
            'event_date' => $request->date
        ]);
        
        return redirect()->route('events.index')
            ->with('success', 'Event created successfully');
    }
    
    // Other methods (edit, update, destroy) would follow a similar pattern
}

MainController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rule;
use App\Models\Users;
use App\Models\Admins;
use App\Models\Supervisors;
use App\Models\AJKs;
use App\Models\Teachers;
use App\Models\Centres;
use App\Models\Notifications;
use App\Models\Trainees;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Cookie;

class MainController extends Controller
{
    /**
     * Display the login page
     *
     * @return \Illuminate\View\View
     */
    public function login()
    {
        Log::info('Login page accessed');
        return view("auth.login");
    }

    /**
     * Display the registration page
     *
     * @return \Illuminate\View\View
     */
    public function registration()
    {
        Log::info('Registration page accessed');

        try {
            // Check which column exists in the centres table
            $hasStatusColumn = Schema::hasColumn('centres', 'status');
            $hasCentreStatusColumn = Schema::hasColumn('centres', 'centre_status');

            Log::info('Centres table structure check', [
                'has_status_column' => $hasStatusColumn,
                'has_centre_status_column' => $hasCentreStatusColumn
            ]);

            // Get centers for dropdown based on available columns
            if ($hasStatusColumn) {
                Log::info('Querying centres using status column');
                $centers = Centres::where('status', 'active')->get();
            } elseif ($hasCentreStatusColumn) {
                Log::info('Querying centres using centre_status column');
                $centers = Centres::where('centre_status', 'active')->get();
            } else {
                // Fallback - get all centers without filtering
                Log::info('No status columns found, getting all centres');
                $centers = Centres::all();
            }

            Log::info('Centres retrieved successfully', [
                'count' => $centers->count()
            ]);
        } catch (\Exception $e) {
            // Log error and provide empty collection as fallback
            Log::error('Error retrieving centres for registration page', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            $centers = collect();
        }

        return view("auth.register", [
            'centers' => $centers
        ]);
    }

    /**
     * Register a new user
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */

    public function save(Request $request)
    {

         // Debug log to see what's being submitted
        Log::info('Registration form data:', [
            'all_data' => $request->all(),
            'centre_id' => $request->centre_id,
            'centre_location' => $request->centre_location
        ]);
        Log::info('Registration form submitted', ['data' => $request->except(['password', 'password_confirmation'])]);

        try {
            // Validate input with specific error messages
            Log::info('Beginning validation');
            $validator = Validator::make($request->all(), [
                'iium_id' => [
                    'required',
                    'string',
                    'size:8',
                    'regex:/^[A-Z]{4}\d{4}$/',
                    Rule::unique('users', 'iium_id'),
                ],
                'role' => 'required|in:admin,supervisor,teacher,ajk',
                'name' => 'required',
                'email' => [
                    'required',
                    'email',
                    Rule::unique('users', 'email'),
                ],
                'password' => [
                    'required',
                    'min:5',
                    'regex:/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[\W_]).{5,}$/',
                ],
                'password_confirmation' => 'required|same:password',
                'centre_id' => 'required|exists:centres,centre_id',
                'centre_location' => 'nullable|in:Gombak,Kuantan,Pagoh', // Add validation for the new field
            ], [
                'iium_id.required' => 'IIUM ID is required.',
                'iium_id.size' => 'IIUM ID must be exactly 8 characters.',
                'iium_id.regex' => 'IIUM ID must be 4 letters followed by 4 numbers (e.g., ABCD1234).',
                'iium_id.unique' => 'This IIUM ID is already registered in our system.',
                'role.required' => 'Please select a role.',
                'role.in' => 'The selected role is invalid.',
                'name.required' => 'Your full name is required.',
                'email.required' => 'Email address is required.',
                'email.email' => 'Please enter a valid email address.',
                'email.unique' => 'This email address is already registered.',
                'password.required' => 'Password is required.',
                'password.min' => 'Password must be at least 5 characters.',
                'password.regex' => 'Password must contain at least one letter and one number.',
                'password_confirmation.required' => 'Please confirm your password.',
                'password_confirmation.same' => 'Password confirmation does not match.',
                'centre_id.required' => 'Please select a centre location.',
                'centre_id.exists' => 'The selected centre is invalid.',
                'centre_location.in' => 'The selected centre location is invalid.', // Add error message for the new field
            ]);

            if ($validator->fails()) {
                $errors = $validator->errors()->toArray();
                Log::warning('Validation failed with specific errors:', $errors);

                // Log specific error types for detailed debugging
                if (isset($errors['iium_id']) && strpos(implode('', $errors['iium_id']), 'unique') !== false) {
                    Log::warning('Duplicate IIUM ID detected during registration', ['iium_id' => $request->iium_id]);
                }
                if (isset($errors['email']) && strpos(implode('', $errors['email']), 'unique') !== false) {
                    Log::warning('Duplicate email detected during registration', ['email' => $request->email]);
                }

                return redirect()->back()->withErrors($validator)->withInput($request->except(['password', 'password_confirmation']));
            }

            // Get validated data
            $validatedData = $validator->validated();
            Log::info('Validation passed', ['role' => $validatedData['role'], 'iium_id' => $validatedData['iium_id']]);

            // Encrypt password
            $validatedData['password'] = Hash::make($validatedData['password']);

            DB::beginTransaction();
            try {
                // Create the user with proper logging
                $user = new Users();
                $user->iium_id = strtoupper($validatedData['iium_id']);
                $user->name = $validatedData['name'];
                $user->email = $validatedData['email'];
                $user->password = $validatedData['password'];
                $user->role = $validatedData['role'];
                $user->centre_id = $validatedData['centre_id'];

                // Set the centre_location if provided
                if (isset($validatedData['centre_location'])) {
                    $user->centre_location = $validatedData['centre_location'];
                    Log::info('Centre location set', ['centre_location' => $validatedData['centre_location']]);
                }

                $user->status = 'active';

                Log::info('Attempting to save user', [
                    'iium_id' => $user->iium_id,
                    'email' => $user->email,
                    'role' => $user->role,
                    'centre_location' => $user->centre_location ?? 'null',
                    'model' => get_class($user)
                ]);

                $saved = $user->save();

                if (!$saved) {
                    Log::error('Failed to save user');
                    DB::rollBack();
                    return back()->with('fail', 'Something went wrong, try again later');
                }

                // Create welcome notification
                $notification = new Notifications();
                $notification->user_id = $user->id;
                $notification->user_type = Users::class;
                $notification->title = 'Welcome to CREAMS';
                $notification->content = 'Welcome to the Community-based REhAbilitation Management System. Your account has been created successfully.';
                $notification->type = 'success';
                $notification->save();

                DB::commit();
                Log::info('User successfully registered', [
                    'id' => $user->id,
                    'iium_id' => $user->iium_id,
                    'role' => $user->role,
                    'centre_location' => $user->centre_location ?? 'null'
                ]);

                $successMessage = "New " . ucfirst($validatedData['role']) . " has been registered";
                return redirect()->route('auth.loginpage')->with('success', $successMessage);
            } catch (\PDOException $e) {
                DB::rollBack();
                Log::error('Database error during registration:', [
                    'message' => $e->getMessage(),
                    'code' => $e->getCode()
                ]);

                // More specific database error messages
                if ($e->getCode() == 23000) { // Integrity constraint violation
                    return back()->with('fail', 'This IIUM ID or email is already registered in our system.')->withInput($request->except(['password', 'password_confirmation']));
                }

                return back()->with('fail', 'A database error occurred. Please try again later.')->withInput($request->except(['password', 'password_confirmation']));
            } catch (\Exception $e) {
                DB::rollBack();
                Log::error('Exception while saving user', [
                    'message' => $e->getMessage(),
                    'trace' => $e->getTraceAsString()
                ]);
                return back()->with('fail', 'An error occurred: ' . $e->getMessage())->withInput($request->except(['password', 'password_confirmation']));
            }
        } catch (\Exception $e) {
            Log::error('Error occurred in save method', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return back()->with('fail', 'An error occurred: ' . $e->getMessage())->withInput($request->except(['password', 'password_confirmation']));
        }
    }

    /**
     * Handle login authentication
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function check(Request $request)
    {
        // Debug log at the beginning
        Log::info('Login attempt started', [
            'data' => $request->except(['password']),
            'ip' => $request->ip(),
            'user_agent' => $request->userAgent()
        ]);

        try {
            // Validate with specific error messages
            $validator = Validator::make($request->all(), [
                'identifier' => 'required',
                'password' => 'required|min:5'
            ], [
                'identifier.required' => 'Email or IIUM ID is required.',
                'password.required' => 'Password is required.',
                'password.min' => 'Password must be at least 5 characters.'
            ]);

            if ($validator->fails()) {
                Log::warning('Login validation failed with specific errors:', $validator->errors()->toArray());
                return redirect()->back()->withErrors($validator)->withInput($request->except('password'));
            }

            // Determine if the identifier is an email or IIUM ID
            $identifier = $request->identifier;
            $isEmail = filter_var($identifier, FILTER_VALIDATE_EMAIL);

            Log::info('Searching for user by ' . ($isEmail ? 'email' : 'IIUM ID'), ['identifier' => $identifier]);

            // Find user based on the identifier type in the users table only
            $user = null;

            if ($isEmail) {
                $user = Users::where('email', $identifier)
                            ->where('status', 'active')
                            ->first();

                Log::debug('User search by email result', [
                    'email' => $identifier,
                    'found' => ($user ? 'Yes' : 'No')
                ]);
            } else {
                $iiumId = strtoupper($identifier);
                $user = Users::where('iium_id', $iiumId)
                            ->where('status', 'active')
                            ->first();

                Log::debug('User search by IIUM ID result', [
                    'iium_id' => $iiumId,
                    'found' => ($user ? 'Yes' : 'No')
                ]);
            }

            // If user not found, return appropriate error message
            if (!$user) {
                Log::warning('Login failed: User not found', [
                    'identifier' => $identifier,
                    'is_email' => $isEmail
                ]);

                return redirect()->route('auth.loginpage')
                    ->with('error', 'No account found with this ' . ($isEmail ? 'email address' : 'IIUM ID'));
            }

            Log::info('User found', [
                'id' => $user->id,
                'iium_id' => $user->iium_id,
                'role' => $user->role,
                'status' => $user->status
            ]);

            // Verify password
            if (!Hash::check($request->password, $user->password)) {
                Log::warning('Login failed: Incorrect password', [
                    'id' => $user->id,
                    'iium_id' => $user->iium_id,
                    'attempt_time' => now()->toDateTimeString()
                ]);

                return redirect()->route('auth.loginpage')
                    ->with('error', 'The password you entered is incorrect');
            }

            Log::info('Password verification successful', [
                'id' => $user->id,
                'iium_id' => $user->iium_id
            ]);

            // Update last accessed time using updateLastLogin method
            try {
                $user->updateLastLogin();
                Log::info('User last login time updated successfully');
            } catch (\Exception $e) {
                // If updateLastLogin fails, log it but continue with authentication
                Log::warning('Could not update last login time: ' . $e->getMessage());
            }

            // Set session data
            session([
                'id' => $user->id,
                'iium_id' => $user->iium_id,
                'name' => $user->name,
                'role' => $user->role,
                'email' => $user->email,
                'centre_id' => $user->centre_id,
                'logged_in' => true,
                'login_time' => now()->toDateTimeString()
            ]);

            // Remember Me functionality
            if ($request->has('remember') && $request->remember == 'on') {
                // Create a remember token if it doesn't exist
                if (empty($user->remember_token)) {
                    $user->remember_token = Str::random(60);
                    $user->save();

                    Log::info('Remember token generated', [
                        'user_id' => $user->id,
                        'token_length' => strlen($user->remember_token)
                    ]);
                }

                // Set a cookie with the remember token
                Cookie::queue('remember_token', $user->remember_token, 43200); // 30 days
            }

            Log::info('User logged in successfully', [
                'id' => $user->id,
                'iium_id' => $user->iium_id,
                'role' => $user->role,
                'remember_me' => $request->has('remember'),
                'session_id' => session()->getId()
            ]);

            return redirect()->route($user->role . '.dashboard');

        } catch (\Exception $e) {
            // Log the exception with detailed information
            Log::error('Error occurred in login process', [
                'message' => $e->getMessage(),
                'code' => $e->getCode(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString(),
                'identifier' => $request->identifier ?? 'not provided'
            ]);

            // Return a generic error message to the user
            return redirect()->route('auth.loginpage')
                ->with('error', 'An error occurred during login. Please try again later.');
        }
    }

    /**
     * Find user by email in users table with role filtering
     *
     * @param string $email
     * @param string|null $role Role to filter by (optional)
     * @return mixed
     */
    private function findUserByEmail($email, $role = null)
    {
        Log::debug('Searching for user by email', ['email' => $email, 'role_filter' => $role]);

        try {
            // Start query
            $query = Users::where('email', $email)
                        ->where('status', 'active');

            // Add role filter if specified
            if (!is_null($role)) {
                $query->where('role', $role);
            }

            // Execute query
            $user = $query->first();

            if ($user) {
                Log::info('User found by email', [
                    'id' => $user->id,
                    'iium_id' => $user->iium_id,
                    'role' => $user->role
                ]);
            } else {
                Log::info('No user found by email', ['email' => $email]);
            }

            return $user;
        } catch (\Exception $e) {
            Log::error('Error finding user by email', [
                'email' => $email,
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return null;
        }
    }

    /**
     * Find user by IIUM ID in users table with role filtering
     *
     * @param string $iiumId
     * @param string|null $role Role to filter by (optional)
     * @return mixed
     */
    private function findUserByIiumId($iiumId, $role = null)
    {
        $iiumId = strtoupper($iiumId);
        Log::debug('Searching for user by IIUM ID', ['iium_id' => $iiumId, 'role_filter' => $role]);

        try {
            // Start query
            $query = Users::where('iium_id', $iiumId)
                        ->where('status', 'active');

            // Add role filter if specified
            if (!is_null($role)) {
                $query->where('role', $role);
            }

            // Execute query
            $user = $query->first();

            if ($user) {
                Log::info('User found by IIUM ID', [
                    'id' => $user->id,
                    'iium_id' => $user->iium_id,
                    'role' => $user->role
                ]);
            } else {
                Log::info('No user found by IIUM ID', ['iium_id' => $iiumId]);
            }

            return $user;
        } catch (\Exception $e) {
            Log::error('Error finding user by IIUM ID', [
                'iium_id' => $iiumId,
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return null;
        }
    }

    /**
     * Set user session data
     *
     * @param mixed $user
     * @return void
     */
    private function setUserSession($user)
    {
        // First clear any existing session data
        $oldSessionId = session()->getId();
        $hadPreviousSession = session()->has('id');

        Log::debug('Clearing previous session before setting new one', [
            'previous_session_id' => $oldSessionId,
            'had_user' => $hadPreviousSession,
            'previous_user_id' => session('id'),
            'previous_role' => session('role')
        ]);

        session()->flush();

        // Store user data in session with all relevant fields
        $sessionData = [
            'id' => $user->id,
            'iium_id' => $user->iium_id,
            'name' => $user->name,
            'role' => $user->role,
            'email' => $user->email,
            'centre_id' => $user->centre_id,
            'logged_in' => true,
            'login_time' => now()->toDateTimeString()
        ];

        session($sessionData);

        // Force session to be saved immediately
        session()->save();

        // Verify session was properly set
        $newSessionId = session()->getId();
        $sessionContainsId = session()->has('id');
        $sessionUserId = session('id');

        Log::info('User session set', [
            'id' => $user->id,
            'iium_id' => $user->iium_id,
            'role' => $user->role,
            'new_session_id' => $newSessionId,
            'session_contains_id' => $sessionContainsId,
            'session_user_id' => $sessionUserId,
            'session_changed' => ($oldSessionId !== $newSessionId)
        ]);

        // Double-check all session data is correct
        if ($sessionUserId != $user->id) {
            Log::warning('Session user ID mismatch after setting session', [
                'expected' => $user->id,
                'actual' => $sessionUserId
            ]);
        }
    }

    /**
     * Get role name from user model
     *
     * @param mixed $user
     * @return string
     */
    private function getRoleFromModel($user)
    {
        $className = get_class($user);

        if ($className === Admins::class) {
            return 'admin';
        } elseif ($className === Supervisors::class) {
            return 'supervisor';
        } elseif ($className === Teachers::class) {
            return 'teacher';
        } elseif ($className === AJKs::class) {
            return 'ajk';
        }

        // Default fallback (extract from class name)
        $baseName = strtolower(class_basename($className));
        return rtrim($baseName, 's');
    }

    /**
     * Log out the user
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function logout(Request $request)
    {
        $userId = session('id');
        $userRole = session('role');
        $sessionId = session()->getId();

        Log::info('User logout initiated', [
            'user_id' => $userId,
            'role' => $userRole,
            'session_id' => $sessionId,
            'ip' => $request->ip()
        ]);

        // If the user is logged in, find their model and clear the remember token
        if ($userId) {
            try {
                $user = Users::find($userId);

                if ($user) {
                    Log::debug('Clearing remember token for user', ['user_id' => $userId]);
                    $user->remember_token = null;
                    $user->save();
                } else {
                    Log::warning('User not found during logout', ['user_id' => $userId]);
                }
            } catch (\Exception $e) {
                Log::error('Error updating user during logout', [
                    'user_id' => $userId,
                    'message' => $e->getMessage()
                ]);
            }
        }

        // Clear cookies
        Cookie::queue(Cookie::forget('remember_token'));

        // Store log data before clearing session
        $logData = [
            'user_id' => $userId,
            'role' => $userRole,
            'session_id' => $sessionId,
            'logout_time' => now()->toDateTimeString()
        ];

        // Clear the session
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        // Log after session is cleared
        Log::info('User logged out successfully', $logData);

        return redirect('/');
    }
    
    /**
     * Search for users and trainees by name
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function search(Request $request)
    {
        Log::info('Global search initiated', [
            'query' => $request->input('query'),
            'user_id' => session('id')
        ]);
        
        $query = $request->input('query');
        
        if (empty($query)) {
            return response()->json([]);
        }
        
        try {
            // Search for users (staff/teachers)
            $users = Users::where('name', 'like', "%{$query}%")
                ->where('status', 'active')
                ->where('role', '!=', 'admin') // Optional: exclude admins from results
                ->select('id', 'name', 'role', 'centre_id')
                ->with('centre:id,name,centre_id,centre_name')
                ->limit(10)
                ->get();
                
            // Search for trainees
            $trainees = Trainees::where(function($q) use ($query) {
                    $q->where('trainee_first_name', 'like', "%{$query}%")
                      ->orWhere('trainee_last_name', 'like', "%{$query}%");
                })
                ->select('id', 'trainee_first_name', 'trainee_last_name', 'centre_id')
                ->with('centre:id,name,centre_id,centre_name')
                ->limit(10)
                ->get()
                ->map(function($trainee) {
                    $trainee->role = 'trainee';
                    $trainee->name = $trainee->trainee_first_name . ' ' . $trainee->trainee_last_name;
                    return $trainee;
                });
            
            // Combine and format results
            $results = $users->concat($trainees)->map(function($item) {
                $centreName = '';
                
                // Handle different centre relation formats
                if ($item->centre) {
                    $centreName = $item->centre->name ?? $item->centre->centre_name ?? $item->centre->centre_id ?? 'Unknown';
                }
                
                return [
                    'id' => $item->id,
                    'name' => $item->name,
                    'role' => ucfirst($item->role),
                    'location' => $centreName ?: 'Not assigned',
                    'url' => $item->role === 'trainee' 
                        ? route('traineeprofile', ['id' => $item->id])
                        : route(session('role') . '.user.view', ['id' => $item->id])
                ];
            });
            
            Log::info('Search results generated', [
                'query' => $query,
                'count' => $results->count()
            ]);
            
            return response()->json($results);
        } catch (\Exception $e) {
            Log::error('Error in search function', [
                'query' => $query,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return response()->json([
                'error' => 'An error occurred while searching'
            ], 500);
        }
    }
}

MessageController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;
use App\Models\Messages;
use App\Models\Notifications;
use App\Models\Users;
use App\Models\Admins;
use App\Models\Supervisors;
use App\Models\Teachers;
use App\Models\AJKs;

class MessageController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the messages.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        try {
            $role = session('role');
            $id = session('id');
            
            Log::info('Messages index accessed', [
                'user_id' => $id,
                'role' => $role
            ]);
            
            $inbox = Messages::where('recipient_id', $id)
                ->where('recipient_type', $role)
                ->orderBy('created_at', 'desc')
                ->paginate(10, ['*'], 'inbox_page');
                
            $sent = Messages::where('sender_id', $id)
                ->where('sender_type', $role)
                ->orderBy('created_at', 'desc')
                ->paginate(10, ['*'], 'sent_page');
                
            $unreadCount = Messages::where('recipient_id', $id)
                ->where('recipient_type', $role)
                ->where('read', false)
                ->count();
                
            return view('messages.index', compact('inbox', 'sent', 'unreadCount'));
        } catch (\Exception $e) {
            Log::error('Error loading messages index', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'Failed to load messages. Please try again later.');
        }
    }
    
    /**
     * Show the form for creating a new message.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        try {
            // Get potential recipients based on role
            $role = session('role');
            $id = session('id');
            
            Log::info('Message create form accessed', [
                'user_id' => $id,
                'role' => $role
            ]);
            
            // Get users for each role
            $admins = Admins::where('id', '!=', ($role === 'admin' ? $id : 0))
                ->where('status', 'active')
                ->orderBy('name')
                ->get(['id', 'name', 'email']);
                
            $supervisors = Supervisors::where('id', '!=', ($role === 'supervisor' ? $id : 0))
                ->where('status', 'active')
                ->orderBy('name')
                ->get(['id', 'name', 'email']);
                
            $teachers = Teachers::where('id', '!=', ($role === 'teacher' ? $id : 0))
                ->where('status', 'active')
                ->orderBy('name')
                ->get(['id', 'name', 'email']);
                
            $ajks = AJKs::where('id', '!=', ($role === 'ajk' ? $id : 0))
                ->where('status', 'active')
                ->orderBy('name')
                ->get(['id', 'name', 'email']);
            
            return view('messages.create', compact('admins', 'supervisors', 'teachers', 'ajks'));
        } catch (\Exception $e) {
            Log::error('Error loading message create form', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('messages.index')
                ->with('error', 'Failed to load the compose form. Please try again later.');
        }
    }
    
    /**
     * Store a newly created message in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'recipient_id' => 'required|integer',
                'recipient_type' => 'required|string|in:admin,supervisor,teacher,ajk',
                'subject' => 'required|string|max:255',
                'content' => 'required|string',
            ]);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator)
                    ->withInput();
            }
            
            $senderId = session('id');
            $senderRole = session('role');
            $senderName = session('name');
            
            Log::info('Storing new message', [
                'sender_id' => $senderId,
                'sender_role' => $senderRole,
                'recipient_id' => $request->recipient_id,
                'recipient_type' => $request->recipient_type,
                'subject' => $request->subject
            ]);
            
            // Create message
            $message = new Messages();
            $message->sender_id = $senderId;
            $message->sender_type = $senderRole;
            $message->recipient_id = $request->recipient_id;
            $message->recipient_type = $request->recipient_type;
            $message->subject = $request->subject;
            $message->content = $request->content;
            $message->read = false;
            
            if(!$message->save()) {
                Log::error('Failed to save message', [
                    'sender_id' => $senderId,
                    'recipient_id' => $request->recipient_id
                ]);
                
                return redirect()->back()
                    ->with('error', 'Failed to send message. Please try again.')
                    ->withInput();
            }
            
            // Create notification for recipient
            $notification = new Notifications();
            $notification->user_id = $request->recipient_id;
            $notification->user_type = $request->recipient_type;
            $notification->type = 'message';
            $notification->title = 'New Message';
            $notification->content = 'You have received a new message from ' . $senderName;
            $notification->read = false;
            
            if(!$notification->save()) {
                Log::warning('Failed to create notification for message', [
                    'message_id' => $message->id,
                    'recipient_id' => $request->recipient_id
                ]);
                
                // Continue anyway as the message was sent successfully
            }
            
            Log::info('Message sent successfully', [
                'message_id' => $message->id,
                'notification_created' => isset($notification->id)
            ]);
            
            return redirect()->route('messages.index')
                ->with('success', 'Message sent successfully');
        } catch (\Exception $e) {
            Log::error('Error sending message', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->with('error', 'An error occurred while sending the message. Please try again later.')
                ->withInput();
        }
    }
    
    /**
     * Display the specified message.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        try {
            $message = Messages::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Showing message details', [
                'message_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to view this message
            if (
                ($message->recipient_id != $userId || $message->recipient_type != $role) &&
                ($message->sender_id != $userId || $message->sender_type != $role)
            ) {
                Log::warning('Unauthorized message access attempt', [
                    'message_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('messages.index')
                    ->with('error', 'You are not authorized to view this message');
            }
            
            // Mark as read if the user is the recipient
            if ($message->recipient_id == $userId && $message->recipient_type == $role && !$message->read) {
                $message->read = true;
                $message->read_at = now();
                $message->save();
                
                Log::info('Message marked as read', [
                    'message_id' => $id,
                    'user_id' => $userId
                ]);
            }
            
            // Get conversation history
            $conversation = Messages::where(function($query) use ($message) {
                    $query->where('sender_id', $message->sender_id)
                        ->where('sender_type', $message->sender_type)
                        ->where('recipient_id', $message->recipient_id)
                        ->where('recipient_type', $message->recipient_type);
                })
                ->orWhere(function($query) use ($message) {
                    $query->where('sender_id', $message->recipient_id)
                        ->where('sender_type', $message->recipient_type)
                        ->where('recipient_id', $message->sender_id)
                        ->where('recipient_type', $message->sender_type);
                })
                ->orderBy('created_at', 'asc')
                ->get();
                
            return view('messages.show', compact('message', 'conversation'));
        } catch (\Exception $e) {
            Log::error('Error showing message', [
                'message_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('messages.index')
                ->with('error', 'Failed to load message. Please try again later.');
        }
    }
    
    /**
     * Show the form for replying to a message.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function reply($id)
    {
        try {
            $message = Messages::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Message reply form accessed', [
                'message_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to reply to this message
            if (
                ($message->recipient_id != $userId || $message->recipient_type != $role) &&
                ($message->sender_id != $userId || $message->sender_type != $role)
            ) {
                Log::warning('Unauthorized message reply attempt', [
                    'message_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('messages.index')
                    ->with('error', 'You are not authorized to reply to this message');
            }
            
            // Set reply details
            if ($message->recipient_id == $userId && $message->recipient_type == $role) {
                // If user is the recipient, reply to the sender
                $recipient_id = $message->sender_id;
                $recipient_type = $message->sender_type;
                $recipient_name = $message->sender_name;
            } else {
                // If user is the sender, reply to the recipient
                $recipient_id = $message->recipient_id;
                $recipient_type = $message->recipient_type;
                $recipient_name = $message->recipient_name;
            }
            
            $subject = 'Re: ' . $message->subject;
            
            return view('messages.reply', compact('message', 'recipient_id', 'recipient_type', 'recipient_name', 'subject'));
        } catch (\Exception $e) {
            Log::error('Error loading message reply form', [
                'message_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('messages.index')
                ->with('error', 'Failed to load reply form. Please try again later.');
        }
    }
    
    /**
     * Mark message as read.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function markAsRead($id)
    {
        try {
            $message = Messages::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Marking message as read', [
                'message_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to mark this message as read
            if ($message->recipient_id != $userId || $message->recipient_type != $role) {
                Log::warning('Unauthorized attempt to mark message as read', [
                    'message_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('messages.index')
                    ->with('error', 'You are not authorized to mark this message as read');
            }
            
            $message->read = true;
            $message->read_at = now();
            $message->save();
            
            Log::info('Message marked as read successfully', [
                'message_id' => $id,
                'user_id' => $userId
            ]);
            
            return redirect()->back()
                ->with('success', 'Message marked as read');
        } catch (\Exception $e) {
            Log::error('Error marking message as read', [
                'message_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->with('error', 'Failed to mark message as read. Please try again later.');
        }
    }
    
    /**
     * Mark all messages as read.
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function markAllAsRead()
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            Log::info('Marking all messages as read', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            $count = Messages::where('recipient_id', $userId)
                ->where('recipient_type', $role)
                ->where('read', false)
                ->update([
                    'read' => true,
                    'read_at' => now()
                ]);
                
            Log::info('Marked all messages as read', [
                'count' => $count,
                'user_id' => $userId
            ]);
            
            return redirect()->back()
                ->with('success', $count . ' messages marked as read');
        } catch (\Exception $e) {
            Log::error('Error marking all messages as read', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->with('error', 'Failed to mark messages as read. Please try again later.');
        }
    }
    
    /**
     * Delete the specified message.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        try {
            $message = Messages::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Deleting message', [
                'message_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to delete this message
            if (
                ($message->recipient_id != $userId || $message->recipient_type != $role) &&
                ($message->sender_id != $userId || $message->sender_type != $role)
            ) {
                Log::warning('Unauthorized message delete attempt', [
                    'message_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('messages.index')
                    ->with('error', 'You are not authorized to delete this message');
            }
            
            $message->delete();
            
            Log::info('Message deleted successfully', [
                'message_id' => $id,
                'user_id' => $userId
            ]);
            
            return redirect()->route('messages.index')
                ->with('success', 'Message deleted successfully');
        } catch (\Exception $e) {
            Log::error('Error deleting message', [
                'message_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('messages.index')
                ->with('error', 'Failed to delete message. Please try again later.');
        }
    }
}

NotificationController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Models\Notifications;

class NotificationController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the notifications.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        try {
            $role = session('role');
            $id = session('id');
            
            Log::info('Notifications index accessed', [
                'user_id' => $id,
                'role' => $role
            ]);
            
            $notifications = Notifications::where('user_id', $id)
                ->where('user_type', $role)
                ->orderBy('created_at', 'desc')
                ->paginate(15);
                
            $unreadCount = Notifications::where('user_id', $id)
                ->where('user_type', $role)
                ->where('read', false)
                ->count();
                
            return view('notifications.index', compact('notifications', 'unreadCount'));
        } catch (\Exception $e) {
            Log::error('Error loading notifications index', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'Failed to load notifications. Please try again later.');
        }
    }
    
    /**
     * Display the specified notification.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        try {
            $notification = Notifications::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Showing notification details', [
                'notification_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to view this notification
            if ($notification->user_id != $userId || $notification->user_type != $role) {
                Log::warning('Unauthorized notification access attempt', [
                    'notification_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('notifications.index')
                    ->with('error', 'You are not authorized to view this notification');
            }
            
            // Mark as read if not already
            if (!$notification->read) {
                $notification->read = true;
                $notification->read_at = now();
                $notification->save();
                
                Log::info('Notification marked as read', [
                    'notification_id' => $id,
                    'user_id' => $userId
                ]);
            }
                
            return view('notifications.show', compact('notification'));
        } catch (\Exception $e) {
            Log::error('Error showing notification', [
                'notification_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('notifications.index')
                ->with('error', 'Failed to load notification. Please try again later.');
        }
    }
    
    /**
     * Mark notification as read.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function markAsRead($id)
    {
        try {
            $notification = Notifications::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Marking notification as read', [
                'notification_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to mark this notification as read
            if ($notification->user_id != $userId || $notification->user_type != $role) {
                Log::warning('Unauthorized attempt to mark notification as read', [
                    'notification_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('notifications.index')
                    ->with('error', 'You are not authorized to mark this notification as read');
            }
            
            $notification->read = true;
            $notification->read_at = now();
            $notification->save();
            
            Log::info('Notification marked as read successfully', [
                'notification_id' => $id,
                'user_id' => $userId
            ]);
            
            return redirect()->back()
                ->with('success', 'Notification marked as read');
        } catch (\Exception $e) {
            Log::error('Error marking notification as read', [
                'notification_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->with('error', 'Failed to mark notification as read. Please try again later.');
        }
    }
    
    /**
     * Mark all notifications as read.
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function markAllAsRead()
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            Log::info('Marking all notifications as read', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            $count = Notifications::where('user_id', $userId)
                ->where('user_type', $role)
                ->where('read', false)
                ->update([
                    'read' => true,
                    'read_at' => now()
                ]);
                
            Log::info('Marked all notifications as read', [
                'count' => $count,
                'user_id' => $userId
            ]);
            
            return redirect()->back()
                ->with('success', $count . ' notifications marked as read');
        } catch (\Exception $e) {
            Log::error('Error marking all notifications as read', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->with('error', 'Failed to mark notifications as read. Please try again later.');
        }
    }
    
    /**
     * Delete the specified notification.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        try {
            $notification = Notifications::findOrFail($id);
            $role = session('role');
            $userId = session('id');
            
            Log::info('Deleting notification', [
                'notification_id' => $id,
                'user_id' => $userId,
                'role' => $role
            ]);
            
            // Check if the user is authorized to delete this notification
            if ($notification->user_id != $userId || $notification->user_type != $role) {
                Log::warning('Unauthorized notification delete attempt', [
                    'notification_id' => $id,
                    'user_id' => $userId,
                    'role' => $role
                ]);
                
                return redirect()->route('notifications.index')
                    ->with('error', 'You are not authorized to delete this notification');
            }
            
            $notification->delete();
            
            Log::info('Notification deleted successfully', [
                'notification_id' => $id,
                'user_id' => $userId
            ]);
            
            return redirect()->route('notifications.index')
                ->with('success', 'Notification deleted successfully');
        } catch (\Exception $e) {
            Log::error('Error deleting notification', [
                'notification_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('notifications.index')
                ->with('error', 'Failed to delete notification. Please try again later.');
        }
    }
    
    /**
     * Delete all read notifications.
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function clearRead()
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            Log::info('Clearing read notifications', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            $count = Notifications::where('user_id', $userId)
                ->where('user_type', $role)
                ->where('read', true)
                ->delete();
                
            Log::info('Read notifications cleared', [
                'count' => $count,
                'user_id' => $userId
            ]);
            
            return redirect()->route('notifications.index')
                ->with('success', $count . ' read notifications have been cleared');
        } catch (\Exception $e) {
            Log::error('Error clearing read notifications', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('notifications.index')
                ->with('error', 'Failed to clear read notifications. Please try again later.');
        }
    }
    
    /**
     * Get unread notifications as JSON for AJAX requests.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUnread()
    {
        try {
            $role = session('role');
            $userId = session('id');
            
            Log::debug('Getting unread notifications via AJAX', [
                'user_id' => $userId,
                'role' => $role
            ]);
            
            $notifications = Notifications::where('user_id', $userId)
                ->where('user_type', $role)
                ->where('read', false)
                ->orderBy('created_at', 'desc')
                ->take(5)
                ->get();
                
            $count = $notifications->count();
            
            // Format notifications for display
            $formattedNotifications = [];
            foreach ($notifications as $notification) {
                $formattedNotifications[] = [
                    'id' => $notification->id,
                    'title' => $notification->title,
                    'content' => $notification->content,
                    'icon' => $notification->icon,
                    'color' => $notification->color,
                    'time' => $notification->created_at->diffForHumans(),
                    'url' => route('notifications.show', $notification->id)
                ];
            }
            
            Log::debug('Returning unread notifications', [
                'count' => $count,
                'notifications' => count($formattedNotifications)
            ]);
            
            return response()->json([
                'success' => true,
                'count' => $count,
                'notifications' => $formattedNotifications
            ]);
        } catch (\Exception $e) {
            Log::error('Error fetching unread notifications', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return response()->json([
                'success' => false,
                'message' => 'Failed to load notifications',
                'count' => 0,
                'notifications' => []
            ]);
        }
    }
}

ParentPortalController

<?php

namespace App\Http\Controllers;

use App\Models\Trainee;
use App\Models\Guardian;
use App\Models\SessionEnrollment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class ParentPortalController extends Controller
{
    public function login()
    {
        return view('parent.login');
    }
    
    public function authenticate(Request $request)
    {
        $validated = $request->validate([
            'email' => 'required|email',
            'password' => 'required',
            'trainee_id' => 'required'
        ]);
        
        $guardian = Guardian::where('email', $validated['email'])
            ->where('trainee_id', $validated['trainee_id'])
            ->first();
            
        if (!$guardian || !Hash::check($validated['password'], $guardian->password)) {
            return back()->with('error', 'Invalid credentials');
        }
        
        session([
            'guardian_id' => $guardian->id,
            'guardian_name' => $guardian->name,
            'trainee_id' => $guardian->trainee_id
        ]);
        
        return redirect()->route('parent.dashboard');
    }
    
    public function dashboard()
    {
        $traineeId = session('trainee_id');
        $trainee = Trainee::with(['enrollments.session.activity', 'enrollments.attendance'])
            ->findOrFail($traineeId);
            
        $attendanceStats = $this->calculateAttendanceStats($trainee);
        $upcomingActivities = $this->getUpcomingActivities($trainee);
        $progressReports = $this->getProgressReports($trainee);
        
        return view('parent.dashboard', compact('trainee', 'attendanceStats', 'upcomingActivities', 'progressReports'));
    }
    
    public function viewProgress($activityId)
    {
        $traineeId = session('trainee_id');
        
        $enrollment = SessionEnrollment::with(['session.activity', 'attendance'])
            ->where('trainee_id', $traineeId)
            ->whereHas('session', function($q) use ($activityId) {
                $q->where('activity_id', $activityId);
            })
            ->first();
            
        if (!$enrollment) {
            return redirect()->route('parent.dashboard')
                ->with('error', 'Activity not found');
        }
        
        return view('parent.progress', compact('enrollment'));
    }
    
    private function calculateAttendanceStats($trainee)
    {
        // Similar to trainee dashboard stats
        return [
            'overall_rate' => 85,
            'this_month' => 90,
            'last_month' => 80
        ];
    }
    
    private function getUpcomingActivities($trainee)
    {
        // Get next week's activities
        return $trainee->enrollments->filter(function($enrollment) {
            return $enrollment->session->is_active;
        });
    }
    
    private function getProgressReports($trainee)
    {
        // Get latest progress notes from teachers
        return collect(); // Placeholder
    }
}

ReportController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class ReportController extends Controller
{
    /**
     * Display the reports dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Check role access
        $role = session('role');
        if ($role !== 'admin') {
            Log::warning('Unauthorized access attempt to reports index', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy report categories
        $reportCategories = [
            [
                'id' => 1,
                'name' => 'User Activity',
                'description' => 'Reports on user login times, page visits, and actions.',
                'icon' => 'fa-users'
            ],
            [
                'id' => 2,
                'name' => 'Tainee Progress',
                'description' => 'Reports on trainee attendance and achievement metrics.',
                'icon' => 'fa-graduation-cap'
            ],
            [
                'id' => 3,
                'name' => 'Centre Performance',
                'description' => 'Reports on centre operations, resources, and outcomes.',
                'icon' => 'fa-building'
            ],
            [
                'id' => 4,
                'name' => 'Financial Reports',
                'description' => 'Reports on budgets, expenses, and resource allocation.',
                'icon' => 'fa-chart-line'
            ]
        ];
        
        return view('reports.index', [
            'reportCategories' => $reportCategories
        ]);
    }
    
    /**
     * Show the report generation form.
     *
     * @return \Illuminate\View\View
     */
    public function generate()
    {
        // Check role access
        $role = session('role');
        if ($role !== 'admin') {
            Log::warning('Unauthorized access attempt to report generation', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Report types
        $reportTypes = [
            'user_activity' => 'User Activity Report',
            'trainee_progress' => 'Tainee Progress Report',
            'centre_performance' => 'Centre Performance Report',
            'financial' => 'Financial Report'
        ];
        
        // Centres
        $centres = [
            1 => 'IIUM Gombak Centre',
            2 => 'IIUM Kuantan Centre',
            3 => 'IIUM Pagoh Centre'
        ];
        
        return view('reports.generate', [
            'reportTypes' => $reportTypes,
            'centres' => $centres
        ]);
    }
    
    /**
     * Export a generated report.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function export(Request $request)
    {
        // Check role access
        $role = session('role');
        if ($role !== 'admin') {
            Log::warning('Unauthorized access attempt to export report', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to perform this action');
        }
        
        // Validate input
        $request->validate([
            'report_type' => 'required|string',
            'date_start' => 'required|date',
            'date_end' => 'required|date|after_or_equal:date_start',
            'centre_id' => 'nullable|integer',
            'format' => 'required|in:pdf,excel,csv'
        ]);
        
        // In a real implementation, generate and export the report
        
        Log::info('Report exported', [
            'user_id' => session('id'),
            'report_type' => $request->report_type,
            'format' => $request->format
        ]);
        
        return redirect()->back()
            ->with('success', 'Report exported successfully. Check your downloads folder.');
    }
    
    /**
     * Display supervisor-specific reports dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function supervisorIndex()
    {
        // Check role access
        $role = session('role');
        if ($role !== 'supervisor') {
            Log::warning('Unauthorized access attempt to supervisor reports', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy report categories for supervisors
        $reportCategories = [
            [
                'id' => 1,
                'name' => 'Teacher Performance',
                'description' => 'Reports on teacher activities and performance metrics.',
                'icon' => 'fa-chalkboard-teacher'
            ],
            [
                'id' => 2,
                'name' => 'Tainee Progress',
                'description' => 'Reports on trainee attendance and achievement metrics.',
                'icon' => 'fa-graduation-cap'
            ],
            [
                'id' => 3,
                'name' => 'Class Activities',
                'description' => 'Reports on class activities and curriculum progress.',
                'icon' => 'fa-book'
            ]
        ];
        
        return view('reports.supervisor.index', [
            'reportCategories' => $reportCategories
        ]);
    }
    
    // Other methods for supervisor reports would follow a similar pattern
}

ScheduleHomeController

<?php

namespace App\Http\Controllers;

use App\Models\Courses;
use Illuminate\Http\Request;

class ScheduleHomeController extends Controller
{
    public function index()
    {
        $courses = Courses::with('teacher')->get();
        return view('schedulehome', compact('courses'));
    }
}

SearchController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Users;
use App\Models\Trainees;
use App\Models\Centres;
use Illuminate\Support\Facades\Log;

class SearchController extends Controller
{
    /**
     * Handle the global search functionality
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function search(Request $request)
    {
        // Get the search query
        $query = $request->input('query');

        // Log the search request
        Log::info('Global search initiated', [
            'query' => $query,
            'user_id' => session('id'),
            'role' => session('role')
        ]);

        // Initialize results array
        $results = [];

        try {
            // If query is empty, return empty results
            if (empty($query) || strlen($query) < 2) {
                return response()->json(['results' => $results]);
            }

            // Search for staffs/teachers in Users model
            $users = Users::where(function ($q) use ($query) {
                $q->where('name', 'LIKE', "%{$query}%")
                  ->orWhere('email', 'LIKE', "%{$query}%")
                  ->orWhere('iium_id', 'LIKE', "%{$query}%");
            })
            ->where('status', 'active')
            ->limit(5)
            ->get();

            // Format users results
            foreach ($users as $user) {
                // Get centre name
                $centreName = "Unknown";
                if ($user->centre_id) {
                    $centre = Centres::where('centre_id', $user->centre_id)->first();
                    if ($centre) {
                        $centreName = $centre->centre_name;
                    }
                }

                $results[] = [
                    'id' => $user->id,
                    'name' => $user->name,
                    'type' => ucfirst($user->role),
                    'location' => $centreName,
                    'avatar' => $user->avatar ? asset('storage/avatars/' . $user->avatar) : asset('images/default-avatar.png'),
                    'url' => route($user->role . '.user.view', ['id' => $user->id])
                ];
            }

            // Search for trainees
            $trainees = Trainees::where(function ($q) use ($query) {
                $q->where('trainee_first_name', 'LIKE', "%{$query}%")
                  ->orWhere('trainee_last_name', 'LIKE', "%{$query}%")
                  ->orWhere('trainee_email', 'LIKE', "%{$query}%");
            })
            ->limit(5)
            ->get();

            // Format trainees results
            foreach ($trainees as $trainee) {
                $results[] = [
                    'id' => $trainee->id,
                    'name' => $trainee->trainee_first_name . ' ' . $trainee->trainee_last_name,
                    'type' => 'Trainee',
                    'location' => $trainee->centre_name,
                    'avatar' => $trainee->avatar ? asset('storage/trainee_avatars/' . $trainee->avatar) : asset('images/default-avatar.png'),
                    'url' => route('traineeprofile', ['id' => $trainee->id])
                ];
            }

            // Sort results by name
            usort($results, function($a, $b) {
                return strcmp($a['name'], $b['name']);
            });

            // Limit to max 10 results total
            $results = array_slice($results, 0, 10);

            // Log search results count
            Log::info('Search results generated', [
                'query' => $query,
                'count' => count($results)
            ]);

            // Return results as JSON
            return response()->json(['results' => $results]);

        } catch (\Exception $e) {
            // Log error
            Log::error('Error during global search', [
                'query' => $query,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            // Return empty results on error
            return response()->json(['results' => [], 'error' => 'An error occurred while searching']);
        }
    }

    /**
     * Display the search page for direct navigation
     *
     * @param Request $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        $query = $request->input('query', '');

        // If query is empty, redirect to dashboard
        if (empty($query)) {
            return redirect()->route('dashboard');
        }

        // Return the search view (you can create a dedicated search results page if needed)
        return view('search', [
            'query' => $query
        ]);
    }
}

SessionDebugController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class SessionDebugController extends Controller
{
    /**
     * Display detailed session information for debugging
     */
    public function debug()
    {
        $sessionInfo = [
            'session_id' => session()->getId(),
            'has_user_id' => session()->has('id'),
            'user_id' => session('id'),
            'role' => session('role'),
            'all_session_data' => session()->all(),
            'cookies' => request()->cookies->all(),
            'driver' => config('session.driver'),
            'lifetime' => config('session.lifetime')
        ];
        
        Log::info('Session debug requested', $sessionInfo);
        
        return response()->json($sessionInfo);
    }
    
    /**
     * Test setting a session value
     */
    public function setTest()
    {
        session(['test_key' => 'test_value_' . time()]);
        session()->save();
        
        return response()->json([
            'message' => 'Test session value set',
            'test_key' => session('test_key'),
            'session_id' => session()->getId()
        ]);
    }
}

SettingController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class SettingController extends Controller
{
    /**
     * Display the settings page.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Check role access
        $role = session('role');
        if ($role !== 'admin') {
            Log::warning('Unauthorized access attempt to settings', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        // Dummy settings data
        $settings = [
            'general' => [
                'site_name' => 'CREAMS',
                'site_description' => 'Community-based REhAbilitation Management System',
                'contact_email' => 'admin@creams.edu.my',
                'contact_phone' => '+60 3-6196 4000'
            ],
            'appearance' => [
                'primary_color' => '#32bdea',
                'secondary_color' => '#c850c0',
                'logo_path' => 'images/favicon.png'
            ],
            'security' => [
                'password_expiry_days' => 90,
                'session_timeout_minutes' => 30,
                'allow_registration' => true,
                'require_email_verification' => true
            ],
            'notifications' => [
                'email_notifications' => true,
                'system_notifications' => true,
                'sms_notifications' => false
            ]
        ];
        
        return view('settings.index', [
            'settings' => $settings
        ]);
    }
    
    /**
     * Update the specified settings.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request)
    {
        // Check role access
        $role = session('role');
        if ($role !== 'admin') {
            Log::warning('Unauthorized access attempt to update settings', [
                'user_id' => session('id'),
                'role' => $role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to perform this action');
        }
        
        // Validate input
        $request->validate([
            'site_name' => 'required|string|max:100',
            'site_description' => 'nullable|string|max:255',
            'contact_email' => 'required|email',
            'contact_phone' => 'nullable|string|max:20',
            'primary_color' => 'required|string|max:7',
            'secondary_color' => 'required|string|max:7',
            'password_expiry_days' => 'required|integer|min:0|max:365',
            'session_timeout_minutes' => 'required|integer|min:5|max:120',
            'allow_registration' => 'boolean',
            'require_email_verification' => 'boolean',
            'email_notifications' => 'boolean',
            'system_notifications' => 'boolean',
            'sms_notifications' => 'boolean'
        ]);
        
        // In a real implementation, save settings to database or config files
        
        Log::info('Settings updated', [
            'user_id' => session('id'),
            'settings_updated' => array_keys($request->except('_token'))
        ]);
        
        return redirect()->route('settings')
            ->with('success', 'Settings updated successfully');
    }
}

TeacherController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\Users;
use App\Models\Trainees;
use App\Models\Classes;
use App\Models\Activities;
use App\Models\Attendances;
use App\Models\Notifications;

class TeacherController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('role:teacher');
    }

    /**
     * Display the teacher dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        $teacherId = session('id');
        $centreId = session('centre_id');
        
        Log::info('Teacher accessed dashboard', [
            'teacher_id' => $teacherId,
            'centre_id' => $centreId
        ]);
        
        // Get classes for this teacher
        $classes = Classes::where('teacher_id', $teacherId)
                ->orderBy('name')
                ->get();
        
        // Get upcoming classes for this teacher
        $upcomingClasses = Classes::where('teacher_id', $teacherId)
                        ->where('status', 'active')
                        ->orderBy('start_date')
                        ->take(5)
                        ->get();
        
        // Get today's schedule
        $todaySchedule = $this->getTodaySchedule($teacherId);
        
        // Get trainee statistics
        $traineesCount = $this->getTraineesCount($teacherId);
        $attendanceStats = $this->getAttendanceStats($teacherId);
        
        // Get recent activities
        $recentActivities = Activities::where('teacher_id', $teacherId)
                           ->orderBy('created_at', 'desc')
                           ->take(5)
                           ->get();
        
        // Get unread notifications
        $unreadNotifications = Notifications::where('user_id', $teacherId)
                              ->where('read', false)
                              ->orderBy('created_at', 'desc')
                              ->take(5)
                              ->get();
        
        return view('teacher.dashboard', [
            'classes' => $classes,
            'upcomingClasses' => $upcomingClasses,
            'todaySchedule' => $todaySchedule,
            'traineesCount' => $traineesCount,
            'attendanceStats' => $attendanceStats,
            'recentActivities' => $recentActivities,
            'unreadNotifications' => $unreadNotifications
        ]);
    }
    
    /**
     * Get today's schedule for the teacher.
     *
     * @param int $teacherId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    private function getTodaySchedule($teacherId)
    {
        $dayOfWeek = strtolower(date('l')); // e.g., 'monday', 'tuesday', etc.
        
        // If schedule is stored as JSON in the classes table
        $classes = Classes::where('teacher_id', $teacherId)
                ->where('status', 'active')
                ->get()
                ->filter(function($class) use ($dayOfWeek) {
                    // Assuming schedule is stored as JSON with day keys
                    $schedule = json_decode($class->schedule, true);
                    return isset($schedule[$dayOfWeek]) && $schedule[$dayOfWeek];
                });
        
        return $classes;
    }
    
    /**
     * Get trainees count for the teacher.
     *
     * @param int $teacherId
     * @return array
     */
    private function getTraineesCount($teacherId)
    {
        // Get class IDs for this teacher
        $classIds = Classes::where('teacher_id', $teacherId)
                    ->pluck('id')
                    ->toArray();
        
        // Count trainees in these classes
        $totalTrainees = 0;
        
        if (!empty($classIds)) {
            $totalTrainees = DB::table('class_trainee')
                            ->whereIn('class_id', $classIds)
                            ->distinct('trainee_id')
                            ->count('trainee_id');
        }
        
        // Get active classes count
        $activeClasses = Classes::where('teacher_id', $teacherId)
                        ->where('status', 'active')
                        ->count();
        
        return [
            'total' => $totalTrainees,
            'activeClasses' => $activeClasses
        ];
    }
    
    /**
     * Get attendance statistics for the teacher.
     *
     * @param int $teacherId
     * @return array
     */
    private function getAttendanceStats($teacherId)
    {
        // Get class IDs for this teacher
        $classIds = Classes::where('teacher_id', $teacherId)
                    ->pluck('id')
                    ->toArray();
        
        if (empty($classIds)) {
            return [
                'present' => 0,
                'absent' => 0,
                'excused' => 0,
                'late' => 0,
                'presentPercentage' => '0%'
            ];
        }
        
        // Get attendance records for the last 30 days
        $startDate = now()->subDays(30);
        
        $attendanceStats = Attendances::whereIn('class_id', $classIds)
                        ->where('date', '>=', $startDate)
                        ->select('status', DB::raw('count(*) as count'))
                        ->groupBy('status')
                        ->get()
                        ->pluck('count', 'status')
                        ->toArray();
        
        // Calculate total
        $total = array_sum($attendanceStats);
        
        // Ensure all statuses have a value
        $present = $attendanceStats['present'] ?? 0;
        $absent = $attendanceStats['absent'] ?? 0;
        $excused = $attendanceStats['excused'] ?? 0;
        $late = $attendanceStats['late'] ?? 0;
        
        // Calculate percentage
        $presentPercentage = $total > 0 
            ? round(($present + ($late * 0.5)) / $total * 100) . '%' 
            : '0%';
        
        return [
            'present' => $present,
            'absent' => $absent,
            'excused' => $excused,
            'late' => $late,
            'presentPercentage' => $presentPercentage
        ];
    }

    /**
     * Display a listing of trainees.
     *
     * @return \Illuminate\View\View
     */
    public function trainees()
    {
        $teacherId = session('id');
        
        // Get classes for this teacher
        $classes = Classes::where('teacher_id', $teacherId)->get();
        $classIds = $classes->pluck('id')->toArray();
        
        // Get trainees in these classes
        $trainees = [];
        if (!empty($classIds)) {
            $traineeIds = DB::table('class_trainee')
                        ->whereIn('class_id', $classIds)
                        ->pluck('trainee_id')
                        ->toArray();
            
            if (!empty($traineeIds)) {
                $trainees = Trainees::whereIn('id', $traineeIds)->get();
            }
        }
        
        // Group trainees by class
        $traineesByClass = [];
        foreach ($classes as $class) {
            $classTrainees = $class->trainees ?? collect();
            $traineesByClass[$class->id] = [
                'class' => $class,
                'trainees' => $classTrainees
            ];
        }
        
        return view('teacher.trainees', [
            'trainees' => $trainees,
            'traineesByClass' => $traineesByClass,
            'classes' => $classes
        ]);
    }

    /**
     * Display a listing of classes.
     *
     * @return \Illuminate\View\View
     */
    public function classes()
    {
        $teacherId = session('id');
        
        // Get all classes for this teacher
        $classes = Classes::where('teacher_id', $teacherId)
                ->orderBy('name')
                ->get();
        
        // Group classes by status
        $activeClasses = $classes->where('status', 'active');
        $completedClasses = $classes->where('status', 'completed');
        $cancelledClasses = $classes->where('status', 'cancelled');
        
        return view('teacher.classes.index', [
            'classes' => $classes,
            'activeClasses' => $activeClasses,
            'completedClasses' => $completedClasses,
            'cancelledClasses' => $cancelledClasses
        ]);
    }

    /**
     * Display a specific class.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function viewClass($id)
    {
        $teacherId = session('id');
        
        // Get class and verify teacher has access
        $class = Classes::where('id', $id)
                ->where('teacher_id', $teacherId)
                ->firstOrFail();
        
        // Get trainees in this class
        $trainees = $class->trainees;
        
        // Get recent attendance records
        $recentAttendance = Attendances::where('class_id', $id)
                ->orderBy('date', 'desc')
                ->limit(10)
                ->get()
                ->groupBy('date');
        
        // Get attendance statistics for this class
        $attendanceStats = $this->getClassAttendanceStats($id);
        
        return view('teacher.classes.view', [
            'class' => $class,
            'trainees' => $trainees,
            'recentAttendance' => $recentAttendance,
            'attendanceStats' => $attendanceStats
        ]);
    }

    /**
     * Manage attendance for a class.
     *
     * @param int $classId
     * @return \Illuminate\View\View
     */
    public function manageAttendance($classId)
    {
        $teacherId = session('id');
        
        // Verify teacher has access to this class
        $class = Classes::where('id', $classId)
                ->where('teacher_id', $teacherId)
                ->firstOrFail();
        
        // Get trainees in this class
        $trainees = $class->trainees;
        
        // Get today's date for default attendance form
        $today = now()->format('Y-m-d');
        
        // Check if attendance has already been recorded for today
        $existingAttendance = Attendances::where('class_id', $classId)
                            ->where('date', $today)
                            ->exists();
        
        // Get recent attendance records for this class
        $recentAttendance = Attendances::where('class_id', $classId)
                            ->orderBy('date', 'desc')
                            ->limit(10)
                            ->get()
                            ->groupBy('date');
        
        return view('teacher.attendance.manage', [
            'class' => $class,
            'trainees' => $trainees,
            'today' => $today,
            'existingAttendance' => $existingAttendance,
            'recentAttendance' => $recentAttendance
        ]);
    }

    /**
     * Record attendance for a class.
     *
     * @param Request $request
     * @param int $classId
     * @return \Illuminate\Http\RedirectResponse
     */
    public function recordAttendance(Request $request, $classId)
    {
        $teacherId = session('id');
        
        // Verify teacher has access to this class
        $class = Classes::where('id', $classId)
                ->where('teacher_id', $teacherId)
                ->firstOrFail();
        
        // Validate request
        $validated = $request->validate([
            'date' => 'required|date',
            'attendance' => 'required|array',
            'attendance.*' => 'required|in:present,absent,excused,late'
        ]);
        
        $date = $validated['date'];
        $attendanceData = $validated['attendance'];
        
        // Begin transaction
        DB::beginTransaction();
        
        try {
            // Delete any existing attendance records for this date
            Attendances::where('class_id', $classId)
                    ->where('date', $date)
                    ->delete();
            
            // Create new attendance records
            foreach ($attendanceData as $traineeId => $status) {
                $attendance = new Attendances();
                $attendance->trainee_id = $traineeId;
                $attendance->class_id = $classId;
                $attendance->date = $date;
                $attendance->status = $status;
                $attendance->marked_by = $teacherId;
                $attendance->save();
            }
            
            DB::commit();
            
            return redirect()->route('teacher.attendance.manage', ['classId' => $classId])
                ->with('success', 'Attendance recorded successfully');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error recording attendance', [
                'teacher_id' => $teacherId,
                'class_id' => $classId,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->back()
                ->with('error', 'An error occurred while recording attendance')
                ->withInput();
        }
    }

    /**
     * View specific trainee details.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function viewTrainee($id)
    {
        $teacherId = session('id');
        
        // Get trainee
        $trainee = Trainees::findOrFail($id);
        
        // Check if this teacher has access to this trainee
        $hasAccess = $this->teacherHasAccessToTrainee($teacherId, $id);
        
        if (!$hasAccess) {
            return redirect()->route('teacher.trainees')
                ->with('error', 'You do not have permission to view this trainee');
        }
        
        // Get trainee's classes
        $classes = Classes::where('teacher_id', $teacherId)
                    ->whereHas('trainees', function($query) use ($id) {
                        $query->where('trainees.id', $id);
                    })
                    ->get();
        
        // Get attendance records
        $attendance = Attendances::where('trainee_id', $id)
                    ->whereIn('class_id', $classes->pluck('id')->toArray())
                    ->orderBy('date', 'desc')
                    ->take(30)
                    ->get();
        
        // Calculate attendance statistics
        $attendanceStats = [
            'present' => $attendance->where('status', 'present')->count(),
            'absent' => $attendance->where('status', 'absent')->count(),
            'late' => $attendance->where('status', 'late')->count(),
            'excused' => $attendance->where('status', 'excused')->count(),
        ];
        
        $totalAttendance = $attendance->count();
        $attendanceStats['presentPercentage'] = $totalAttendance > 0 
            ? round(($attendanceStats['present'] + ($attendanceStats['late'] * 0.5)) / $totalAttendance * 100) . '%' 
            : '0%';
        
        return view('teacher.trainee.view', [
            'trainee' => $trainee,
            'classes' => $classes,
            'attendance' => $attendance,
            'attendanceStats' => $attendanceStats
        ]);
    }

    /**
     * Check if teacher has access to trainee.
     *
     * @param int $teacherId
     * @param int $traineeId
     * @return bool
     */
    private function teacherHasAccessToTrainee($teacherId, $traineeId)
    {
        // Get class IDs for this teacher
        $classIds = Classes::where('teacher_id', $teacherId)
                    ->pluck('id')
                    ->toArray();
        
        if (empty($classIds)) {
            return false;
        }
        
        // Check if trainee is in any of these classes
        $count = DB::table('class_trainee')
                ->whereIn('class_id', $classIds)
                ->where('trainee_id', $traineeId)
                ->count();
        
        return $count > 0;
    }

    /**
     * Get attendance statistics for a specific class.
     *
     * @param int $classId
     * @return array
     */
    private function getClassAttendanceStats($classId)
    {
        // Get attendance records for the last 30 days
        $startDate = now()->subDays(30);
        
        $attendanceStats = Attendances::where('class_id', $classId)
                        ->where('date', '>=', $startDate)
                        ->select('status', DB::raw('count(*) as count'))
                        ->groupBy('status')
                        ->get()
                        ->pluck('count', 'status')
                        ->toArray();
        
        // Calculate total
        $total = array_sum($attendanceStats);
        
        // Ensure all statuses have a value
        $present = $attendanceStats['present'] ?? 0;
        $absent = $attendanceStats['absent'] ?? 0;
        $excused = $attendanceStats['excused'] ?? 0;
        $late = $attendanceStats['late'] ?? 0;
        
        // Calculate percentage
        $presentPercentage = $total > 0 
            ? round(($present + ($late * 0.5)) / $total * 100) . '%' 
            : '0%';
        
        return [
            'present' => $present,
            'absent' => $absent,
            'excused' => $excused,
            'late' => $late,
            'total' => $total,
            'presentPercentage' => $presentPercentage
        ];
    }
}

TeacherDashboardController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\Users;
use App\Models\Classes;
use App\Models\Trainees;
use App\Models\Activities;
use App\Models\Attendances;
use App\Models\Notifications;

class TeacherDashboardController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('role:teacher');
    }

    /**
     * Display the teacher dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        $teacherId = session('id');
        $centreId = session('centre_id');
        
        Log::info('Teacher accessed dashboard', [
            'teacher_id' => $teacherId,
            'centre_id' => $centreId
        ]);
        
        $data = [
            'todayClasses' => $this->getTodayClasses($teacherId),
            'upcomingClasses' => $this->getUpcomingClasses($teacherId),
            'recentTrainees' => $this->getRecentTrainees($teacherId),
            'traineeSummary' => $this->getTraineeSummary($teacherId),
            'attendanceSummary' => $this->getAttendanceSummary($teacherId),
            'recentActivities' => $this->getRecentActivities($teacherId),
            'notifications' => $this->getNotifications($teacherId)
        ];
        
        return view('teacher.dashboard', $data);
    }
    
    /**
     * Get today's classes.
     *
     * @param int $teacherId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    private function getTodayClasses($teacherId)
    {
        $today = now()->format('Y-m-d');
        $dayOfWeek = strtolower(now()->format('l')); // e.g., 'monday'
        
        return Classes::where('teacher_id', $teacherId)
            ->where('status', 'active')
            ->where(function($query) use ($today, $dayOfWeek) {
                $query->whereDate('start_date', '<=', $today)
                      ->whereDate('end_date', '>=', $today);
            })
            ->get()
            ->filter(function($class) use ($dayOfWeek) {
                $schedule = json_decode($class->schedule, true) ?? [];
                return isset($schedule[$dayOfWeek]) && $schedule[$dayOfWeek];
            });
    }
    
    /**
     * Get upcoming classes.
     *
     * @param int $teacherId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    private function getUpcomingClasses($teacherId)
    {
        $today = now()->format('Y-m-d');
        $nextWeek = now()->addDays(7)->format('Y-m-d');
        
        return Classes::where('teacher_id', $teacherId)
            ->where('status', 'active')
            ->where(function($query) use ($today, $nextWeek) {
                $query->whereDate('start_date', '>=', $today)
                      ->whereDate('start_date', '<=', $nextWeek);
            })
            ->orderBy('start_date')
            ->limit(5)
            ->get();
    }
    
    /**
     * Get recent trainees.
     *
     * @param int $teacherId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    private function getRecentTrainees($teacherId)
    {
        $classIds = Classes::where('teacher_id', $teacherId)
                  ->pluck('id')
                  ->toArray();
        
        if (empty($classIds)) {
            return collect();
        }
        
        $traineeIds = DB::table('class_trainee')
                    ->whereIn('class_id', $classIds)
                    ->pluck('trainee_id')
                    ->toArray();
        
        return Trainees::whereIn('id', $traineeIds)
               ->orderBy('created_at', 'desc')
               ->limit(5)
               ->get();
    }
    
    /**
     * Get trainee summary.
     *
     * @param int $teacherId
     * @return array
     */
    private function getTraineeSummary($teacherId)
    {
        $classIds = Classes::where('teacher_id', $teacherId)
                  ->pluck('id')
                  ->toArray();
        
        if (empty($classIds)) {
            return [
                'total' => 0,
                'byCondition' => [],
                'activeClasses' => 0
            ];
        }
        
        $traineeIds = DB::table('class_trainee')
                    ->whereIn('class_id', $classIds)
                    ->distinct('trainee_id')
                    ->pluck('trainee_id')
                    ->toArray();
        
        $trainees = Trainees::whereIn('id', $traineeIds)->get();
        
        $byCondition = $trainees->groupBy('trainee_condition')
                      ->map(function($group) {
                          return $group->count();
                      });
        
        $activeClasses = Classes::where('teacher_id', $teacherId)
                        ->where('status', 'active')
                        ->count();
        
        return [
            'total' => count($traineeIds),
            'byCondition' => $byCondition,
            'activeClasses' => $activeClasses
        ];
    }
    
    /**
     * Get attendance summary.
     *
     * @param int $teacherId
     * @return array
     */
    private function getAttendanceSummary($teacherId)
    {
        $classIds = Classes::where('teacher_id', $teacherId)
                  ->pluck('id')
                  ->toArray();
        
        if (empty($classIds)) {
            return [
                'present' => 0,
                'absent' => 0,
                'excused' => 0,
                'late' => 0,
                'total' => 0,
                'rate' => '0%'
            ];
        }
        
        $lastMonth = now()->subDays(30)->format('Y-m-d');
        
        $attendanceStats = Attendances::whereIn('class_id', $classIds)
                         ->where('date', '>=', $lastMonth)
                         ->select('status', DB::raw('count(*) as count'))
                         ->groupBy('status')
                         ->get()
                         ->pluck('count', 'status')
                         ->toArray();
        
        $present = $attendanceStats['present'] ?? 0;
        $absent = $attendanceStats['absent'] ?? 0;
        $excused = $attendanceStats['excused'] ?? 0;
        $late = $attendanceStats['late'] ?? 0;
        $total = $present + $absent + $excused + $late;
        
        $rate = $total > 0 
              ? round(($present + ($late * 0.5)) / $total * 100) . '%' 
              : '0%';
        
        return [
            'present' => $present,
            'absent' => $absent,
            'excused' => $excused,
            'late' => $late,
            'total' => $total,
            'rate' => $rate
        ];
    }
    
    /**
     * Get recent activities.
     *
     * @param int $teacherId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    private function getRecentActivities($teacherId)
    {
        return Activities::where('teacher_id', $teacherId)
               ->orderBy('created_at', 'desc')
               ->limit(5)
               ->get();
    }
    
    /**
     * Get notifications.
     *
     * @param int $teacherId
     * @return array
     */
    private function getNotifications($teacherId)
    {
        // Try to get notifications from the database
        try {
            if (DB::getSchemaBuilder()->hasTable('notifications')) {
                $unread = Notifications::where('user_id', $teacherId)
                         ->where('user_type', 'teacher')
                         ->where('read', false)
                         ->orderBy('created_at', 'desc')
                         ->limit(5)
                         ->get();
                
                $count = Notifications::where('user_id', $teacherId)
                        ->where('user_type', 'teacher')
                        ->where('read', false)
                        ->count();
                
                return [
                    'unread' => $unread,
                    'count' => $count
                ];
            }
        } catch (\Exception $e) {
            Log::error('Error fetching notifications', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
        }
        
        // Return empty notifications if there was an error or the table doesn't exist
        return [
            'unread' => collect(),
            'count' => 0
        ];
    }
}

TeacherHomeController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Models\Users;
use App\Models\Centres;

class TeachersHomeController extends Controller
{
    /**
     * Display the main teachers/staff home page with filtering capabilities
     *
     * @param Request $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        try {
            // Get query parameters for filtering
            $roleFilter = $request->query('role');
            $activityFilter = $request->query('activity');
            $centreFilter = $request->query('centre');
            $searchTerm = $request->query('search');
            
            // Start with base query
            $query = Users::select(
                'id', 
                'name as user_name', 
                'role', 
                'user_activity_1', 
                'user_activity_2', 
                'avatar',
                'centre_id',
                'email',
                'status',
                'created_at'
            );
            
            // Apply filters if provided
            if ($roleFilter) {
                $query->where('role', $roleFilter);
            }
            
            if ($activityFilter) {
                $query->where('user_activity_1', $activityFilter);
            }
            
            if ($centreFilter) {
                $query->where('centre_id', $centreFilter);
            }
            
            if ($searchTerm) {
                $query->where(function($q) use ($searchTerm) {
                    $q->where('name', 'like', "%{$searchTerm}%")
                      ->orWhere('email', 'like', "%{$searchTerm}%")
                      ->orWhere('user_activity_1', 'like', "%{$searchTerm}%")
                      ->orWhere('user_activity_2', 'like', "%{$searchTerm}%");
                });
            }
            
            // Only get active users
            $query->where('status', 'active');
            
            // Order by role, then activity
            $query->orderBy('role', 'asc')
                  ->orderBy('user_activity_1', 'asc');
            
            // Get the data
            $users = $query->get();
            
            // You need to ensure user_activity_1 is populated for proper grouping
            // If it's not populated, you might need to set a default value
            $users = $users->map(function($user) {
                if (empty($user->user_activity_1)) {
                    $user->user_activity_1 = 'General';
                }
                
                // Add the centre name by joining with centres table (if available)
                try {
                    if (!empty($user->centre_id)) {
                        $centre = Centres::where('centre_id', $user->centre_id)->first();
                        $user->centre_name = $centre ? $centre->centre_name : 'Unknown';
                    } else {
                        $user->centre_name = 'Not Assigned';
                    }
                } catch (\Exception $e) {
                    $user->centre_name = 'Unknown';
                    Log::error('Error fetching centre details: ' . $e->getMessage());
                }
                
                return $user;
            });
            
            // Get distinct activity and role values for filters
            $activities = $users->pluck('user_activity_1')->unique()->filter()->sort()->values();
            $roles = $users->pluck('role')->unique()->sort()->values();
            
            // Get centres for filter dropdown
            try {
                $centres = Centres::where('centre_status', 'active')
                    ->orWhere('status', 'active') // Try both column names
                    ->get(['centre_id', 'centre_name']);
            } catch (\Exception $e) {
                $centres = collect(); // Empty collection if error
                Log::error('Error fetching centres: ' . $e->getMessage());
            }
            
            // Statistics for dashboard
            $stats = [
                'total_users' => $users->count(),
                'teachers_count' => $users->where('role', 'teacher')->count(),
                'supervisors_count' => $users->where('role', 'supervisor')->count(),
                'admins_count' => $users->where('role', 'admin')->count(),
                'ajks_count' => $users->where('role', 'ajk')->count(),
                'activity_breakdown' => $users->groupBy('user_activity_1')
                    ->map(function ($group) {
                        return $group->count();
                    })->toArray(),
                'centre_breakdown' => $users->groupBy('centre_name')
                    ->map(function ($group) {
                        return $group->count();
                    })->toArray(),
            ];
            
            // Get current user's role for permission checks in the view
            $currentUserRole = session('role') ?? 'teacher';
            
            // Return view with data and filters
            return view('teachershome', [
                'users' => $users,
                'activities' => $activities,
                'roles' => $roles,
                'centres' => $centres,
                'stats' => $stats,
                'currentUserRole' => $currentUserRole,
                'filters' => [
                    'role' => $roleFilter,
                    'activity' => $activityFilter,
                    'centre' => $centreFilter,
                    'search' => $searchTerm,
                ]
            ]);
        } catch (\Exception $e) {
            // Log the error
            Log::error('Error in TeachersHomeController@index: ' . $e->getMessage());
            
            // Return a fallback view with error message
            return view('teachershome', [
                'error' => 'An error occurred while loading the staff list. Please try again later.',
                'users' => collect(), // Empty collection
                'activities' => collect(),
                'roles' => collect(),
                'centres' => collect(),
                'stats' => [],
                'currentUserRole' => session('role') ?? 'teacher',
                'filters' => []
            ]);
        }
    }

    /**
     * Display the user profile update page
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function updateuserpage(Request $request, $id)
    {
        try {
            // Get user with ID
            $user = Users::findOrFail($id);
            
            // Get centres for dropdown
            $centres = Centres::where('centre_status', 'active')
                ->orWhere('status', 'active') // Try both column names
                ->get(['centre_id', 'centre_name']);
            
            // Check if current user has permission to edit this user
            $canEdit = $this->checkEditPermission($user);
            
            // Get current user's role for permission checks in the view
            $currentUserRole = session('role') ?? 'teacher';
            
            // Return view with data
            return view('updateuserprofile', [
                'user' => $user,
                'centres' => $centres,
                'canEdit' => $canEdit,
                'currentUserRole' => $currentUserRole
            ]);
        } catch (\Exception $e) {
            // Log the error
            Log::error('Error in TeachersHomeController@updateuserpage: ' . $e->getMessage());
            
            // Redirect back with error message
            return redirect()->route('teachershome')
                ->with('error', 'Unable to find user with ID: ' . $id);
        }
    }
    
    /**
     * Update user profile information
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateuser(Request $request, $id)
    {
        try {
            // Get user with ID
            $user = Users::findOrFail($id);
            
            // Check if current user has permission to edit this user
            if (!$this->checkEditPermission($user)) {
                return redirect()->route('teachershome')
                    ->with('error', 'You do not have permission to edit this user.');
            }
            
            // Validate request data
            $validatedData = $request->validate([
                'name' => 'required|string|max:255',
                'email' => 'required|email|unique:users,email,' . $id,
                'user_activity_1' => 'nullable|string|max:255',
                'user_activity_2' => 'nullable|string|max:255',
                'centre_id' => 'nullable|string|exists:centres,centre_id',
                'status' => 'nullable|in:active,inactive',
            ]);
            
            // Update user with validated data
            $user->update($validatedData);
            
            // Redirect back with success message
            return redirect()->route('updateuser', ['id' => $id])
                ->with('success', 'User profile updated successfully.');
        } catch (\Illuminate\Validation\ValidationException $e) {
            // Redirect back with validation errors
            return redirect()->back()->withErrors($e->errors())->withInput();
        } catch (\Exception $e) {
            // Log the error
            Log::error('Error in TeachersHomeController@updateuser: ' . $e->getMessage());
            
            // Redirect back with error message
            return redirect()->back()
                ->with('error', 'An error occurred while updating the user profile. Please try again later.')
                ->withInput();
        }
    }
    
    /**
     * Filter staff list with AJAX
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function filter(Request $request)
    {
        try {
            // Get filter parameters
            $roleFilter = $request->input('role');
            $activityFilter = $request->input('activity');
            $centreFilter = $request->input('centre');
            $searchTerm = $request->input('search');
            
            // Start with base query
            $query = Users::select(
                'id', 
                'name as user_name', 
                'role', 
                'user_activity_1', 
                'user_activity_2', 
                'avatar',
                'centre_id',
                'status'
            );
            
            // Apply filters if provided
            if ($roleFilter) {
                $query->where('role', $roleFilter);
            }
            
            if ($activityFilter) {
                $query->where('user_activity_1', $activityFilter);
            }
            
            if ($centreFilter) {
                $query->where('centre_id', $centreFilter);
            }
            
            if ($searchTerm) {
                $query->where(function($q) use ($searchTerm) {
                    $q->where('name', 'like', "%{$searchTerm}%")
                      ->orWhere('email', 'like', "%{$searchTerm}%")
                      ->orWhere('user_activity_1', 'like', "%{$searchTerm}%")
                      ->orWhere('user_activity_2', 'like', "%{$searchTerm}%");
                });
            }
            
            // Only get active users
            $query->where('status', 'active');
            
            // Order by role, then activity
            $query->orderBy('role', 'asc')
                  ->orderBy('user_activity_1', 'asc');
            
            // Get the data
            $users = $query->get();
            
            // Map users to include centre name and default activity
            $users = $users->map(function($user) {
                if (empty($user->user_activity_1)) {
                    $user->user_activity_1 = 'General';
                }
                
                try {
                    if (!empty($user->centre_id)) {
                        $centre = Centres::where('centre_id', $user->centre_id)->first();
                        $user->centre_name = $centre ? $centre->centre_name : 'Unknown';
                    } else {
                        $user->centre_name = 'Not Assigned';
                    }
                } catch (\Exception $e) {
                    $user->centre_name = 'Unknown';
                }
                
                return $user;
            });
            
            // Return JSON response
            return response()->json([
                'success' => true,
                'users' => $users,
                'count' => $users->count(),
                'filters' => [
                    'role' => $roleFilter,
                    'activity' => $activityFilter,
                    'centre' => $centreFilter,
                    'search' => $searchTerm,
                ]
            ]);
        } catch (\Exception $e) {
            // Log the error
            Log::error('Error in TeachersHomeController@filter: ' . $e->getMessage());
            
            // Return error response
            return response()->json([
                'success' => false,
                'message' => 'An error occurred while filtering the staff list.',
                'error' => $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * Check if current user has permission to edit the target user
     *
     * @param Users $targetUser
     * @return bool
     */
    private function checkEditPermission($targetUser)
    {
        $currentUserRole = session('role') ?? 'teacher';
        $targetUserRole = $targetUser->role;
        
        // Role hierarchy for permission check
        $roleHierarchy = [
            'admin' => 4,
            'supervisor' => 3,
            'ajk' => 2,
            'teacher' => 1
        ];
        
        // Get hierarchy levels
        $currentUserLevel = $roleHierarchy[$currentUserRole] ?? 0;
        $targetUserLevel = $roleHierarchy[$targetUserRole] ?? 0;
        
        // User can only edit users with lower or equal hierarchy level
        return $currentUserLevel >= $targetUserLevel;
    }
}

TrademarkController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class TrademarkController extends Controller
{
    public function index()
    {
        return view('trademarks');
    }
}


TraineeController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Trainees;
use App\Models\Centres;
use App\Models\Activities;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;

class TraineeController extends Controller
{
    /**
     * Display a listing of all trainees.
     *
     * @return \Illuminate\View\View
     */
        // In TraineeController.php
    public function index()
    {
        // Get user role
        $role = session('role');
        Log::info('Trainees index accessed', [
            'user_id' => session('id'),
            'role' => $role
        ]);
        
        // Get trainees data
        $trainees = Trainees::all();
        $traineesByCenter = $trainees->groupBy('centre_name');
        $centres = Centres::where('status', 'active')->get();
        $totalTrainees = $trainees->count();
        $conditionTypes = $trainees->pluck('trainee_condition')->unique()->count();
        $newTraineesCount = $trainees->where('created_at', '>=', now()->subDays(30))->count();
        
        // Return the home view instead of index view
        return view('trainees.home', [
            'trainees' => $trainees,
            'traineesByCenter' => $traineesByCenter,
            'centres' => $centres,
            'totalTrainees' => $totalTrainees,
            'conditionTypes' => $conditionTypes,
            'newTraineesCount' => $newTraineesCount
        ]);
    }

    /**
     * Show the form for creating a new trainee.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        $centers = Centers::where('status', 'active')->get();
        
        return view('trainees.create', [
            'centers' => $centers
        ]);
    }

    /**
     * Store a newly created trainee in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        // Validate input
        $validatedData = $request->validate([
            'trainee_first_name' => 'required|string|max:255',
            'trainee_last_name' => 'required|string|max:255',
            'trainee_email' => 'required|email|unique:trainees,trainee_email',
            'trainee_phone_number' => 'required|string|max:20',
            'trainee_date_of_birth' => 'required|date',
            'trainee_avatar' => 'nullable|image|max:2048',
            'centre_name' => 'required|string|max:255',
            'trainee_condition' => 'required|string|max:255',
        ]);
        
        $trainee = new Trainees();
        $trainee->trainee_first_name = $validatedData['trainee_first_name'];
        $trainee->trainee_last_name = $validatedData['trainee_last_name'];
        $trainee->trainee_email = $validatedData['trainee_email'];
        $trainee->trainee_phone_number = $validatedData['trainee_phone_number'];
        $trainee->trainee_date_of_birth = $validatedData['trainee_date_of_birth'];
        $trainee->centre_name = $validatedData['centre_name'];
        $trainee->trainee_condition = $validatedData['trainee_condition'];
        $trainee->trainee_attendance = 0; // Default attendance value
        
        // Handle avatar upload
        if ($request->hasFile('trainee_avatar')) {
            $avatar = $request->file('trainee_avatar');
            $avatarName = time() . '_' . $avatar->getClientOriginalName();
            $avatarPath = $avatar->storeAs('trainee_avatars', $avatarName, 'public');
            $trainee->trainee_avatar = 'storage/' . $avatarPath;
        } else {
            // Set default avatar
            $trainee->trainee_avatar = 'images/default-avatar.jpg';
        }
        
        $trainee->save();
        
        Log::info('Trainee created successfully', [
            'user_id' => session('id'),
            'trainee_id' => $trainee->id
        ]);
        
        return redirect()->route('trainees.index')
            ->with('success', 'Trainee registered successfully!');
    }

    /**
     * Display the specified trainee profile.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        $trainee = Trainees::findOrFail($id);
        $activities = Activities::where('trainee_id', $id)
                              ->orderBy('activity_date', 'desc')
                              ->get();
        
        return view('trainees.show', [
            'trainee' => $trainee,
            'activities' => $activities
        ]);
    }

    /**
     * Show the form for editing the specified trainee.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        $trainee = Trainees::findOrFail($id);
        $centers = Centers::where('status', 'active')->get();
        
        return view('trainees.edit', [
            'trainee' => $trainee,
            'centers' => $centers
        ]);
    }

    /**
     * Update the specified trainee in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request, $id)
    {
        $trainee = Trainees::findOrFail($id);
        
        // Validate input
        $validatedData = $request->validate([
            'trainee_first_name' => 'required|string|max:255',
            'trainee_last_name' => 'required|string|max:255',
            'trainee_email' => [
                'required',
                'email',
                Rule::unique('trainees', 'trainee_email')->ignore($id)
            ],
            'trainee_phone_number' => 'required|string|max:20',
            'trainee_date_of_birth' => 'required|date',
            'trainee_avatar' => 'nullable|image|max:2048',
            'centre_name' => 'required|string|max:255',
            'trainee_condition' => 'required|string|max:255',
        ]);
        
        $trainee->trainee_first_name = $validatedData['trainee_first_name'];
        $trainee->trainee_last_name = $validatedData['trainee_last_name'];
        $trainee->trainee_email = $validatedData['trainee_email'];
        $trainee->trainee_phone_number = $validatedData['trainee_phone_number'];
        $trainee->trainee_date_of_birth = $validatedData['trainee_date_of_birth'];
        $trainee->centre_name = $validatedData['centre_name'];
        $trainee->trainee_condition = $validatedData['trainee_condition'];
        
        // Handle avatar upload
        if ($request->hasFile('trainee_avatar')) {
            // Remove old avatar if exists and not default
            if ($trainee->trainee_avatar && 
                !str_contains($trainee->trainee_avatar, 'default-avatar') && 
                Storage::disk('public')->exists(str_replace('storage/', '', $trainee->trainee_avatar))) {
                Storage::disk('public')->delete(str_replace('storage/', '', $trainee->trainee_avatar));
            }
            
            $avatar = $request->file('trainee_avatar');
            $avatarName = time() . '_' . $avatar->getClientOriginalName();
            $avatarPath = $avatar->storeAs('trainee_avatars', $avatarName, 'public');
            $trainee->trainee_avatar = 'storage/' . $avatarPath;
        }
        
        $trainee->save();
        
        Log::info('Trainee updated successfully', [
            'user_id' => session('id'),
            'trainee_id' => $trainee->id
        ]);
        
        return redirect()->route('trainees.show', $trainee->id)
            ->with('success', 'Trainee profile updated successfully!');
    }

    /**
     * Remove the specified trainee from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        $trainee = Trainees::findOrFail($id);
        
        // Remove avatar file if exists and not the default
        if ($trainee->trainee_avatar && 
            !str_contains($trainee->trainee_avatar, 'default-avatar') && 
            Storage::disk('public')->exists(str_replace('storage/', '', $trainee->trainee_avatar))) {
            Storage::disk('public')->delete(str_replace('storage/', '', $trainee->trainee_avatar));
        }
        
        // Delete related activities
        Activities::where('trainee_id', $id)->delete();
        
        // Delete the trainee
        $trainee->delete();
        
        Log::info('Trainee deleted successfully', [
            'user_id' => session('id'),
            'trainee_id' => $id
        ]);
        
        return redirect()->route('trainees.index')
            ->with('success', 'Trainee deleted successfully!');
    }
    
    /**
     * Display trainees by center.
     *
     * @return \Illuminate\View\View
     */
    public function byCenter()
    {
        $trainees = Trainees::all();
        $traineesByCenter = $trainees->groupBy('centre_name');
        $centers = Centers::where('status', 'active')->get();
        
        return view('trainees.by-center', [
            'traineesByCenter' => $traineesByCenter,
            'centers' => $centers
        ]);
    }
    
    /**
     * Search trainees by criteria.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\View\View
     */
    public function search(Request $request)
    {
        $query = Trainees::query();
        
        if ($request->filled('keyword')) {
            $keyword = $request->input('keyword');
            $query->where(function($q) use ($keyword) {
                $q->where('trainee_first_name', 'like', "%{$keyword}%")
                  ->orWhere('trainee_last_name', 'like', "%{$keyword}%")
                  ->orWhere('trainee_email', 'like', "%{$keyword}%");
            });
        }
        
        if ($request->filled('center')) {
            $query->where('centre_name', $request->input('center'));
        }
        
        if ($request->filled('condition')) {
            $query->where('trainee_condition', $request->input('condition'));
        }
        
        $trainees = $query->get();
        $centers = Centers::where('status', 'active')->get();
        $conditions = Trainees::select('trainee_condition')->distinct()->pluck('trainee_condition');
        
        return view('trainees.search', [
            'trainees' => $trainees,
            'centers' => $centers,
            'conditions' => $conditions,
            'searchParams' => $request->all()
        ]);
    }
    
    /**
     * Export trainees data to CSV.
     *
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public function export()
    {
        $trainees = Trainees::all();
        $fileName = 'trainees_' . Carbon::now()->format('Y-m-d') . '.csv';
        
        $headers = array(
            "Content-type" => "text/csv",
            "Content-Disposition" => "attachment; filename=$fileName",
            "Pragma" => "no-cache",
            "Cache-Control" => "must-revalidate, post-check=0, pre-check=0",
            "Expires" => "0"
        );
        
        $columns = ['ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Birth Date', 'Age', 'Center', 'Condition'];
        
        $callback = function() use($trainees, $columns) {
            $file = fopen('php://output', 'w');
            fputcsv($file, $columns);
            
            foreach ($trainees as $trainee) {
                $age = Carbon::parse($trainee->trainee_date_of_birth)->age;
                
                $row = [
                    $trainee->id,
                    $trainee->trainee_first_name,
                    $trainee->trainee_last_name,
                    $trainee->trainee_email,
                    $trainee->trainee_phone_number,
                    $trainee->trainee_date_of_birth,
                    $age,
                    $trainee->centre_name,
                    $trainee->trainee_condition,
                ];
                
                fputcsv($file, $row);
            }
            
            fclose($file);
        };
        
        Log::info('Trainees data exported', [
            'user_id' => session('id'),
            'count' => $trainees->count()
        ]);
        
        return response()->stream($callback, 200, $headers);
    }
}

TraineeActivityController

<?php

namespace App\Http\Controllers;

use App\Models\ActivityEnrollment;
use App\Models\ActivitySession;
use App\Models\ActivityAttendance;
use App\Models\Trainee;
use App\Models\TraineeProgress;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class TraineeActivityController extends Controller
{
    /**
     * Display trainee's activity dashboard
     */
    public function dashboard($traineeId)
    {
        try {
            $trainee = Trainee::with(['centre'])->findOrFail($traineeId);
            
            // Check if user has permission to view this trainee
            if (!$this->canViewTrainee($trainee)) {
                return redirect()->route('trainees.home')
                    ->with('error', 'You do not have permission to view this trainee.');
            }

            // Get active enrollments with sessions and activities
            $activeEnrollments = ActivityEnrollment::where('trainee_id', $traineeId)
                ->where('enrollment_status', 'active')
                ->with(['activitySession.activity', 'activitySession.teacher'])
                ->get();

            // Get recent attendance
            $recentAttendance = ActivityAttendance::where('trainee_id', $traineeId)
                ->with(['activitySession.activity'])
                ->orderBy('attendance_date', 'desc')
                ->limit(10)
                ->get();

            // Calculate statistics
            $stats = $this->calculateTraineeStats($traineeId);

            // Get upcoming sessions
            $upcomingSessions = $this->getUpcomingSessions($traineeId);

            return view('trainees.activity-dashboard', compact(
                'trainee',
                'activeEnrollments',
                'recentAttendance',
                'stats',
                'upcomingSessions'
            ));

        } catch (\Exception $e) {
            Log::error('Error loading trainee activity dashboard', [
                'trainee_id' => $traineeId,
                'error' => $e->getMessage(),
                'user' => session('name')
            ]);

            return redirect()->route('trainees.home')
                ->with('error', 'Error loading trainee dashboard.');
        }
    }

    /**
     * Show available activities for enrollment
     */
    public function availableActivities($traineeId)
    {
        try {
            $trainee = Trainee::findOrFail($traineeId);
            
            if (!$this->canEnrollTrainee($trainee)) {
                return redirect()->back()
                    ->with('error', 'You do not have permission to enroll this trainee.');
            }

            // Get currently enrolled session IDs
            $enrolledSessionIds = ActivityEnrollment::where('trainee_id', $traineeId)
                ->whereIn('enrollment_status', ['active', 'pending'])
                ->pluck('activity_session_id')
                ->toArray();

            // Get available sessions (not at capacity, not already enrolled)
            $availableSessions = ActivitySession::where('is_active', true)
                ->whereNotIn('id', $enrolledSessionIds)
                ->whereRaw('current_enrollment < max_capacity')
                ->with(['activity', 'teacher'])
                ->get()
                ->groupBy('activity.category');

            return view('trainees.available-activities', compact(
                'trainee',
                'availableSessions'
            ));

        } catch (\Exception $e) {
            Log::error('Error loading available activities', [
                'trainee_id' => $traineeId,
                'error' => $e->getMessage()
            ]);

            return redirect()->back()
                ->with('error', 'Error loading available activities.');
        }
    }

    /**
     * Enroll trainee in an activity session
     */
    public function enroll(Request $request, $traineeId)
    {
        $request->validate([
            'activity_session_id' => 'required|exists:activity_sessions,id',
            'start_date' => 'required|date|after_or_equal:today',
            'individual_goals' => 'nullable|array',
            'enrollment_notes' => 'nullable|string|max:1000'
        ]);

        try {
            DB::beginTransaction();

            $trainee = Trainee::findOrFail($traineeId);
            $session = ActivitySession::findOrFail($request->activity_session_id);

            // Check if trainee can be enrolled
            if (!$this->canEnrollTrainee($trainee)) {
                throw new \Exception('You do not have permission to enroll this trainee.');
            }

            // Check session capacity
            if ($session->current_enrollment >= $session->max_capacity) {
                throw new \Exception('This session is at full capacity.');
            }

            // Check for existing enrollment
            $existingEnrollment = ActivityEnrollment::where('trainee_id', $traineeId)
                ->where('activity_session_id', $request->activity_session_id)
                ->whereIn('enrollment_status', ['active', 'pending'])
                ->first();

            if ($existingEnrollment) {
                throw new \Exception('Trainee is already enrolled in this session.');
            }

            // Create enrollment
            $enrollment = ActivityEnrollment::create([
                'activity_session_id' => $request->activity_session_id,
                'trainee_id' => $traineeId,
                'enrolled_by' => session('id'),
                'enrollment_status' => 'active',
                'enrollment_date' => now()->toDateString(),
                'start_date' => $request->start_date,
                'individual_goals' => $request->individual_goals ?? [],
                'enrollment_notes' => $request->enrollment_notes
            ]);

            // Update session enrollment count
            $session->increment('current_enrollment');

            DB::commit();

            Log::info('Trainee enrolled in activity', [
                'enrollment_id' => $enrollment->id,
                'trainee_id' => $traineeId,
                'session_id' => $request->activity_session_id,
                'enrolled_by' => session('name')
            ]);

            return redirect()->route('trainees.activity-dashboard', $traineeId)
                ->with('success', 'Trainee enrolled successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            
            Log::error('Failed to enroll trainee', [
                'trainee_id' => $traineeId,
                'session_id' => $request->activity_session_id,
                'error' => $e->getMessage(),
                'user' => session('name')
            ]);

            return redirect()->back()
                ->withInput()
                ->with('error', $e->getMessage());
        }
    }

    /**
     * Mark attendance for trainee
     */
    public function markAttendance(Request $request, $sessionId)
    {
        $request->validate([
            'attendance_data' => 'required|array',
            'attendance_data.*.trainee_id' => 'required|exists:trainees,id',
            'attendance_data.*.status' => 'required|in:present,absent,late,left_early,excused',
            'attendance_data.*.arrival_time' => 'nullable|date_format:H:i',
            'attendance_data.*.departure_time' => 'nullable|date_format:H:i',
            'attendance_data.*.participation_score' => 'nullable|integer|min:1|max:10',
            'attendance_data.*.session_notes' => 'nullable|string|max:500',
            'attendance_data.*.behavioral_notes' => 'nullable|string|max:500'
        ]);

        try {
            DB::beginTransaction();

            $session = ActivitySession::findOrFail($sessionId);
            $attendanceDate = now()->toDateString();

            foreach ($request->attendance_data as $attendance) {
                // Check if attendance already marked for today
                $existingAttendance = ActivityAttendance::where([
                    'activity_session_id' => $sessionId,
                    'trainee_id' => $attendance['trainee_id'],
                    'attendance_date' => $attendanceDate
                ])->first();

                $attendanceData = [
                    'activity_session_id' => $sessionId,
                    'trainee_id' => $attendance['trainee_id'],
                    'marked_by' => session('id'),
                    'attendance_date' => $attendanceDate,
                    'session_start_time' => $session->start_time,
                    'session_end_time' => $session->end_time,
                    'attendance_status' => $attendance['status'],
                    'actual_arrival_time' => $attendance['arrival_time'] ?? null,
                    'actual_departure_time' => $attendance['departure_time'] ?? null,
                    'participation_score' => $attendance['participation_score'] ?? null,
                    'session_notes' => $attendance['session_notes'] ?? null,
                    'behavioral_notes' => $attendance['behavioral_notes'] ?? null,
                    'requires_followup' => !empty($attendance['behavioral_notes'])
                ];

                if ($existingAttendance) {
                    $existingAttendance->update($attendanceData);
                } else {
                    ActivityAttendance::create($attendanceData);
                }
            }

            DB::commit();

            Log::info('Attendance marked for session', [
                'session_id' => $sessionId,
                'date' => $attendanceDate,
                'marked_by' => session('name'),
                'trainees_count' => count($request->attendance_data)
            ]);

            return redirect()->back()
                ->with('success', 'Attendance marked successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            
            Log::error('Failed to mark attendance', [
                'session_id' => $sessionId,
                'error' => $e->getMessage(),
                'user' => session('name')
            ]);

            return redirect()->back()
                ->with('error', 'Failed to mark attendance. Please try again.');
        }
    }

    /**
     * Generate progress report for trainee
     */
    public function progressReport($traineeId, $enrollmentId)
    {
        try {
            $enrollment = ActivityEnrollment::with([
                'trainee',
                'activitySession.activity',
                'activitySession.teacher',
                'progressReports' => function($query) {
                    $query->orderBy('assessment_date', 'desc');
                }
            ])->findOrFail($enrollmentId);

            // Verify trainee ID matches
            if ($enrollment->trainee_id != $traineeId) {
                return redirect()->back()
                    ->with('error', 'Invalid enrollment for this trainee.');
            }

            // Get attendance data
            $attendanceData = ActivityAttendance::where('trainee_id', $traineeId)
                ->where('activity_session_id', $enrollment->activity_session_id)
                ->orderBy('attendance_date', 'desc')
                ->get();

            // Calculate statistics
            $stats = [
                'total_sessions' => $attendanceData->count(),
                'present_sessions' => $attendanceData->where('attendance_status', 'present')->count(),
                'absent_sessions' => $attendanceData->where('attendance_status', 'absent')->count(),
                'average_participation' => $attendanceData->where('participation_score', '>', 0)->avg('participation_score'),
                'attendance_rate' => $attendanceData->count() > 0 ? 
                    ($attendanceData->where('attendance_status', 'present')->count() / $attendanceData->count()) * 100 : 0
            ];

            return view('trainees.progress-report', compact(
                'enrollment',
                'attendanceData',
                'stats'
            ));

        } catch (\Exception $e) {
            Log::error('Error generating progress report', [
                'trainee_id' => $traineeId,
                'enrollment_id' => $enrollmentId,
                'error' => $e->getMessage()
            ]);

            return redirect()->back()
                ->with('error', 'Error generating progress report.');
        }
    }

    // Helper methods
    private function canViewTrainee($trainee)
    {
        $userRole = session('role');
        $userCentreId = session('centre_id');

        // Admin and supervisors can view all trainees
        if (in_array($userRole, ['admin', 'supervisor'])) {
            return true;
        }

        // Teachers and AJKs can only view trainees from their centre
        return $trainee->centre_id == $userCentreId;
    }

    private function canEnrollTrainee($trainee)
    {
        $userRole = session('role');
        
        // Only admin, supervisor, and teachers can enroll trainees
        if (!in_array($userRole, ['admin', 'supervisor', 'teacher'])) {
            return false;
        }

        return $this->canViewTrainee($trainee);
    }

    private function calculateTraineeStats($traineeId)
    {
        $totalEnrollments = ActivityEnrollment::where('trainee_id', $traineeId)->count();
        $activeEnrollments = ActivityEnrollment::where('trainee_id', $traineeId)
            ->where('enrollment_status', 'active')->count();
        
        $totalAttendance = ActivityAttendance::where('trainee_id', $traineeId)->count();
        $presentAttendance = ActivityAttendance::where('trainee_id', $traineeId)
            ->where('attendance_status', 'present')->count();
        
        $attendanceRate = $totalAttendance > 0 ? ($presentAttendance / $totalAttendance) * 100 : 0;
        
        $avgParticipation = ActivityAttendance::where('trainee_id', $traineeId)
            ->where('participation_score', '>', 0)
            ->avg('participation_score');

        return [
            'total_enrollments' => $totalEnrollments,
            'active_enrollments' => $activeEnrollments,
            'attendance_rate' => round($attendanceRate, 1),
            'average_participation' => round($avgParticipation ?? 0, 1),
            'total_sessions_attended' => $presentAttendance
        ];
    }

    private function getUpcomingSessions($traineeId)
    {
        $dayMapping = [
            'Sunday' => 0, 'Monday' => 1, 'Tuesday' => 2, 'Wednesday' => 3,
            'Thursday' => 4, 'Friday' => 5, 'Saturday' => 6
        ];

        return ActivityEnrollment::where('trainee_id', $traineeId)
            ->where('enrollment_status', 'active')
            ->with(['activitySession.activity', 'activitySession.teacher'])
            ->get()
            ->map(function($enrollment) use ($dayMapping) {
                $session = $enrollment->activitySession;
                $today = now();
                $sessionDay = $dayMapping[$session->day_of_week];
                $currentDay = $today->dayOfWeek;
                
                $daysUntil = ($sessionDay - $currentDay + 7) % 7;
                if ($daysUntil == 0 && $today->format('H:i') > $session->start_time) {
                    $daysUntil = 7; // Next week
                }
                
                $nextSessionDate = $today->copy()->addDays($daysUntil);
                
                return [
                    'enrollment' => $enrollment,
                    'next_session_date' => $nextSessionDate,
                    'days_until' => $daysUntil
                ];
            })
            ->sortBy('days_until')
            ->take(5);
    }
}

TraineeActivityDashboardController

<?php

namespace App\Http\Controllers;

use App\Models\Trainee;
use App\Models\SessionEnrollment;
use App\Models\ActivityAttendance;
use App\Models\ActivitySession;
use Illuminate\Http\Request;
use Carbon\Carbon;

class TraineeActivityDashboardController extends Controller
{
    public function index()
    {
        $userId = session('id');
        $trainee = Trainee::where('user_id', $userId)->first();
        
        if (!$trainee) {
            return redirect()->route('dashboard')
                ->with('error', 'Trainee profile not found.');
        }
        
        // Get enrolled activities
        $enrollments = SessionEnrollment::with([
            'session.activity',
            'session.teacher',
            'attendance'
        ])
        ->where('trainee_id', $trainee->id)
        ->where('status', 'Active')
        ->get();
        
        // Get today's schedule
        $todaySchedule = $this->getTodaySchedule($enrollments);
        
        // Calculate attendance statistics
        $attendanceStats = $this->calculateAttendanceStats($trainee->id);
        
        // Get upcoming activities
        $upcomingActivities = $this->getUpcomingActivities($enrollments);
        
        return view('trainees.activity-dashboard', compact(
            'trainee',
            'enrollments',
            'todaySchedule',
            'attendanceStats',
            'upcomingActivities'
        ));
    }
    
    public function mySchedule()
    {
        $userId = session('id');
        $trainee = Trainee::where('user_id', $userId)->first();
        
        if (!$trainee) {
            return redirect()->route('dashboard')
                ->with('error', 'Trainee profile not found.');
        }
        
        $enrollments = SessionEnrollment::with(['session.activity', 'session.teacher'])
            ->where('trainee_id', $trainee->id)
            ->where('status', 'Active')
            ->get();
            
        // Group by day of week
        $schedule = $enrollments->groupBy(function ($enrollment) {
            return $enrollment->session->day_of_week;
        });
        
        return view('trainees.schedule', compact('trainee', 'schedule'));
    }
    
    public function myProgress($activityId = null)
    {
        $userId = session('id');
        $trainee = Trainee::where('user_id', $userId)->first();
        
        if (!$trainee) {
            return redirect()->route('dashboard')
                ->with('error', 'Trainee profile not found.');
        }
        
        $query = SessionEnrollment::with([
            'session.activity',
            'attendance'
        ])
        ->where('trainee_id', $trainee->id);
        
        if ($activityId) {
            $query->whereHas('session', function($q) use ($activityId) {
                $q->where('activity_id', $activityId);
            });
        }
        
        $enrollments = $query->get();
        
        // Calculate progress for each activity
        $progress = $enrollments->map(function ($enrollment) {
            $totalClasses = $enrollment->attendance->count();
            $attendedClasses = $enrollment->attendance
                ->whereIn('status', ['Present', 'Late'])->count();
            
            return [
                'activity' => $enrollment->session->activity,
                'total_classes' => $totalClasses,
                'attended_classes' => $attendedClasses,
                'attendance_rate' => $totalClasses > 0 
                    ? round(($attendedClasses / $totalClasses) * 100, 2) 
                    : 0,
                'participation_scores' => $enrollment->attendance
                    ->pluck('participation_score')
                    ->filter()
                    ->avg()
            ];
        });
        
        return view('trainees.progress', compact('trainee', 'progress'));
    }
    
    private function getTodaySchedule($enrollments)
    {
        $today = Carbon::now()->format('l');
        
        return $enrollments->filter(function ($enrollment) use ($today) {
            return $enrollment->session->day_of_week == $today;
        })->sortBy('session.start_time');
    }
    
    private function calculateAttendanceStats($traineeId)
    {
        $last30Days = Carbon::now()->subDays(30);
        
        $attendance = ActivityAttendance::where('trainee_id', $traineeId)
            ->where('attendance_date', '>=', $last30Days)
            ->get();
            
        $total = $attendance->count();
        $present = $attendance->whereIn('status', ['Present', 'Late'])->count();
        $absent = $attendance->where('status', 'Absent')->count();
        $excused = $attendance->where('status', 'Excused')->count();
        
        return [
            'total' => $total,
            'present' => $present,
            'absent' => $absent,
            'excused' => $excused,
            'rate' => $total > 0 ? round(($present / $total) * 100, 2) : 0
        ];
    }
    
    private function getUpcomingActivities($enrollments)
    {
        // Get next 7 days of activities
        $activities = collect();
        
        for ($i = 1; $i <= 7; $i++) {
            $date = Carbon::now()->addDays($i);
            $dayName = $date->format('l');
            
            $dayActivities = $enrollments->filter(function ($enrollment) use ($dayName) {
                return $enrollment->session->day_of_week == $dayName;
            });
            
            if ($dayActivities->count() > 0) {
                $activities->push([
                    'date' => $date,
                    'day' => $dayName,
                    'sessions' => $dayActivities
                ]);
            }
        }
        
        return $activities->take(5);
    }
}


TraineeHomeController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Trainees;
use App\Models\Centres;
use Illuminate\Support\Facades\Log;
use Exception;

class TraineeHomeController extends Controller
{
    /**
     * Display a listing of trainees with filtering capabilities
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        try {
            Log::info('Accessing trainees home page', [
                'user_id' => session('id'),
                'filters' => $request->all()
            ]);
            
            // Start with a base query
            $query = Trainees::query();
            
            // Apply center filter
            if ($request->filled('centre')) {
                $query->where('centre_name', $request->input('centre'));
                Log::debug('Filter applied: center = ' . $request->input('centre'));
            }
            
            // Apply condition filter
            if ($request->filled('condition')) {
                $query->where('trainee_condition', $request->input('condition'));
                Log::debug('Filter applied: condition = ' . $request->input('condition'));
            }
            
            // Apply search term (name or email)
            if ($request->filled('search')) {
                $search = $request->input('search');
                $query->where(function($q) use ($search) {
                    $q->where('trainee_first_name', 'like', "%{$search}%")
                      ->orWhere('trainee_last_name', 'like', "%{$search}%")
                      ->orWhere('trainee_email', 'like', "%{$search}%");
                });
                Log::debug('Filter applied: search = ' . $search);
            }
            
            // Get the filtered trainees with eager loading
            $trainees = $query->with('centre')->get();
            
            // Get all active centers for filter dropdown
            // Check if we need to use status or centre_status based on your DB structure
            $centres = Centres::where('centre_status', 'active')->get();
            
            // Get distinct condition types for filter dropdown
            $conditions = Trainees::select('trainee_condition')
                ->distinct()
                ->whereNotNull('trainee_condition')
                ->pluck('trainee_condition');
            
            // Group trainees by center
            $traineesByCenter = $trainees->groupBy('centre_name');
            
            // Count trainees for stats
            $totalTrainees = $trainees->count();
            $conditionTypes = $conditions->count();
            
            // Count new trainees in the last 30 days
            $newTraineesCount = Trainees::where('created_at', '>=', now()->subDays(30))->count();
            
            // Debug information about new trainees
            $recentlyCreated = Trainees::where('created_at', '>=', now()->subDays(30))->get();
            Log::debug('Recently created trainees:', [
                'count' => $recentlyCreated->count(),
                'dates' => $recentlyCreated->pluck('created_at')->toArray()
            ]);
            
            Log::info('Trainees retrieved successfully', [
                'total_trainees' => $totalTrainees,
                'new_trainees' => $newTraineesCount,
                'applied_filters' => $request->only(['search', 'centre', 'condition'])
            ]);
            
            return view('trainees.home', [
                'traineesByCenter' => $traineesByCenter,
                'centres' => $centres,
                'conditions' => $conditions,
                'totalTrainees' => $totalTrainees,
                'conditionTypes' => $conditionTypes,
                'newTraineesCount' => $newTraineesCount,
                'currentFilters' => $request->only(['search', 'centre', 'condition'])
            ]);
        } catch (Exception $e) {
            Log::error('Error retrieving trainees', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Return view with empty data and error message
            return view('trainees.home', [
                'traineesByCenter' => collect(),
                'centres' => collect(),
                'conditions' => collect(),
                'totalTrainees' => 0,
                'conditionTypes' => 0,
                'newTraineesCount' => 0,
                'error' => 'An error occurred while retrieving trainees: ' . $e->getMessage()
            ]);
        }
    }
    
    /**
     * Filter trainees by criteria.
     * This method is a fallback for non-AJAX filtering.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\View\View
     */
    public function filter(Request $request)
    {
        try {
            Log::info('Using dedicated filter method', [
                'user_id' => session('id'),
                'filters' => $request->all()
            ]);
            
            $query = Trainees::query();
            
            // Apply center filter
            if ($request->filled('centre')) {
                $query->where('centre_name', $request->input('centre'));
            }
            
            // Apply condition filter
            if ($request->filled('condition')) {
                $query->where('trainee_condition', $request->input('condition'));
            }
            
            // Apply search term
            if ($request->filled('search')) {
                $search = $request->input('search');
                $query->where(function($q) use ($search) {
                    $q->where('trainee_first_name', 'like', "%{$search}%")
                      ->orWhere('trainee_last_name', 'like', "%{$search}%")
                      ->orWhere('trainee_email', 'like', "%{$search}%");
                });
            }
            
            // Get filtered trainees
            $trainees = $query->with('centre')->get();
            
            // Group trainees by center
            $traineesByCenter = $trainees->groupBy('centre_name');
            
            // Get all centers for filter dropdown - using centre_status instead of status
            $centres = Centres::where('centre_status', 'active')->get();
            
            // Get condition types for filter dropdown
            $conditions = Trainees::select('trainee_condition')
                ->distinct()
                ->whereNotNull('trainee_condition')
                ->pluck('trainee_condition');
            
            // Count trainees for stats
            $totalTrainees = $trainees->count();
            $conditionTypes = $conditions->count();
            
            // Count new trainees in the last 30 days
            $newTraineesCount = Trainees::where('created_at', '>=', now()->subDays(30))->count();
            
            Log::info('Trainees filtered successfully', [
                'count' => $trainees->count(),
                'filters' => $request->all(),
                'user_id' => session('id')
            ]);
            
            return view('trainees.home', [
                'traineesByCenter' => $traineesByCenter,
                'centres' => $centres,
                'conditions' => $conditions,
                'totalTrainees' => $totalTrainees,
                'conditionTypes' => $conditionTypes,
                'newTraineesCount' => $newTraineesCount,
                'currentFilters' => $request->only(['search', 'centre', 'condition'])
            ]);
        } catch (Exception $e) {
            Log::error('Error filtering trainees', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id'),
                'request' => $request->all()
            ]);
            
            return view('trainees.home', [
                'traineesByCenter' => collect(),
                'centres' => Centres::where('centre_status', 'active')->get(),
                'error' => 'An error occurred while filtering trainees. Please try again later.'
            ]);
        }
    }
    
    /**
     * Export trainees data to CSV or Excel.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public function export(Request $request)
    {
        try {
            Log::info('Exporting trainees data', [
                'user_id' => session('id'),
                'format' => $request->input('format', 'csv')
            ]);
            
            // Build query based on filters
            $query = Trainees::query();
            
            // Apply filters if provided
            if ($request->filled('centre')) {
                $query->where('centre_name', $request->input('centre'));
            }
            
            if ($request->filled('condition')) {
                $query->where('trainee_condition', $request->input('condition'));
            }
            
            if ($request->filled('search')) {
                $search = $request->input('search');
                $query->where(function($q) use ($search) {
                    $q->where('trainee_first_name', 'like', "%{$search}%")
                      ->orWhere('trainee_last_name', 'like', "%{$search}%")
                      ->orWhere('trainee_email', 'like', "%{$search}%");
                });
            }
            
            // Get trainees
            $trainees = $query->get();
            
            // Format for export
            $format = $request->input('format', 'csv');
            $fileName = 'trainees_' . date('Y-m-d') . '.' . $format;
            
            $headers = array(
                "Content-type" => "text/csv",
                "Content-Disposition" => "attachment; filename=$fileName",
                "Pragma" => "no-cache",
                "Cache-Control" => "must-revalidate, post-check=0, pre-check=0",
                "Expires" => "0"
            );
            
            $columns = ['ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Birth Date', 'Age', 'Center', 'Condition', 'Created At'];
            
            $callback = function() use($trainees, $columns) {
                $file = fopen('php://output', 'w');
                fputcsv($file, $columns);
                
                foreach ($trainees as $trainee) {
                    $row = [
                        $trainee->id,
                        $trainee->trainee_first_name,
                        $trainee->trainee_last_name,
                        $trainee->trainee_email,
                        $trainee->trainee_phone_number,
                        $trainee->trainee_date_of_birth,
                        $trainee->getAgeAttribute(),
                        $trainee->centre_name,
                        $trainee->trainee_condition,
                        $trainee->created_at
                    ];
                    
                    fputcsv($file, $row);
                }
                
                fclose($file);
            };
            
            Log::info('Trainees data exported successfully', [
                'user_id' => session('id'),
                'count' => $trainees->count(),
                'format' => $format
            ]);
            
            return response()->stream($callback, 200, $headers);
            
        } catch (Exception $e) {
            Log::error('Error exporting trainees data', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeshome')
                ->with('error', 'An error occurred while exporting trainees data: ' . $e->getMessage());
        }
    }
    
    /**
     * Display detailed trainees statistics and analytics.
     *
     * @return \Illuminate\View\View
     */
    public function statistics()
    {
        try {
            Log::info('Accessing trainees statistics', [
                'user_id' => session('id')
            ]);
            
            // Get trainees count by centre
            $traineesCountByCenter = Trainees::select('centre_name')
                ->selectRaw('count(*) as count')
                ->groupBy('centre_name')
                ->get();
            
            // Get trainees count by condition
            $traineesCountByCondition = Trainees::select('trainee_condition')
                ->selectRaw('count(*) as count')
                ->groupBy('trainee_condition')
                ->get();
            
            // Get trainees count by age group
            $traineesCountByAgeGroup = [
                '0-5' => Trainees::whereRaw('TIMESTAMPDIFF(YEAR, trainee_date_of_birth, CURDATE()) BETWEEN 0 AND 5')->count(),
                '6-10' => Trainees::whereRaw('TIMESTAMPDIFF(YEAR, trainee_date_of_birth, CURDATE()) BETWEEN 6 AND 10')->count(),
                '11-15' => Trainees::whereRaw('TIMESTAMPDIFF(YEAR, trainee_date_of_birth, CURDATE()) BETWEEN 11 AND 15')->count(),
                '16-18' => Trainees::whereRaw('TIMESTAMPDIFF(YEAR, trainee_date_of_birth, CURDATE()) BETWEEN 16 AND 18')->count(),
                '18+' => Trainees::whereRaw('TIMESTAMPDIFF(YEAR, trainee_date_of_birth, CURDATE()) > 18')->count(),
            ];
            
            // Get new trainees by month (last 12 months)
            $newTraineesByMonth = [];
            for ($i = 0; $i < 12; $i++) {
                $date = now()->subMonths($i);
                $startOfMonth = $date->copy()->startOfMonth();
                $endOfMonth = $date->copy()->endOfMonth();
                
                $count = Trainees::whereBetween('created_at', [$startOfMonth, $endOfMonth])->count();
                $newTraineesByMonth[$date->format('M Y')] = $count;
            }
            
            // Reverse the array to show chronological order
            $newTraineesByMonth = array_reverse($newTraineesByMonth);
            
            return view('trainees.statistics', [
                'traineesCountByCenter' => $traineesCountByCenter,
                'traineesCountByCondition' => $traineesCountByCondition,
                'traineesCountByAgeGroup' => $traineesCountByAgeGroup,
                'newTraineesByMonth' => $newTraineesByMonth,
                'totalTrainees' => Trainees::count(),
                'newTraineesCount' => Trainees::where('created_at', '>=', now()->subDays(30))->count()
            ]);
            
        } catch (Exception $e) {
            Log::error('Error retrieving trainees statistics', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeshome')
                ->with('error', 'An error occurred while retrieving trainees statistics: ' . $e->getMessage());
        }
    }
}

TraineeManagementController

<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\Trainees;
use App\Models\Centres;
use Carbon\Carbon;

class TraineeManagementController extends Controller
{
    /**
     * Display a listing of the trainees
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        try {
            // Fetch all trainees with related data
            $trainees = Trainees::orderBy('id', 'desc')->get();
            
            // Get statistics data
            $totalTrainees = $trainees->count();
            $centerCount = $trainees->pluck('centre_name')->unique()->count();
            $conditionTypes = $trainees->pluck('trainee_condition')->unique()->count();
            $newTraineesCount = $trainees->where('created_at', '>=', Carbon::now()->subDays(30))->count();
            
            // Log the data retrieval
            Log::info('Trainee management accessed', [
                'user_id' => session('id'),
                'trainees_count' => $totalTrainees
            ]);
            
            return view('trainee-management', [
                'trainees' => $trainees,
                'totalTrainees' => $totalTrainees,
                'centerCount' => $centerCount,
                'conditionTypes' => $conditionTypes,
                'newTraineesCount' => $newTraineesCount
            ]);
        } catch (\Exception $e) {
            Log::error('Error accessing trainee management', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'An error occurred while loading the trainee management page. Please try again later.');
        }
    }
    
    /**
     * Display the specified trainee.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        try {
            $trainee = Trainees::findOrFail($id);
            
            return view('traineeprofile', [
                'trainee' => $trainee
            ]);
        } catch (\Exception $e) {
            Log::error('Error viewing trainee profile', [
                'trainee_id' => $id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('traineesmanagement')
                ->with('error', 'Trainee not found or an error occurred.');
        }
    }
    
    /**
     * Remove the specified trainee from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        try {
            $trainee = Trainees::findOrFail($id);
            
            // Delete avatar file if exists
            if ($trainee->trainee_avatar && !str_contains($trainee->trainee_avatar, 'default') && Storage::exists($trainee->trainee_avatar)) {
                Storage::delete($trainee->trainee_avatar);
            }
            
            // Delete the trainee record
            $trainee->delete();
            
            Log::info('Trainee deleted', [
                'user_id' => session('id'),
                'trainee_id' => $id
            ]);
            
            return redirect()->route('traineesmanagement')
                ->with('success', 'Trainee deleted successfully');
        } catch (\Exception $e) {
            Log::error('Error deleting trainee', [
                'trainee_id' => $id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('traineesmanagement')
                ->with('error', 'An error occurred while deleting the trainee.');
        }
    }
    
    /**
     * Export trainees to Excel.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public function export(Request $request)
    {
        try {
            $format = $request->input('format', 'xlsx');
            $trainees = Trainees::all();
            
            // Log the export action
            Log::info('Trainee data exported', [
                'user_id' => session('id'),
                'format' => $format,
                'count' => $trainees->count()
            ]);
            
            // Format the data for export
            $exportData = [];
            
            foreach ($trainees as $trainee) {
                $exportData[] = [
                    'ID' => $trainee->id,
                    'First Name' => $trainee->trainee_first_name,
                    'Last Name' => $trainee->trainee_last_name,
                    'Email' => $trainee->trainee_email,
                    'Phone Number' => $trainee->trainee_phone_number,
                    'Date of Birth' => $trainee->trainee_date_of_birth,
                    'Age' => $trainee->trainee_date_of_birth ? Carbon::parse($trainee->trainee_date_of_birth)->age : 'N/A',
                    'Centre' => $trainee->centre_name,
                    'Condition' => $trainee->trainee_condition,
                    'Created At' => $trainee->created_at ? $trainee->created_at->format('Y-m-d H:i:s') : 'N/A',
                    'Updated At' => $trainee->updated_at ? $trainee->updated_at->format('Y-m-d H:i:s') : 'N/A'
                ];
            }
            
            // Create the file name
            $fileName = 'trainees_' . date('Y-m-d') . '.' . $format;
            
            // Return response based on format
            if ($format == 'csv') {
                return $this->downloadAsCsv($exportData, $fileName);
            } else {
                return $this->downloadAsExcel($exportData, $fileName);
            }
        } catch (\Exception $e) {
            Log::error('Error exporting trainee data', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('traineesmanagement')
                ->with('error', 'An error occurred while exporting trainee data.');
        }
    }
    
    /**
     * Helper method to download data as CSV.
     *
     * @param  array  $data
     * @param  string  $fileName
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    private function downloadAsCsv($data, $fileName)
    {
        // This is a simplified version - in a real app you might use Laravel Excel or similar
        $output = fopen('php://temp', 'r+');
        
        // Add headers
        if (!empty($data)) {
            fputcsv($output, array_keys($data[0]));
            
            // Add data rows
            foreach ($data as $row) {
                fputcsv($output, $row);
            }
        }
        
        rewind($output);
        $csvContent = stream_get_contents($output);
        fclose($output);
        
        // Create response
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="' . $fileName . '"',
        ];
        
        return response($csvContent, 200, $headers);
    }
    
    /**
     * Helper method to download data as Excel.
     *
     * @param  array  $data
     * @param  string  $fileName
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    private function downloadAsExcel($data, $fileName)
    {
        // This is a placeholder - in a real app you would use Laravel Excel or similar
        // For demonstration purposes, we'll return a CSV file instead
        return $this->downloadAsCsv($data, str_replace('.xlsx', '.csv', $fileName));
    }
}

TraineeProfileController

<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use App\Models\Trainees;
use App\Models\Activities;
use App\Models\Centres;
use Carbon\Carbon;
use Exception;

class TraineeProfileController extends Controller
{
    /**
     * Display the trainee profile dashboard.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function index($id)
    {
        try {
            Log::info('Accessing trainee profile dashboard', [
                'user_id' => session('id'),
                'user_role' => session('role'),
                'trainee_id' => $id
            ]);
            
            // Find the trainee by ID with eager loading
            $trainee = Trainees::with(['centre', 'activities' => function($query) {
                $query->orderBy('activity_date', 'desc');
            }])->findOrFail($id);
            
            // Calculate some stats for the dashboard
            $age = Carbon::parse($trainee->trainee_date_of_birth)->age;
            $enrollmentDuration = Carbon::parse($trainee->created_at)->diffForHumans();
            $totalActivities = $trainee->activities->count();
            $recentActivities = $trainee->activities->where('activity_date', '>=', now()->subDays(30))->count();
            
            // Mock attendance data (in a real implementation, this would come from an attendance table)
            // We'll create some example attendance data for demonstration
            $currentMonth = date('Y-m');
            $startDate = date('Y-m-01');
            $endDate = date('Y-m-t');
            
            // Generate mock attendance data
            $totalDays = 20; // Assuming 20 working days per month
            $attendanceDays = [
                'present' => rand(12, 18),
                'late' => rand(0, 3),
                'absent' => rand(0, 5),
                'excused' => rand(0, 2)
            ];
            
            // Ensure total adds up to totalDays
            $sum = array_sum($attendanceDays);
            if ($sum != $totalDays) {
                $diff = $totalDays - $sum;
                $attendanceDays['present'] += $diff;
            }
            
            // Calculate attendance rate
            $attendanceRate = (($attendanceDays['present'] + ($attendanceDays['late'] * 0.5)) / $totalDays) * 100;
            $attendanceRate = round($attendanceRate);
            
            // Get attendance history (mock data for now)
            $attendanceHistory = [];
            $date = Carbon::parse($startDate);
            $statusOptions = ['present', 'present', 'present', 'present', 'late', 'absent', 'excused']; // Weighted for more present days
            
            for ($i = 0; $i < $totalDays; $i++) {
                // Skip weekends
                if ($date->isWeekend()) {
                    $date->addDay();
                    continue;
                }
                
                $status = $statusOptions[array_rand($statusOptions)];
                $attendanceHistory[] = [
                    'date' => $date->format('Y-m-d'),
                    'day_name' => $date->format('l'),
                    'status' => $status,
                    'remarks' => $status == 'excused' ? 'Medical appointment' : null
                ];
                
                $date->addDay();
            }
            
            // Sort by date descending
            usort($attendanceHistory, function($a, $b) {
                return strtotime($b['date']) - strtotime($a['date']);
            });
            
            // Get guardian information
            // In a real implementation, this would come from a guardians or trainee_profiles table
            // For now, we'll create mock data
            $guardian = [
                'name' => 'John Doe',
                'relationship' => 'Parent',
                'phone' => '+60123456789',
                'email' => 'johndoe@example.com',
                'address' => '123 Main Street, Kuala Lumpur'
            ];
            
            Log::info('Trainee profile data retrieved successfully', [
                'trainee_id' => $id,
                'activities_count' => $totalActivities
            ]);
            
            // Return the view with all data
            return view('trainees.profile', [
                'trainee' => $trainee,
                'age' => $age,
                'enrollmentDuration' => $enrollmentDuration,
                'totalActivities' => $totalActivities,
                'recentActivities' => $recentActivities,
                'attendanceDays' => $attendanceDays,
                'attendanceRate' => $attendanceRate,
                'attendanceHistory' => $attendanceHistory,
                'guardian' => $guardian
            ]);
        } catch (Exception $e) {
            Log::error('Error accessing trainee profile dashboard', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeshome')
                ->with('error', 'Unable to access trainee profile. ' . $e->getMessage());
        }
    }

    /**
     * Show the form for editing the trainee profile.
     *
     * @param int $id
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        try {
            Log::info('Accessing trainee edit form', [
                'user_id' => session('id'),
                'trainee_id' => $id
            ]);
            
            $trainee = Trainees::findOrFail($id);
            $centres = Centres::where('status', 'active')->get();
            
            // List of conditions (same as in registration)
            $conditions = [
                'Autism Spectrum Disorder',
                'Cerebral Palsy',
                'Down Syndrome',
                'Hearing Impairment',
                'Visual Impairment',
                'Intellectual Disability',
                'Physical Disability',
                'Speech Impairment',
                'Learning Disability',
                'Multiple Disabilities',
                'Other'
            ];
            
            return view('trainees.edit', [
                'trainee' => $trainee,
                'centres' => $centres,
                'conditions' => $conditions
            ]);
        } catch (Exception $e) {
            Log::error('Error accessing trainee edit form', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Unable to access edit form. ' . $e->getMessage());
        }
    }

    /**
     * Update the trainee profile.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request, $id)
    {
        try {
            Log::info('Updating trainee profile', [
                'user_id' => session('id'),
                'trainee_id' => $id,
                'request_data' => $request->except(['trainee_avatar'])
            ]);
            
            // Validate the request data
            $validatedData = $request->validate([
                'trainee_avatar' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
                'trainee_first_name' => 'required|string|max:255',
                'trainee_last_name' => 'required|string|max:255',
                'trainee_email' => [
                    'required',
                    'email',
                    Rule::unique('trainees')->ignore($id)
                ],
                'trainee_phone_number' => 'nullable|string|max:20',
                'trainee_date_of_birth' => 'required|date|before_or_equal:today',
                'centre_name' => 'required|string|exists:centres,centre_name',
                'trainee_condition' => 'required|string|max:255',
                'guardian_name' => 'nullable|string|max:255',
                'guardian_relationship' => 'nullable|string|max:255',
                'guardian_phone' => 'nullable|string|max:20',
                'guardian_email' => 'nullable|email|max:255',
                'additional_notes' => 'nullable|string|max:1000',
            ]);

            // Find the trainee by ID
            $trainee = Trainees::findOrFail($id);

            // Log the original trainee data
            Log::info('Original Trainee Data:', [
                'trainee_id' => $id,
                'first_name' => $trainee->trainee_first_name,
                'last_name' => $trainee->trainee_last_name,
                'email' => $trainee->trainee_email,
                'centre' => $trainee->centre_name,
                'condition' => $trainee->trainee_condition
            ]);

            // Update the trainee model with the validated data
            $trainee->trainee_first_name = $validatedData['trainee_first_name'];
            $trainee->trainee_last_name = $validatedData['trainee_last_name'];
            $trainee->trainee_email = $validatedData['trainee_email'];
            if (isset($validatedData['trainee_phone_number'])) {
                $trainee->trainee_phone_number = $validatedData['trainee_phone_number'];
            }
            $trainee->trainee_date_of_birth = $validatedData['trainee_date_of_birth'];
            $trainee->centre_name = $validatedData['centre_name'];
            $trainee->trainee_condition = $validatedData['trainee_condition'];

            // Handle the avatar image upload if provided
            if ($request->hasFile('trainee_avatar')) {
                try {
                    Log::info('Processing trainee avatar update');
                    
                    // Delete old avatar if exists and is not default
                    if ($trainee->trainee_avatar && 
                        !str_contains($trainee->trainee_avatar, 'default-avatar') && 
                        Storage::disk('public')->exists(str_replace('storage/', '', $trainee->trainee_avatar))) {
                        Storage::disk('public')->delete(str_replace('storage/', '', $trainee->trainee_avatar));
                    }
                    
                    $avatar = $request->file('trainee_avatar');
                    $avatarName = time() . '_' . $avatar->getClientOriginalName();
                    $avatarPath = $avatar->storeAs('trainee_avatars', $avatarName, 'public');
                    $trainee->trainee_avatar = 'storage/' . $avatarPath;
                    
                    Log::info('Trainee avatar updated successfully', [
                        'path' => $avatarPath,
                        'original_name' => $avatar->getClientOriginalName()
                    ]);
                } catch (Exception $e) {
                    Log::error('Error updating trainee avatar', [
                        'error' => $e->getMessage(),
                        'trace' => $e->getTraceAsString()
                    ]);
                    
                    // Don't update avatar if upload fails, but continue with other updates
                }
            }

            // Save additional data for future use
            $additionalData = [];
            if ($request->filled('guardian_name')) $additionalData['guardian_name'] = $request->input('guardian_name');
            if ($request->filled('guardian_relationship')) $additionalData['guardian_relationship'] = $request->input('guardian_relationship');
            if ($request->filled('guardian_phone')) $additionalData['guardian_phone'] = $request->input('guardian_phone');
            if ($request->filled('guardian_email')) $additionalData['guardian_email'] = $request->input('guardian_email');
            if ($request->filled('additional_notes')) $additionalData['additional_notes'] = $request->input('additional_notes');
            
            // Save the updated trainee model
            $trainee->save();

            // Log the updated trainee data
            Log::info('Updated Trainee Data:', [
                'trainee_id' => $id,
                'first_name' => $trainee->trainee_first_name,
                'last_name' => $trainee->trainee_last_name,
                'email' => $trainee->trainee_email,
                'centre' => $trainee->centre_name,
                'condition' => $trainee->trainee_condition
            ]);
            
            if (!empty($additionalData)) {
                Log::info('Additional trainee data received but not stored in database', [
                    'trainee_id' => $trainee->id,
                    'additional_data' => $additionalData
                ]);
            }

            // Redirect back to the profile page with success message
            return redirect()->route('traineeprofile', ['id' => $trainee->id])
                ->with('success', 'Trainee profile updated successfully!');
        } catch (Exception $e) {
            // Log the error
            Log::error('Error updating trainee profile', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);

            // Redirect with error message
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to update profile: ' . $e->getMessage());
        }
    }
    
    /**
     * Update trainee progress.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateProgress(Request $request, $id)
    {
        try {
            Log::info('Updating trainee progress', [
                'user_id' => session('id'),
                'trainee_id' => $id,
                'request_data' => $request->all()
            ]);
            
            $trainee = Trainees::findOrFail($id);
            
            // Validate the input
            $validatedData = $request->validate([
                'progress_notes' => 'required|string',
                'progress_date' => 'required|date|before_or_equal:today',
                'progress_type' => 'required|string',
                'progress_rating' => 'required|integer|min:1|max:5'
            ]);
            
            // Create a new activity record for this progress update
            $activity = new Activities();
            $activity->trainee_id = $id;
            $activity->activity_name = 'Progress Update: ' . $validatedData['progress_type'];
            $activity->activity_type = 'Progress';
            $activity->activity_date = $validatedData['progress_date'];
            $activity->activity_description = $validatedData['progress_notes'];
            $activity->activity_goals = 'Rating: ' . $validatedData['progress_rating'] . '/5';
            $activity->created_by = session('id');
            
            // Save the activity
            $activity->save();
            
            Log::info('Trainee progress updated successfully', [
                'trainee_id' => $id,
                'activity_id' => $activity->id,
                'type' => $validatedData['progress_type'],
                'rating' => $validatedData['progress_rating']
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('success', 'Progress updated successfully');
        } catch (Exception $e) {
            Log::error('Error updating trainee progress', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to update progress: ' . $e->getMessage());
        }
    }
    
    /**
     * Record trainee attendance.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function recordAttendance(Request $request, $id)
    {
        try {
            Log::info('Recording trainee attendance', [
                'user_id' => session('id'),
                'trainee_id' => $id,
                'request_data' => $request->all()
            ]);
            
            // Validate the input
            $validatedData = $request->validate([
                'attendance_date' => 'required|date|before_or_equal:today',
                'attendance_status' => 'required|in:present,late,absent,excused',
                'attendance_remarks' => 'nullable|string|max:255'
            ]);
            
            // In a real implementation, this would create a record in an attendances table
            // For now, we'll just log it
            Log::info('Trainee attendance recorded', [
                'trainee_id' => $id,
                'date' => $validatedData['attendance_date'],
                'status' => $validatedData['attendance_status'],
                'remarks' => $validatedData['attendance_remarks'] ?? null,
                'recorded_by' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('success', 'Attendance recorded successfully');
        } catch (Exception $e) {
            Log::error('Error recording trainee attendance', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to record attendance: ' . $e->getMessage());
        }
    }
    
    /**
     * Delete trainee profile.
     *
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        try {
            Log::info('Deleting trainee profile', [
                'user_id' => session('id'),
                'trainee_id' => $id
            ]);
            
            $trainee = Trainees::findOrFail($id);
            
            // Delete avatar file if exists and not default
            if ($trainee->trainee_avatar && 
                !str_contains($trainee->trainee_avatar, 'default-avatar') && 
                Storage::disk('public')->exists(str_replace('storage/', '', $trainee->trainee_avatar))) {
                Storage::disk('public')->delete(str_replace('storage/', '', $trainee->trainee_avatar));
            }
            
            // Delete related activities
            Activities::where('trainee_id', $id)->delete();
            
            // Delete the trainee
            $trainee->delete();
            
            Log::info('Trainee deleted successfully', [
                'trainee_id' => $id,
                'deleted_by' => session('id')
            ]);
            
            return redirect()->route('traineeshome')
                ->with('success', 'Trainee deleted successfully');
        } catch (Exception $e) {
            Log::error('Error deleting trainee', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to delete trainee: ' . $e->getMessage());
        }
    }
    
    /**
     * Add a new activity for the trainee.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function addActivity(Request $request, $id)
    {
        try {
            Log::info('Adding new activity for trainee', [
                'user_id' => session('id'),
                'trainee_id' => $id,
                'request_data' => $request->all()
            ]);
            
            // Validate the input
            $validatedData = $request->validate([
                'activity_name' => 'required|string|max:255',
                'activity_type' => 'required|string|max:255',
                'activity_date' => 'required|date',
                'activity_description' => 'required|string',
                'activity_goals' => 'nullable|string',
                'activity_outcomes' => 'nullable|string',
            ]);
            
            // Create a new activity
            $activity = new Activities();
            $activity->trainee_id = $id;
            $activity->activity_name = $validatedData['activity_name'];
            $activity->activity_type = $validatedData['activity_type'];
            $activity->activity_date = $validatedData['activity_date'];
            $activity->activity_description = $validatedData['activity_description'];
            $activity->activity_goals = $validatedData['activity_goals'];
            $activity->activity_outcomes = $validatedData['activity_outcomes'];
            $activity->created_by = session('id');
            
            // Save the activity
            $activity->save();
            
            Log::info('Activity added successfully', [
                'trainee_id' => $id,
                'activity_id' => $activity->id,
                'activity_name' => $activity->activity_name
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('success', 'Activity added successfully');
        } catch (Exception $e) {
            Log::error('Error adding activity for trainee', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to add activity: ' . $e->getMessage());
        }
    }
    
    /**
     * Download trainee profile as PDF.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function downloadProfile($id)
    {
        try {
            Log::info('Downloading trainee profile', [
                'user_id' => session('id'),
                'trainee_id' => $id
            ]);
            
            // This would normally use a PDF generation library like dompdf
            // For now, we'll just return a message
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('info', 'PDF generation feature will be implemented in a future update.');
        } catch (Exception $e) {
            Log::error('Error downloading trainee profile', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'trainee_id' => $id,
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeprofile', ['id' => $id])
                ->with('error', 'Failed to download profile: ' . $e->getMessage());
        }
    }
}

TraineeRegistrationController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Trainees;
use App\Models\Centres;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Intervention\Image\Facades\Image;
use Carbon\Carbon;

class TraineeRegistrationController extends Controller
{
    /**
     * Display the registration form.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        try {
            // Get centres for dropdown - only retrieve centre_name
            $centres = Centres::where('centre_status', 'active')->get();
            
            // Get conditions for dropdown (could be from a separate model/table in the future)
            $conditions = [
                'Autism Spectrum Disorder',
                'Down Syndrome',
                'Cerebral Palsy',
                'Hearing Impairment',
                'Visual Impairment',
                'Intellectual Disability',
                'Physical Disability',
                'Speech and Language Disorder',
                'Learning Disability',
                'Multiple Disabilities',
                'Others'
            ];
            
            // Check if we have a selected centre from query parameters (for when redirected from centre page)
            $selectedCentre = null;
            if (request()->has('centre')) {
                $centreName = request()->get('centre');
                $selectedCentre = Centres::where('centre_name', $centreName)->first();
                if (!$selectedCentre) {
                    Log::warning('Invalid centre specified in trainee registration', [
                        'centre' => $centreName,
                        'user_id' => session('id')
                    ]);
                }
            }
            
            // Using the standalone view
            return view('trainees.registration', [
                'centres' => $centres,
                'conditions' => $conditions,
                'selectedCentre' => $selectedCentre
            ]);
        } catch (\Exception $e) {
            Log::error('Error accessing trainee registration page:', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->route('traineeshome')
                ->with('error', 'Unable to access the registration page. Please try again.');
        }
    }

    /**
     * Store a newly created trainee.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        // Start a database transaction
        DB::beginTransaction();
        
        try {
            // Step 1: Validate basic trainee information
            $basicValidator = Validator::make($request->all(), [
                'trainee_first_name' => 'required|string|max:255',
                'trainee_last_name' => 'required|string|max:255',
                'trainee_email' => 'required|email|unique:trainees,trainee_email',
                'trainee_phone_number' => 'required|string|max:20',
                'trainee_date_of_birth' => 'required|date|before_or_equal:today',
                'trainee_avatar' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
                'centre_name' => 'required|string|max:255|exists:centres,centre_name',
                'trainee_condition' => 'required|string|max:255',
            ], [
                'trainee_first_name.required' => 'The first name field is required.',
                'trainee_last_name.required' => 'The last name field is required.',
                'trainee_email.required' => 'The email field is required.',
                'trainee_email.email' => 'Please enter a valid email address.',
                'trainee_email.unique' => 'This email is already registered in our system.',
                'trainee_phone_number.required' => 'The phone number field is required.',
                'trainee_date_of_birth.required' => 'The date of birth field is required.',
                'trainee_date_of_birth.before_or_equal' => 'The date of birth cannot be in the future.',
                'trainee_avatar.image' => 'The uploaded file must be an image.',
                'trainee_avatar.mimes' => 'The image must be a JPEG, PNG, JPG or GIF file.',
                'trainee_avatar.max' => 'The image size must not exceed 2MB.',
                'centre_name.required' => 'Please select a centre.',
                'centre_name.exists' => 'The selected centre does not exist.',
                'trainee_condition.required' => 'Please specify the trainee\'s condition.',
            ]);
            
            if ($basicValidator->fails()) {
                Log::warning('Trainee basic validation failed', [
                    'errors' => $basicValidator->errors()->toArray(),
                    'user_id' => session('id')
                ]);
                
                return redirect()->back()
                    ->withErrors($basicValidator)
                    ->withInput()
                    ->with('error_tab', 'basic'); // Indicates which tab has errors
            }
            
            // Step 2: Validate guardian information
            $guardianValidator = Validator::make($request->all(), [
                'guardian_name' => 'required|string|max:255',
                'guardian_relationship' => 'required|string|max:255',
                'guardian_phone' => 'required|string|max:20',
                'guardian_email' => 'required|email|max:255',
                'guardian_address' => 'nullable|string|max:500',
            ], [
                'guardian_name.required' => 'The guardian name field is required.',
                'guardian_relationship.required' => 'Please specify the relationship to the trainee.',
                'guardian_phone.required' => 'The guardian phone number is required.',
                'guardian_email.required' => 'The guardian email address is required.',
                'guardian_email.email' => 'Please enter a valid email address for the guardian.',
            ]);
            
            if ($guardianValidator->fails()) {
                Log::warning('Guardian validation failed', [
                    'errors' => $guardianValidator->errors()->toArray(),
                    'user_id' => session('id')
                ]);
                
                return redirect()->back()
                    ->withErrors($guardianValidator)
                    ->withInput()
                    ->with('error_tab', 'guardian'); // Indicates which tab has errors
            }
            
            // Step 3: Validate additional information (optional fields)
            $additionalValidator = Validator::make($request->all(), [
                'additional_notes' => 'nullable|string|max:5000',
                'medical_history' => 'nullable|string|max:5000',
                'emergency_contact_name' => 'nullable|string|max:255',
                'emergency_contact_phone' => 'nullable|string|max:20',
                'emergency_contact_relationship' => 'nullable|string|max:255',
                'consent' => 'required|accepted',
            ], [
                'consent.required' => 'You must provide consent to register this trainee.',
                'consent.accepted' => 'You must provide consent to register this trainee.',
            ]);
            
            if ($additionalValidator->fails()) {
                Log::warning('Additional information validation failed', [
                    'errors' => $additionalValidator->errors()->toArray(),
                    'user_id' => session('id')
                ]);
                
                return redirect()->back()
                    ->withErrors($additionalValidator)
                    ->withInput()
                    ->with('error_tab', 'additional'); // Indicates which tab has errors
            }
            
            // Create new trainee record
            $trainee = new Trainees();
            $trainee->trainee_first_name = $request->input('trainee_first_name');
            $trainee->trainee_last_name = $request->input('trainee_last_name');
            $trainee->trainee_email = $request->input('trainee_email');
            $trainee->trainee_phone_number = $request->input('trainee_phone_number');
            $trainee->trainee_date_of_birth = $request->input('trainee_date_of_birth');
            $trainee->centre_name = $request->input('centre_name'); // Just store the centre_name
            $trainee->trainee_condition = $request->input('trainee_condition');
            $trainee->trainee_attendance = 0; // Default attendance value
            
            // Add guardian information
            $trainee->guardian_name = $request->input('guardian_name');
            $trainee->guardian_relationship = $request->input('guardian_relationship');
            $trainee->guardian_phone = $request->input('guardian_phone');
            $trainee->guardian_email = $request->input('guardian_email');
            $trainee->guardian_address = $request->input('guardian_address');
            
            // Add additional information
            $trainee->medical_history = $request->input('medical_history');
            $trainee->additional_notes = $request->input('additional_notes');
            $trainee->emergency_contact_name = $request->input('emergency_contact_name');
            $trainee->emergency_contact_phone = $request->input('emergency_contact_phone');
            $trainee->emergency_contact_relationship = $request->input('emergency_contact_relationship');
            
            // Save the trainee to get an ID (needed for avatar naming)
            $trainee->save();
            
            // Handle avatar upload with improved naming
            if ($request->hasFile('trainee_avatar')) {
                try {
                    $avatar = $request->file('trainee_avatar');
                    
                    // Generate unique filename related to the trainee
                    $filename = $this->generateAvatarFilename($trainee, $avatar);
                    
                    // Process and optimize the image
                    $this->processAndStoreAvatar($avatar, $filename, $trainee);
                } catch (\Exception $e) {
                    Log::error('Error processing trainee avatar:', [
                        'trainee_id' => $trainee->id,
                        'error' => $e->getMessage(),
                        'trace' => $e->getTraceAsString()
                    ]);
                    
                    // Set default avatar but continue with registration
                    $trainee->trainee_avatar = 'images/default-avatar.jpg';
                    $trainee->save();
                }
            } else {
                // Set default avatar
                $trainee->trainee_avatar = 'images/default-avatar.jpg';
                $trainee->save();
            }
            
            // Commit the transaction
            DB::commit();
            
            // Log the successful registration
            Log::info('Trainee registered successfully', [
                'trainee_id' => $trainee->id,
                'trainee_name' => $trainee->trainee_first_name . ' ' . $trainee->trainee_last_name,
                'registered_by' => session('id'),
                'centre' => $trainee->centre_name
            ]);
            
            return redirect()->route('traineeshome')
                ->with('success', 'Trainee registered successfully.');
                
        } catch (\Illuminate\Database\QueryException $e) {
            // Handle database query exceptions
            DB::rollBack();
            
            Log::error('Database error while registering trainee:', [
                'error' => $e->getMessage(),
                'sql' => $e->getSql() ?? 'Unknown SQL',
                'bindings' => $e->getBindings() ?? [],
                'code' => $e->getCode(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->with('error', 'A database error occurred. Please contact system administrator.')
                ->withInput();
                
        } catch (\Illuminate\Validation\ValidationException $e) {
            // Handle validation exceptions (should be caught by validators above, but just in case)
            DB::rollBack();
            
            Log::error('Validation error while registering trainee:', [
                'error' => $e->getMessage(),
                'errors' => $e->errors(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->withErrors($e->errors())
                ->withInput();
                
        } catch (\Exception $e) {
            // Handle any other exceptions
            DB::rollBack();
            
            Log::error('Error registering trainee:', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id'),
                'request' => $request->except(['trainee_avatar']),
                'request_has_file' => $request->hasFile('trainee_avatar')
            ]);
            
            $errorMessage = 'An error occurred while registering the trainee. ';
            
            // Provide more specific error messages based on the exception
            if ($e instanceof \Illuminate\Filesystem\FileNotFoundException) {
                $errorMessage .= 'Error uploading avatar file. Please try again with a different image.';
            } elseif ($e instanceof \ErrorException && strpos($e->getMessage(), 'mkdir') !== false) {
                $errorMessage .= 'Error creating directories. Please contact system administrator.';
            } else {
                $errorMessage .= 'Please try again or contact support if the issue persists.';
            }
            
            return redirect()->back()
                ->with('error', $errorMessage)
                ->withInput();
        }
    }
    
    /**
     * Generate a unique filename for the trainee avatar
     *
     * @param Trainees $trainee
     * @param \Illuminate\Http\UploadedFile $file
     * @return string
     */
    private function generateAvatarFilename(Trainees $trainee, $file)
    {
        // Extract the file extension
        $extension = $file->getClientOriginalExtension();
        
        // Get trainee initials and sanitize them
        $firstInitial = substr($trainee->trainee_first_name, 0, 1);
        $lastInitial = substr($trainee->trainee_last_name, 0, 1);
        $initials = strtoupper($firstInitial . $lastInitial);
        
        // Generate safe initials (remove any non-alphanumeric characters)
        $safeInitials = preg_replace("/[^A-Z]/", "", $initials);
        if (empty($safeInitials)) {
            $safeInitials = "XX";
        }
        
        // Get a safe version of the last name for the filename
        $safeLastName = Str::slug(substr($trainee->trainee_last_name, 0, 10));
        if (empty($safeLastName)) {
            $safeLastName = 'unknown';
        }
        
        // Create unique filename with traineeID, initials, last name, and timestamp
        $timestamp = Carbon::now()->format('YmdHis');
        return "trainee_{$trainee->id}_{$safeInitials}_{$safeLastName}_{$timestamp}.{$extension}";
    }
    
    /**
     * Process and store the avatar image
     *
     * @param \Illuminate\Http\UploadedFile $file
     * @param string $filename
     * @param Trainees $trainee
     * @return void
     */
    private function processAndStoreAvatar($file, $filename, Trainees &$trainee)
    {
        // Create storage directory if it doesn't exist
        $storagePath = public_path('storage/trainee_avatars');
        if (!file_exists($storagePath)) {
            mkdir($storagePath, 0755, true);
        }
        
        // Define path for the image
        $filePath = 'storage/trainee_avatars/' . $filename;
        $fullPath = public_path($filePath);
        
        // Check if we have the Intervention Image library
        if (class_exists('Intervention\Image\Facades\Image')) {
            // Process the image - resize and optimize
            $img = Image::make($file->getRealPath());
            
            // Resize to standard dimensions while maintaining aspect ratio
            $img->fit(300, 300, function ($constraint) {
                $constraint->upsize();
            });
            
            // Save the processed image with medium quality to reduce file size
            $img->save($fullPath, 80);
        } else {
            // Fallback if Intervention Image isn't available
            $file->move(public_path('storage/trainee_avatars'), $filename);
        }
        
        // Update trainee with the avatar path
        $trainee->trainee_avatar = $filePath;
        $trainee->save();
    }
    
    /**
     * Validate trainee email for AJAX requests.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function validateEmail(Request $request)
    {
        try {
            $email = $request->input('email');
            
            // Check if email exists
            $exists = Trainees::where('trainee_email', $email)->exists();
            
            return response()->json([
                'valid' => !$exists,
                'message' => $exists ? 'Email already exists' : 'Email is available'
            ]);
        } catch (\Exception $e) {
            Log::error('Error validating trainee email:', [
                'error' => $e->getMessage(),
                'email' => $request->input('email')
            ]);
            
            return response()->json([
                'valid' => false,
                'message' => 'Error validating email'
            ], 500);
        }
    }
    
    /**
     * Import trainees from CSV/Excel.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function import(Request $request)
    {
        try {
            // Validate file
            $validator = Validator::make($request->all(), [
                'trainees_file' => 'required|file|mimes:csv,xlsx,xls|max:5120',
            ]);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator)
                    ->withInput();
            }
            
            // Here you would implement the actual import logic
            // This would typically use a package like maatwebsite/excel
            // For now, we'll just log that the import was attempted
            
            Log::info('Trainees import initiated', [
                'user_id' => session('id'),
                'filename' => $request->file('trainees_file')->getClientOriginalName()
            ]);
            
            // For now return with a placeholder message
            return redirect()->route('traineeshome')
                ->with('info', 'Import functionality is under development.');
                
        } catch (\Exception $e) {
            Log::error('Error importing trainees:', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->with('error', 'An error occurred during import: ' . $e->getMessage());
        }
    }
}

UserController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use App\Models\Users;
use App\Models\AuditLog;

class UserController extends Controller
{
    // Define role hierarchy
    private $roleHierarchy = [
        'admin' => 4,
        'supervisor' => 3,
        'ajk' => 2,
        'teacher' => 1
    ];

    /**
     * Check if the current user has permission to manage a target user of a specific role
     *
     * @param string $targetRole Role of the user being accessed/modified
     * @return bool
     */
    private function canManageRole($targetRole)
    {
        $userRole = session('role');
        
        // Get hierarchy levels
        $userLevel = $this->roleHierarchy[$userRole] ?? 0;
        $targetLevel = $this->roleHierarchy[$targetRole] ?? 0;
        
        // User can only manage roles with lower hierarchy level than their own
        return $userLevel > $targetLevel;
    }

    /**
     * Display a listing of the users.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        $userRole = session('role');
        $userId = session('id');
        
        Log::info('User accessed staff list', [
            'user_id' => $userId,
            'role' => $userRole
        ]);
        
        // Get users based on role hierarchy
        $admins = [];
        $supervisors = [];
        $ajks = [];
        $teachers = [];
        
        // Admins can see all users
        if ($userRole === 'admin') {
            $admins = Users::where('role', 'admin')->get();
            $supervisors = Users::where('role', 'supervisor')->get();
            $ajks = Users::where('role', 'ajk')->get();
            $teachers = Users::where('role', 'teacher')->get();
        } 
        // Supervisors can see AJKs and Teachers
        else if ($userRole === 'supervisor') {
            $ajks = Users::where('role', 'ajk')->get();
            $teachers = Users::where('role', 'teacher')->get();
        } 
        // AJKs can see Teachers
        else if ($userRole === 'ajk') {
            $teachers = Users::where('role', 'teacher')->get();
        } 
        // Teachers can't manage other staff
        else {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to access this page');
        }
        
        return view('users.index', [
            'admins' => $admins,
            'supervisors' => $supervisors,
            'ajks' => $ajks,
            'teachers' => $teachers,
            'userRole' => $userRole
        ]);
    }

    /**
     * Show the form for creating a new user.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        $userRole = session('role');
        
        // Get available roles based on hierarchy
        $availableRoles = [];
        
        if ($userRole === 'admin') {
            $availableRoles = ['admin', 'supervisor', 'ajk', 'teacher'];
        } else if ($userRole === 'supervisor') {
            $availableRoles = ['ajk', 'teacher'];
        } else if ($userRole === 'ajk') {
            $availableRoles = ['teacher'];
        } else {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to create users');
        }
        
        return view('users.create', [
            'availableRoles' => $availableRoles,
            'userRole' => $userRole
        ]);
    }

    /**
     * Store a newly created user in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        $userRole = session('role');
        $userId = session('id');
        
        // Check if user has permission to create this role
        if (!$this->canManageRole($request->role)) {
            Log::warning('Unauthorized attempt to create user', [
                'user_id' => $userId,
                'user_role' => $userRole,
                'target_role' => $request->role
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to create users with this role');
        }
        
        // Validate input with specific error messages
        $validator = Validator::make($request->all(), [
            'iium_id' => [
                'required',
                'string',
                'size:8',
                'regex:/^[A-Z]{4}\d{4}$/',
                Rule::unique('users', 'iium_id'),
            ],
            'role' => [
                'required',
                Rule::in(array_filter(['admin', 'supervisor', 'ajk', 'teacher'], function($role) use ($userRole) {
                    return $this->canManageRole($role);
                }))
            ],
            'name' => 'required',
            'email' => [
                'required',
                'email',
                Rule::unique('users', 'email'),
            ],
            'password' => [
                'required',
                'min:5',
                'regex:/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[\W_]).{5,}$/',
                
            ],
            'password_confirmation' => 'required|same:password',
            'centre_id' => 'required|exists:centres,id',
        ]);
        
        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput($request->except(['password', 'password_confirmation']));
        }
        
        // Get validated data
        $validatedData = $validator->validated();
        
        // Encrypt password
        $validatedData['password'] = Hash::make($validatedData['password']);
        
        DB::beginTransaction();
        try {
            // Create user directly in Users table
            $user = new Users();
            $user->iium_id = strtoupper($validatedData['iium_id']);
            $user->name = $validatedData['name'];
            $user->email = $validatedData['email'];
            $user->password = $validatedData['password'];
            $user->role = $validatedData['role']; // Set the role
            $user->centre_id = $validatedData['centre_id'];
            $user->status = 'active';
            
            $saved = $user->save();
            
            if (!$saved) {
                DB::rollBack();
                return back()->with('fail', 'Something went wrong, try again later');
            }
            
            // Log the action
            $this->logUserAction('create', $user->id, $validatedData['role'], [
                'name' => $validatedData['name'],
                'email' => $validatedData['email'],
                'iium_id' => $validatedData['iium_id'],
                'role' => $validatedData['role'],
                'centre_id' => $validatedData['centre_id']
            ]);
            
            DB::commit();
            
            $successMessage = "New " . ucfirst($validatedData['role']) . " has been registered";
            return redirect()->route('users.index')->with('success', $successMessage);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error creating user', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return back()->with('fail', 'An error occurred: ' . $e->getMessage())->withInput($request->except(['password', 'password_confirmation']));
        }
    }

    /**
     * Display the specified user.
     *
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show($role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to view this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to view users with this role');
        }
        
        // Get user from the users table filtered by role
        $user = Users::where('role', $role)
                ->where('id', $id)
                ->firstOrFail();
        
        // Get user audit log history if the table exists
        $history = [];
        if (DB::getSchemaBuilder()->hasTable('audit_logs')) {
            $history = AuditLog::where('table', 'users')
                     ->where('record_id', $id)
                     ->orderBy('created_at', 'desc')
                     ->get();
        }
        
        return view('users.show', [
            'user' => $user,
            'role' => $role,
            'history' => $history,
            'canEdit' => $this->canManageRole($role)
        ]);
    }

    /**
     * Show the form for editing the specified user.
     *
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function edit($role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to edit this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to edit users with this role');
        }
        
        // Get user from users table filtered by role
        $user = Users::where('role', $role)
               ->where('id', $id)
               ->firstOrFail();
        
        return view('users.edit', [
            'user' => $user,
            'role' => $role
        ]);
    }

    /**
     * Update the specified user in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request, $role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to update this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to update users with this role');
        }
        
        // Get user from users table filtered by role
        $user = Users::where('role', $role)
               ->where('id', $id)
               ->firstOrFail();
        
        // Validate input
        $validator = Validator::make($request->all(), [
            'iium_id' => [
                'required',
                'string',
                'size:8',
                'regex:/^[A-Z]{4}\d{4}$/',
                Rule::unique('users', 'iium_id')->ignore($id),
            ],
            'name' => 'required',
            'email' => [
                'required',
                'email',
                Rule::unique('users', 'email')->ignore($id),
            ],
            'centre_id' => 'required|exists:centres,id',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string',
            'bio' => 'nullable|string',
        ]);
        
        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }
        
        // Get validated data
        $validatedData = $validator->validated();
        
        // Save original user data for audit log
        $originalData = [
            'iium_id' => $user->iium_id,
            'name' => $user->name,
            'email' => $user->email,
            'centre_id' => $user->centre_id,
            'phone' => $user->phone ?? null,
            'address' => $user->address ?? null,
            'bio' => $user->bio ?? null,
        ];
        
        // Update user
        $user->iium_id = strtoupper($validatedData['iium_id']);
        $user->name = $validatedData['name'];
        $user->email = $validatedData['email'];
        $user->centre_id = $validatedData['centre_id'];
        
        // Update optional fields if provided
        if (isset($validatedData['phone'])) {
            $user->phone = $validatedData['phone'];
        }
        
        if (isset($validatedData['address'])) {
            $user->address = $validatedData['address'];
        }
        
        if (isset($validatedData['bio'])) {
            $user->bio = $validatedData['bio'];
        }
        
        $saved = $user->save();
        
        if (!$saved) {
            return back()->with('fail', 'Something went wrong, try again later');
        }
        
        // Log the changes
        $newData = [
            'iium_id' => $user->iium_id,
            'name' => $user->name,
            'email' => $user->email,
            'centre_id' => $user->centre_id,
            'phone' => $user->phone ?? null,
            'address' => $user->address ?? null,
            'bio' => $user->bio ?? null,
        ];
        
        $changes = array_diff_assoc($newData, $originalData);
        
        if (!empty($changes)) {
            $this->logUserAction('update', $id, $role, $changes, $originalData);
        }
        
        return redirect()->route('users.show', ['role' => $role, 'id' => $id])
            ->with('success', ucfirst($role) . ' updated successfully');
    }

    /**
     * Remove the specified user from storage.
     *
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to delete this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to delete users with this role');
        }
        
        // Get user from users table filtered by role
        $user = Users::where('role', $role)
               ->where('id', $id)
               ->firstOrFail();
        
        // Save user data for audit log before deletion
        $userData = [
            'iium_id' => $user->iium_id,
            'name' => $user->name,
            'email' => $user->email,
            'centre_id' => $user->centre_id
        ];
        
        // Delete user
        $user->delete();
        
        // Log the deletion
        $this->logUserAction('delete', $id, $role, $userData);
        
        return redirect()->route('users.index')
            ->with('success', ucfirst($role) . ' deleted successfully');
    }
    
    /**
     * Reset user password.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function resetPassword(Request $request, $role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to reset password for this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to reset password for users with this role');
        }
        
        // Validate input
        $request->validate([
            'password' => [
                'required',
                'min:5',
                'regex:/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[\W_]).{5,}$/',
                'confirmed'
            ]
        ]);
        
        // Get user from users table filtered by role
        $user = Users::where('role', $role)
               ->where('id', $id)
               ->firstOrFail();
        
        // Update password
        $user->password = Hash::make($request->password);
        $saved = $user->save();
        
        if (!$saved) {
            return back()->with('fail', 'Something went wrong, try again later');
        }
        
        // Log the password reset
        $this->logUserAction('password_reset', $id, $role, [
            'password' => 'Password was reset'
        ]);
        
        return redirect()->route('users.show', ['role' => $role, 'id' => $id])
            ->with('success', 'Password reset successfully');
    }
    
    /**
     * Change user status (active/inactive).
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  string  $role
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function changeStatus(Request $request, $role, $id)
    {
        // Check if user is authenticated
        if (!session('id') || !session('role')) {
            return redirect()->route('auth.loginpage')
                ->with('error', 'Please log in to access this page');
        }
        
        // Check if user has permission to change status for this role
        if (!$this->canManageRole($role)) {
            return redirect()->route('dashboard')
                ->with('error', 'You do not have permission to change status for users with this role');
        }
        
        // Validate input
        $request->validate([
            'status' => 'required|in:active,inactive'
        ]);
        
        // Get user from users table filtered by role
        $user = Users::where('role', $role)
               ->where('id', $id)
               ->firstOrFail();
        
        // Save original status for audit log
        $originalStatus = $user->status;
        
        // Update status
        $user->status = $request->status;
        $saved = $user->save();
        
        if (!$saved) {
            return back()->with('fail', 'Something went wrong, try again later');
        }
        
        // Log the status change
        $this->logUserAction('status_change', $id, $role, [
            'status' => $request->status
        ], [
            'status' => $originalStatus
        ]);
        
        return redirect()->route('users.show', ['role' => $role, 'id' => $id])
            ->with('success', 'User status updated successfully');
    }
    
    /**
     * Log user actions for auditing purposes
     *
     * @param string $action Type of action (create, update, delete, etc.)
     * @param int $recordId ID of the affected record
     * @param string $role User role (admin, supervisor, etc.)
     * @param array $newData New data for the record
     * @param array $oldData Old data for the record (for updates)
     * @return void
     */
    private function logUserAction($action, $recordId, $role, $newData, $oldData = [])
    {
        $userId = session('id');
        $userRole = session('role');
        
        if (!$userId || !$userRole) {
            Log::warning('Attempted to log user action without authenticated user', [
                'action' => $action,
                'record_id' => $recordId,
                'role' => $role
            ]);
            return;
        }
        
        try {
            // Check if audit_logs table exists
            if (!DB::getSchemaBuilder()->hasTable('audit_logs')) {
                Log::warning('Audit logs table does not exist, skipping logging', [
                    'action' => $action,
                    'record_id' => $recordId,
                    'role' => $role
                ]);
                return;
            }
            
            $auditLog = new AuditLog();
            $auditLog->user_id = $userId;
            $auditLog->user_role = $userRole;
            $auditLog->action = $action;
            $auditLog->table = 'users'; // Always use 'users' table, not role-specific tables
            $auditLog->record_id = $recordId;
            $auditLog->old_values = !empty($oldData) ? json_encode($oldData) : null;
            $auditLog->new_values = !empty($newData) ? json_encode($newData) : null;
            $auditLog->ip_address = request()->ip();
            $auditLog->user_agent = request()->userAgent();
            $auditLog->save();
            
            Log::info('User action logged successfully', [
                'action' => $action,
                'user_id' => $userId,
                'record_id' => $recordId,
                'table' => 'users'
            ]);
        } catch (\Exception $e) {
            Log::error('Failed to log user action', [
                'error' => $e->getMessage(),
                'action' => $action,
                'user_id' => $userId,
                'record_id' => $recordId
            ]);
        }
    }
}

UserProfileController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use App\Models\Users;
use Exception;

class UserProfileController extends Controller
{
    /**
     * Show the user profile page
     * 
     * @return \Illuminate\View\View
     */
    public function showProfile()
    {
        try {
            // Get user data from session
            $roleId = session('id');
            $role = session('role');
            
            Log::info('Profile page accessed', [
                'user_id' => $roleId,
                'role' => $role,
                'session_id' => session()->getId()
            ]);
            
            if (!$roleId || !$role) {
                Log::warning('Incomplete session data when accessing profile', [
                    'session_data' => session()->all()
                ]);
                
                return redirect()->route('auth.loginpage')
                    ->with('error', 'Your session has expired. Please log in again.');
            }
            
            // Fetch user data from database
            $userData = [];
            $userFound = false;
            
            try {
                $user = Users::find($roleId);
                if ($user) {
                    $userData = $user->toArray();
                    $userFound = true;
                    Log::info('User found in database', ['user_id' => $roleId]);
                }
            } catch (Exception $e) {
                Log::warning('Error retrieving user with Eloquent', [
                    'error' => $e->getMessage(),
                    'user_id' => $roleId
                ]);
            }
            
            // If user not found with Eloquent, try direct query
            if (!$userFound) {
                try {
                    $userDirect = DB::table('users')->where('id', $roleId)->first();
                    if ($userDirect) {
                        $userData = (array)$userDirect;
                        $userFound = true;
                        Log::info('User found with direct query', ['user_id' => $roleId]);
                    }
                } catch (Exception $e) {
                    Log::warning('Error retrieving user with direct query', [
                        'error' => $e->getMessage(),
                        'user_id' => $roleId
                    ]);
                }
            }
            
            // If still not found, build a basic array from session data
            if (!$userFound) {
                Log::warning('User not found in database, using session data only', [
                    'user_id' => $roleId
                ]);
                
                $userData = [
                    'id' => $roleId,
                    'role' => $role,
                    'name' => session('name'),
                    'email' => session('email'),
                    'iium_id' => session('iium_id')
                ];
            }
            
            // Add role information
            $userData['role'] = $role;
            
            // Handle bio/about field inconsistency
            if (isset($userData['about']) && !empty($userData['about'])) {
                $userData['bio'] = $userData['about'];
            } else if (isset($userData['bio']) && !empty($userData['bio'])) {
                $userData['about'] = $userData['bio'];
            }
            
            // =================================================================
            // CRITICAL FIX: Ensure session data is used as fallback
            // =================================================================
            $sessionFields = [
                'phone', 
                'address', 
                'bio', 
                'about', 
                'date_of_birth', 
                'avatar', 
                
            ];
            
            $sessionUsed = false;
            
            foreach ($sessionFields as $field) {
                // If user data is empty but session has data, use session data
                if (
                    (!isset($userData[$field]) || empty($userData[$field]) || $userData[$field] === null) && 
                    session()->has($field) && 
                    !empty(session($field))
                ) {
                    $oldValue = isset($userData[$field]) ? var_export($userData[$field], true) : 'null';
                    $userData[$field] = session($field);
                    
                    Log::info("Using session data for {$field}", [
                        'from' => $oldValue,
                        'to' => $userData[$field]
                    ]);
                    
                    $sessionUsed = true;
                }
            }
            
            if ($sessionUsed) {
                Log::info('Session data was used as fallback', [
                    'user_id' => $roleId,
                    'fields_using_session' => array_filter($sessionFields, function($field) use ($userData) {
                        return isset($userData[$field]) && $userData[$field] === session($field);
                    })
                ]);
            }
            
            // =================================================================
            // ADDITIONAL FIX: Ensure we have data in all required fields
            // =================================================================
            $requiredFields = [
                'name', 'email', 'phone', 'address', 'bio', 'about', 
                'date_of_birth', 'avatar'
            ];
            
            foreach ($requiredFields as $field) {
                if (!isset($userData[$field])) {
                    $userData[$field] = '';
                }
                
                // Ensure field is not null
                if ($userData[$field] === null) {
                    $userData[$field] = '';
                }
                
                // Handle special case for empty strings that might be coming from the database
                if ($userData[$field] === '' || $userData[$field] === '0000-00-00' || $userData[$field] === '0000-00-00 00:00:00') {
                    $userData[$field] = '';
                }
            }
            
            // Handle date formatting if date exists
            if (!empty($userData['date_of_birth']) && $userData['date_of_birth'] != '') {
                try {
                    $userData['date_of_birth'] = date('Y-m-d', strtotime($userData['date_of_birth']));
                } catch (Exception $e) {
                    Log::warning('Error formatting date of birth', [
                        'date' => $userData['date_of_birth'],
                        'error' => $e->getMessage()
                    ]);
                    $userData['date_of_birth'] = '';
                }
            }
            
            // Handle avatar field inconsistency
            if (empty($userData['avatar']) && !empty($userData['avatar'])) {
                $userData['avatar'] = $userData['avatar'];
            } else if (empty($userData['avatar']) && !empty($userData['avatar'])) {
                $userData['avatar'] = $userData['avatar'];
            }
            
            // Update session with consolidated data for next page load
            $fieldsToUpdate = [];
            
            foreach ($sessionFields as $field) {
                if (!empty($userData[$field]) && (empty(session($field)) || session($field) !== $userData[$field])) {
                    session([$field => $userData[$field]]);
                    $fieldsToUpdate[] = $field;
                }
            }
            
            if (!empty($fieldsToUpdate)) {
                Log::info('Updated session data for future use', [
                    'fields_updated' => $fieldsToUpdate
                ]);
            }
            
            // Log final prepared data for debugging
            Log::debug('Final profile data prepared for view', [
                'user_data_keys' => array_keys($userData),
                'phone' => $userData['phone'],
                'address' => $userData['address'],
                'bio' => $userData['bio'],
                'date_of_birth' => $userData['date_of_birth'],
                'from_session' => $sessionUsed
            ]);
            
            // Return the profile view with user data
            return view('profile', [
                'user' => $userData,
                'role' => $role,
                'debug' => config('app.debug')
            ]);
        } catch (Exception $e) {
            Log::error('Error displaying profile page', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('dashboard')
                ->with('error', 'There was a problem accessing your profile. Please try again later.');
        }
    }
    
    /**
     * Update user profile
     * 
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateProfile(Request $request)
    {
        DB::beginTransaction();
        
        try {
            // Get user data from session
            $roleId = session('id');
            $role = session('role');
            
            Log::info('Profile update attempted', [
                'user_id' => $roleId,
                'role' => $role,
                'data' => $request->except(['password', 'new_password', 'password_confirmation'])
            ]);
            
            if (!$roleId || !$role) {
                Log::warning('Incomplete session data when updating profile', [
                    'session_data' => session()->all()
                ]);
                
                return redirect()->route('auth.loginpage')
                    ->with('error', 'Your session has expired. Please log in again.');
            }
            
            // Validate input with custom error messages
            $validator = Validator::make($request->all(), [
                'name' => 'required|string|max:255',
                'email' => 'required|email|max:255',
                'phone' => 'nullable|string|max:20',
                'address' => 'nullable|string|max:500',
                'bio' => 'nullable|string|max:1000',
                'date_of_birth' => 'nullable|date|before:today',
            ], [
                'name.required' => 'Your name is required.',
                'email.required' => 'Your email address is required.',
                'email.email' => 'Please enter a valid email address.',
                'phone.max' => 'Phone number must not exceed 20 characters.',
                'date_of_birth.before' => 'Date of birth must be in the past.',
            ]);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator)
                    ->withInput();
            }
            
            // Get user model
            $user = null;
            $updateSuccess = false;
            
            try {
                $user = Users::find($roleId);
                if ($user) {
                    // Check if email changed and if it's unique
                    if ($user->email !== $request->email) {
                        $emailExists = Users::where('email', $request->email)
                            ->where('id', '!=', $roleId)
                            ->exists();
                            
                        if ($emailExists) {
                            DB::rollBack();
                            return redirect()->back()
                                ->with('error', 'Email address is already in use by another account.')
                                ->withInput();
                        }
                    }
                    
                    // Update user data with model
                    $user->name = $request->name;
                    $user->email = $request->email;
                    $user->phone = $request->phone;
                    $user->address = $request->address;
                    $user->bio = $request->bio ?? $user->bio;
                    $user->about = $request->bio ?? $user->about; // Update both fields for compatibility
                    
                    if ($request->has('date_of_birth') && $request->date_of_birth) {
                        $user->date_of_birth = $request->date_of_birth;
                    }
                    
                    $saved = $user->save();
                    
                    if ($saved) {
                        $updateSuccess = true;
                        Log::info('Profile updated with Eloquent model', [
                            'user_id' => $roleId
                        ]);
                    }
                }
            } catch (Exception $e) {
                Log::warning('Error updating user profile with Eloquent', [
                    'error' => $e->getMessage(),
                    'user_id' => $roleId
                ]);
            }
            
            // If Eloquent update failed, try direct DB update
            if (!$updateSuccess) {
                try {
                    // Set update data
                    $updateData = [
                        'name' => $request->name,
                        'email' => $request->email,
                        'phone' => $request->phone,
                        'address' => $request->address,
                        'bio' => $request->bio,
                        'about' => $request->bio // Update both fields for compatibility
                    ];
                    
                    if ($request->has('date_of_birth') && $request->date_of_birth) {
                        $updateData['date_of_birth'] = $request->date_of_birth;
                    }
                    
                    // Check if email changed and if it's unique
                    $existingEmail = DB::table('users')
                        ->where('id', '!=', $roleId)
                        ->where('email', $request->email)
                        ->exists();
                        
                    if ($existingEmail) {
                        DB::rollBack();
                        return redirect()->back()
                            ->with('error', 'Email address is already in use by another account.')
                            ->withInput();
                    }
                    
                    // Update with direct query
                    $updated = DB::table('users')
                        ->where('id', $roleId)
                        ->update($updateData);
                        
                    if ($updated) {
                        $updateSuccess = true;
                        Log::info('Profile updated with direct DB query', [
                            'user_id' => $roleId
                        ]);
                    }
                } catch (Exception $e) {
                    Log::error('Error updating user profile with direct query', [
                        'error' => $e->getMessage(),
                        'user_id' => $roleId
                    ]);
                }
            }
            
            if (!$updateSuccess) {
                Log::error('Failed to update profile through any method', [
                    'user_id' => $roleId
                ]);
                
                DB::rollBack();
                return redirect()->back()
                    ->with('error', 'Failed to update profile. Please try again.')
                    ->withInput();
            }
            
            // Update session data
            session([
                'name' => $request->name, 
                'email' => $request->email,
                'phone' => $request->phone,
                'address' => $request->address,
                'bio' => $request->bio,
                'about' => $request->bio,
                'date_of_birth' => $request->date_of_birth
            ]);
            
            DB::commit();
            
            Log::info('Profile updated successfully', [
                'user_id' => $roleId,
                'role' => $role
            ]);
            
            return redirect()->back()->with('success', 'Your profile has been updated successfully.');
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Exception during profile update', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->with('error', 'An unexpected error occurred. Please try again later.')
                ->withInput();
        }
    }
    
    /**
     * Change user password
     * 
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function changePassword(Request $request)
    {
        DB::beginTransaction();
        
        try {
            // Get user data from session
            $roleId = session('id');
            $role = session('role');
            
            Log::info('Password change attempted', [
                'user_id' => $roleId,
                'role' => $role
            ]);
            
            if (!$roleId || !$role) {
                Log::warning('Incomplete session data when changing password', [
                    'session_data' => session()->all()
                ]);
                
                return redirect()->route('auth.loginpage')
                    ->with('error', 'Your session has expired. Please log in again.');
            }
            
            // Validate input
            $validator = Validator::make($request->all(), [
                'current_password' => 'required',
                'new_password' => [
                    'required',
                    'min:8',
                    'confirmed',
                    'different:current_password',
                    'regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/'
                ],
                'new_password_confirmation' => 'required'
            ], [
                'current_password.required' => 'Your current password is required.',
                'new_password.required' => 'The new password is required.',
                'new_password.min' => 'Your password must be at least 8 characters long.',
                'new_password.confirmed' => 'The password confirmation does not match.',
                'new_password.different' => 'Your new password cannot be the same as your current password.',
                'new_password.regex' => 'Your password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',
                'new_password_confirmation.required' => 'Please confirm your new password.'
            ]);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator);
            }
            
            // Get user model
            $user = null;
            $passwordUpdateSuccess = false;
            
            try {
                $user = Users::find($roleId);
                if ($user) {
                    // Check if current password is correct
                    if (!Hash::check($request->current_password, $user->password)) {
                        Log::warning('Incorrect current password during password change', [
                            'user_id' => $roleId,
                            'role' => $role
                        ]);
                        
                        DB::rollBack();
                        return redirect()->back()
                            ->with('error', 'Your current password is incorrect.');
                    }
                    
                    // Update password
                    $user->password = Hash::make($request->new_password);
                    $saved = $user->save();
                    
                    if ($saved) {
                        $passwordUpdateSuccess = true;
                        Log::info('Password changed with Eloquent model', [
                            'user_id' => $roleId
                        ]);
                    }
                }
            } catch (Exception $e) {
                Log::warning('Error changing password with Eloquent', [
                    'error' => $e->getMessage(),
                    'user_id' => $roleId
                ]);
            }
            
            // If Eloquent update failed, try direct DB update
            if (!$passwordUpdateSuccess) {
                try {
                    // First verify current password
                    $currentUser = DB::table('users')
                        ->where('id', $roleId)
                        ->first();
                        
                    if ($currentUser && !Hash::check($request->current_password, $currentUser->password)) {
                        DB::rollBack();
                        return redirect()->back()
                            ->with('error', 'Your current password is incorrect.');
                    }
                    
                    // Update with direct query
                    $updated = DB::table('users')
                        ->where('id', $roleId)
                        ->update([
                            'password' => Hash::make($request->new_password)
                        ]);
                        
                    if ($updated) {
                        $passwordUpdateSuccess = true;
                        Log::info('Password changed with direct DB query', [
                            'user_id' => $roleId
                        ]);
                    }
                } catch (Exception $e) {
                    Log::error('Error changing password with direct query', [
                        'error' => $e->getMessage(),
                        'user_id' => $roleId
                    ]);
                }
            }
            
            if (!$passwordUpdateSuccess) {
                Log::error('Failed to change password through any method', [
                    'user_id' => $roleId
                ]);
                
                DB::rollBack();
                return redirect()->back()
                    ->with('error', 'Failed to update password. Please try again.');
            }
            
            DB::commit();
            
            Log::info('Password changed successfully', [
                'user_id' => $roleId,
                'role' => $role
            ]);
            
            return redirect()->back()->with('success', 'Your password has been changed successfully.');
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Exception during password change', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->with('error', 'An unexpected error occurred. Please try again later.');
        }
    }
    
    /**
     * Upload user avatar
     * 
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function uploadAvatar(Request $request)
    {
        DB::beginTransaction();
        
        try {
            // Get user data from session
            $roleId = session('id');
            $role = session('role');
            
            Log::info('Avatar upload attempted', [
                'user_id' => $roleId,
                'role' => $role
            ]);
            
            if (!$roleId || !$role) {
                Log::warning('Incomplete session data when uploading avatar', [
                    'session_data' => session()->all()
                ]);
                
                return redirect()->route('auth.loginpage')
                    ->with('error', 'Your session has expired. Please log in again.');
            }
            
            // Validate input
            $validator = Validator::make($request->all(), [
                'avatar' => 'required|image|mimes:jpeg,png,jpg,gif|max:2048', // 2MB max
            ], [
                'avatar.required' => 'Please select an image to upload.',
                'avatar.image' => 'The uploaded file must be an image.',
                'avatar.mimes' => 'Allowed image formats are: JPEG, PNG, JPG, GIF.',
                'avatar.max' => 'The image size must not exceed 2MB.'
            ]);
            
            if ($validator->fails()) {
                return redirect()->back()
                    ->withErrors($validator);
            }
            
            // Ensure the avatar directory exists
            $avatarsPath = storage_path('app/public/avatars');
            if (!file_exists($avatarsPath)) {
                if (!mkdir($avatarsPath, 0775, true)) {
                    Log::error('Failed to create avatars directory', ['path' => $avatarsPath]);
                    
                    DB::rollBack();
                    return redirect()->back()
                        ->with('error', 'Server configuration error: Could not create storage directory');
                }
            }
            
            // Test write permissions
            if (!is_writable($avatarsPath)) {
                Log::error('Avatars directory is not writable', ['path' => $avatarsPath]);
                
                DB::rollBack();
                return redirect()->back()
                    ->with('error', 'Server configuration error: Storage directory is not writable');
            }
            
            // Delete old avatar if exists
            $oldAvatarPath = null;
            
            // Try to get current avatar from session or user model
            $currentAvatar = session('avatar') ?? session('avatar');
            
            if (!$currentAvatar) {
                try {
                    $user = Users::find($roleId);
                    if ($user) {
                        $currentAvatar = $user->avatar ?? $user->avatar;
                    }
                } catch (Exception $e) {
                    Log::warning('Error getting current avatar from model', [
                        'error' => $e->getMessage(),
                        'user_id' => $roleId
                    ]);
                }
            }
            
            if ($currentAvatar) {
                $oldAvatarPath = 'public/avatars/' . $currentAvatar;
                
                if (Storage::exists($oldAvatarPath)) {
                    try {
                        Storage::delete($oldAvatarPath);
                        Log::info('Deleted old avatar file', [
                            'path' => $oldAvatarPath
                        ]);
                    } catch (Exception $e) {
                        Log::warning('Failed to delete old avatar', [
                            'path' => $oldAvatarPath,
                            'error' => $e->getMessage()
                        ]);
                        // Continue with upload even if delete fails
                    }
                }
            }
            
            // Generate a unique avatar filename
            $avatarName = $role . '_' . $roleId . '_' . Str::random(10) . '.' . $request->avatar->extension();
            
            // Log file details for debugging
            Log::info('Avatar file details', [
                'original_name' => $request->avatar->getClientOriginalName(),
                'size' => $request->avatar->getSize(),
                'mime' => $request->avatar->getMimeType(),
                'new_name' => $avatarName
            ]);
            
            // Store the file
            try {
                $path = $request->avatar->storeAs('avatars', $avatarName, 'public');
                
                // Verify the file was actually saved
                if (!Storage::exists('public/avatars/' . $avatarName)) {
                    Log::error('Avatar file was not saved properly', [
                        'expected_path' => 'public/avatars/' . $avatarName
                    ]);
                    
                    DB::rollBack();
                    return redirect()->back()
                        ->with('error', 'Failed to save avatar file. Please try again.');
                }
                
                Log::info('Avatar file stored successfully', [
                    'path' => $path
                ]);
            } catch (Exception $e) {
                Log::error('Failed to store avatar file', [
                    'error' => $e->getMessage()
                ]);
                
                DB::rollBack();
                return redirect()->back()
                    ->with('error', 'Failed to save avatar file: ' . $e->getMessage());
            }
            
            // Update avatar field in database
            $avatarUpdateSuccess = false;
            
            try {
                // Try with Eloquent first
                $user = Users::find($roleId);
                if ($user) {
                    // Update both fields for compatibility
                    if (isset($user->avatar)) {
                        $user->avatar = $avatarName;
                    }
                    
                    $saved = $user->save();
                    
                    if ($saved) {
                        $avatarUpdateSuccess = true;
                        Log::info('Avatar reference updated in database with Eloquent', [
                            'user_id' => $roleId,
                            'avatar' => $avatarName
                        ]);
                    }
                }
            } catch (Exception $e) {
                Log::warning('Error updating avatar reference with Eloquent', [
                    'error' => $e->getMessage(),
                    'user_id' => $roleId
                ]);
            }
            
            // If Eloquent update failed, try direct DB update
            if (!$avatarUpdateSuccess) {
                try {
                    // Update both fields for compatibility
                    $updateData = [];
                    
                    // Check which fields exist in the users table
                    $hasAvatarField = DB::getSchemaBuilder()->hasColumn('users', 'avatar');
    
                    
                    if ($hasAvatarField) {
                        $updateData['avatar'] = $avatarName;
                    }
                    
                    
                    
                    if (!empty($updateData)) {
                        $updated = DB::table('users')
                            ->where('id', $roleId)
                            ->update($updateData);
                            
                        if ($updated) {
                            $avatarUpdateSuccess = true;
                            Log::info('Avatar reference updated in database with direct query', [
                                'user_id' => $roleId,
                                'avatar' => $avatarName,
                                'fields_updated' => array_keys($updateData)
                            ]);
                        }
                    }
                } catch (Exception $e) {
                    Log::error('Error updating avatar reference with direct query', [
                        'error' => $e->getMessage(),
                        'user_id' => $roleId
                    ]);
                }
            }
            
            if (!$avatarUpdateSuccess) {
                Log::warning('Failed to update avatar reference in database, but file was saved', [
                    'user_id' => $roleId,
                    'avatar' => $avatarName,
                    'path' => $path
                ]);
                
                // Continue anyway since the file was successfully uploaded
                // Just log a warning instead of failing the operation
            }
            
            // Update session data regardless of database update success
            session([
                'avatar' => $avatarName,
                
            ]);
            
            DB::commit();
            
            Log::info('Avatar upload completed successfully', [
                'user_id' => $roleId,
                'role' => $role,
                'avatar' => $avatarName,
                'path' => $path
            ]);
            
            return redirect()->back()->with('success', 'Your profile photo has been updated successfully.');
        } catch (Exception $e) {
            DB::rollBack();
            
            Log::error('Exception during avatar upload', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'user_id' => session('id')
            ]);
            
            return redirect()->back()
                ->with('error', 'An unexpected error occurred while uploading your profile photo: ' . $e->getMessage());
        }
    }
}